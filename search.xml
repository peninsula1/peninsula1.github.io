<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>security过滤器链.md</title>
      <link href="/2023/08/28/security%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE-md/"/>
      <url>/2023/08/28/security%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE-md/</url>
      
        <content type="html"><![CDATA[<p>SpringSecurity核心有两大功能: 认证和鉴权。其中认证和鉴权中的一部分都是通过SpringSecurity提供的过滤器链完成的，因此，过滤器链是SpringSecurity的核心，那么SpringSecurity是如何玩弄过滤器的呢？</p><p>这个问题，我们需要从引入SpringSecurity依赖开始讲起。</p><p>环境依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-parent&lt;/artifactId&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.2</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line"> &lt;/parent&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="SpringSecurity的自动配置流程"><a href="#SpringSecurity的自动配置流程" class="headerlink" title="SpringSecurity的自动配置流程"></a>SpringSecurity的自动配置流程</h1><p>SecurityAutoConfiguration是SpringSecurity自动配置的起点，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.security.servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DefaultAuthenticationEventPublisher.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SecurityProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,</span></span><br><span class="line"><span class="meta">SecurityDataConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityAutoConfiguration</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//虽然不是核心,但是事件机制解耦是一种非常的好的设计思路 </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(AuthenticationEventPublisher.class)</span></span><br><span class="line"><span class="keyword">public</span> DefaultAuthenticationEventPublisher <span class="title function_">authenticationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultAuthenticationEventPublisher</span>(publisher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <strong>PS: 通过事件发布与订阅机制进行解耦是一种非常好的手段。</strong> </p></blockquote><p>在自动配置类的核心在于通过@Import注解，导入到<a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">容器</a>中的三个配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123; SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,</span></span><br><span class="line"><span class="meta">SecurityDataConfiguration.class &#125;)</span></span><br></pre></td></tr></table></figure><ul><li>SpringBootWebSecurityConfiguration负责在容器中不存在WebSecurityConfigurerAdapter的前提下，向容器中注入一个默认的WebSecurityConfigurerAdapter <code>(核心)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(WebSecurityConfigurerAdapter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootWebSecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//默认实现 </span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Order(SecurityProperties.BASIC_AUTH_ORDER)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SecurityDataConfiguration提供的SecurityEvaluationContextExtension，能够通过SPEL为经过<a href="https://cloud.tencent.com/product/mfas?from_column=20065&from=20065">身份验证</a>的用户提供数据查询 <code>（非核心,先了解）</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Configuration</span>(proxyBeanMethods = <span class="literal">false</span>)</span><br><span class="line">@<span class="title class_">ConditionalOnClass</span>(<span class="title class_">SecurityEvaluationContextExtension</span>.<span class="property">class</span>)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">SecurityDataConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Bean</span></span><br><span class="line">@<span class="title class_">ConditionalOnMissingBean</span></span><br><span class="line">public <span class="title class_">SecurityEvaluationContextExtension</span> <span class="title function_">securityEvaluationContextExtension</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecurityEvaluationContextExtension</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebSecurityEnablerConfiguration配置类中添加了@EnableWebSecurity注解，该注解是核心 <code>（核心）</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(WebSecurityConfigurerAdapter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityEnablerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EnableWebSecurity通过@Import注解又直接导入了三个配置类，并且通过@EnableGlobalAuthentication又间接导入了一个配置类，这些配置类都是核心 <code>(核心)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value = &#123; java.lang.annotation.ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123; WebSecurityConfiguration.class,</span></span><br><span class="line"><span class="meta">SpringWebMvcImportSelector.class,</span></span><br><span class="line"><span class="meta">OAuth2ImportSelector.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableGlobalAuthentication</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebSecurity &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">debug</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OAuth2ImportSelector判断当前环境是否是OAuth2,如果是则导入相关配置 <code>(非核心)</code></li><li>SpringWebMvcImportSelector如果当前环境是Spring mvc环境，则引入相关配置 <code>(非核心)</code></li><li>WebSecurityConfiguration配置WebSecurity <code>(核心)</code></li><li>EnableGlobalAuthentication用来开启全局配置 <strong><code>(与本文核心关联不大，但是对理解SpringSecurity全局配置非常重要)</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value = &#123; java.lang.annotation.ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//AuthenticationConfiguration就是负责SpringSecurity中的全局配置的</span></span><br><span class="line"><span class="meta">@Import(AuthenticationConfiguration.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableGlobalAuthentication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="SpringSecurity的过滤器链是个什么样子"><a href="#SpringSecurity的过滤器链是个什么样子" class="headerlink" title="SpringSecurity的过滤器链是个什么样子"></a>SpringSecurity的过滤器链是个什么样子</h1><p>在继续往下分析之前，我们有必要先来用语言加图画的形式，先将SpringSecurity整体过滤器链架构设计展现出来。</p><p>Spring MVC体系下的Filter，其实还是servlet下的Filter玩法,我们通过在web.xml中声明好相关的filter配置，或者在servlet 3.0时代后，通过@Filter注解标注对应的实现类；</p><p>但是，对于Spring来说，这些原生的Filter并不受其控制，如果我们的Filter在实现期间需要某些服务的支持，尤其是当前Spring MVC应用的WebApplicationContext中的某些服务的支持，我们不得不采用某种过度耦合的绑定机制或者查找方式来获取这些服务的支持。</p><p>为了能够让Filter的实现更加无拘无束，尽情享用依赖注入所带来的乐趣，Spring MVC引入DelegatingFilterProxy以改变Filter的现状。</p><p>顾名思义，DelegatingFilterProxy的作用是作为一个Filter的Proxy对象，当真正需要执行拦截操作的时候，它将把具体的工作委派给它所对应的一个Filter委派对象。</p><p>在物理结构上，DelegatingFilterProxy位于web.xml中承担Filter的原始使命，而它所委派的那个Filter对象，也就是做实际工作的那个家伙，却可以置身于WebApplicationContext中，充分享受Spring的IoC容器所提供的各项服务。</p><p><img src="/2023/08/28/security%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE-md/image-20230828204018853.png" alt="image-20230828204018853"></p><p>那么，上面所讲的这些和SpringSecurity有和关联呢？</p><p>我们知道，SpringSecurity的核心就是它的过滤器链，并且过滤器链中这些Filter实现，或多或少都需要ApplicationContext的支持，那么我们就需要利用上面所讲的DelegatingFilterProxy，将原生过滤器链中拦截到的请求，借助于DelegatingFilterProxy之手，转发给SpringSecurity自己的过滤器链中，当SpringSecurity自己的过滤器链执行完毕后，再回到原生过滤器链中继续执行。</p><p>DelegatingFilterProxy会将拦截到的请求，转发个内部从IOC中获取到的Filter实现，在我们导入了SpringSecurity依赖后，会通过AbstractSecurityWebApplicationInitializer类，借助于ServletContext，往对应的DispathcerServlet中添加一个名为springSecurityFilterChain的DelegatingFilterProxy实现类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public abstract <span class="keyword">class</span> <span class="title class_">AbstractSecurityWebApplicationInitializer</span></span><br><span class="line">implements <span class="title class_">WebApplicationInitializer</span> &#123;</span><br><span class="line">     ... </span><br><span class="line">public <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">DEFAULT_FILTER_NAME</span> = <span class="string">&quot;springSecurityFilterChain&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">insertSpringSecurityFilterChain</span>(<span class="params">ServletContext servletContext</span>) &#123;</span><br><span class="line"><span class="comment">//要插入到Dispatchservlet中的DelegatingFilterProxy对应的filterName</span></span><br><span class="line"><span class="title class_">String</span> filterName = <span class="variable constant_">DEFAULT_FILTER_NAME</span>;</span><br><span class="line"><span class="title class_">DelegatingFilterProxy</span> springSecurityFilterChain = <span class="keyword">new</span> <span class="title class_">DelegatingFilterProxy</span>(</span><br><span class="line">filterName);</span><br><span class="line"><span class="title class_">String</span> contextAttribute = <span class="title function_">getWebApplicationContextAttribute</span>();</span><br><span class="line"><span class="keyword">if</span> (contextAttribute != <span class="literal">null</span>) &#123;</span><br><span class="line">springSecurityFilterChain.<span class="title function_">setContextAttribute</span>(contextAttribute);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入过滤器</span></span><br><span class="line"><span class="title function_">registerFilter</span>(servletContext, <span class="literal">true</span>, filterName, springSecurityFilterChain);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">private <span class="keyword">void</span> <span class="title function_">registerFilter</span>(<span class="params">ServletContext servletContext,</span></span><br><span class="line"><span class="params">boolean insertBeforeOtherFilters, <span class="built_in">String</span> filterName, Filter filter</span>) &#123;</span><br><span class="line"><span class="title class_">Dynamic</span> registration = servletContext.<span class="title function_">addFilter</span>(filterName, filter);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道DelegatingFilterProxy会根据自身的FilterName,去IOC中寻找同名的Filter实现，作为将要被代理的Filter, 而往容器中注入名为springSecurityFilterChain的任务就由WebSecurityConfiguration完成了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//注入bean的名字为springSecurityFilterChain</span></span><br><span class="line">@<span class="title class_">Bean</span>(name = <span class="title class_">AbstractSecurityWebApplicationInitializer</span>.<span class="property">DEFAULT_FILTER_NAME</span>)</span><br><span class="line">public <span class="title class_">Filter</span> <span class="title function_">springSecurityFilterChain</span>() throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">boolean hasConfigurers = webSecurityConfigurers != <span class="literal">null</span></span><br><span class="line">&amp;&amp; !webSecurityConfigurers.<span class="title function_">isEmpty</span>();</span><br><span class="line"><span class="keyword">if</span> (!hasConfigurers) &#123;</span><br><span class="line"><span class="title class_">WebSecurityConfigurerAdapter</span> adapter = objectObjectPostProcessor</span><br><span class="line">.<span class="title function_">postProcess</span>(<span class="keyword">new</span> <span class="title class_">WebSecurityConfigurerAdapter</span>() &#123;</span><br><span class="line">&#125;);</span><br><span class="line">webSecurity.<span class="title function_">apply</span>(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> webSecurity.<span class="title function_">build</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这里由WebSecurityConfiguration注入到容器中的Filter实现，就是SpringSecurity所提供的过滤器链实现，由此，就将原生过滤器链与SpringSecurity提供的过滤器链串接在了一起，形成了下面这幅图的样子: </p><p><img src="/2023/08/28/security%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE-md/image-20230828204000635.png" alt="image-20230828204000635"></p><p>在这里插入图片描述</p><hr><h2 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h2><p>从上面我们可以知道，webSecurity.build()最终会构建出SpringSecurity相关的过滤器链集合注入到容器中，那么上面图中所画的FilterChainProxy又是怎么肥事呢？</p><p>webSecurity的performBuild方法中，最终完成了过滤器链中的构建:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Override</span></span><br><span class="line">protected <span class="title class_">Filter</span> <span class="title function_">performBuild</span>() throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">..</span><br><span class="line">int chainSize = ignoredRequests.<span class="title function_">size</span>() + securityFilterChainBuilders.<span class="title function_">size</span>();</span><br><span class="line"><span class="title class_">List</span>&lt;<span class="title class_">SecurityFilterChain</span>&gt; securityFilterChains = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">chainSize);</span><br><span class="line"><span class="comment">//我们可以继承WebSecurityConfigurerAdapter重写configure(WebSecurity web)方法</span></span><br><span class="line"><span class="comment">//然后通过web.ignoring()方法来设置哪些请求是无须被SpringSecurity提供的过滤器链集合拦截的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="title class_">RequestMatcher</span> ignoredRequest : ignoredRequests) &#123;</span><br><span class="line">    <span class="comment">//对于每一个被不被SpringSecurity过滤器链集合拦截的请求,都会包装为一个单独的过滤链加入</span></span><br><span class="line">    <span class="comment">//SpringSecurity过滤器链集合中</span></span><br><span class="line">    <span class="comment">//这里只添加了RequesuMathcer,而没有给当前过滤器链中添加任何过滤器，即filter.size==0</span></span><br><span class="line">securityFilterChains.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">DefaultSecurityFilterChain</span>(ignoredRequest));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个SecurityBuilder负责构建出一个过滤器链,然后构建出的过滤链会加入过滤器链集合中去</span></span><br><span class="line"><span class="comment">//一般只会存在一个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="title class_">SecurityBuilder</span>&lt;? <span class="keyword">extends</span> <span class="title class_">SecurityFilterChain</span>&gt; securityFilterChainBuilder : securityFilterChainBuilders) &#123;</span><br><span class="line">securityFilterChains.<span class="title function_">add</span>(securityFilterChainBuilder.<span class="title function_">build</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SpringSecurity提供的过滤器链代理对象</span></span><br><span class="line"><span class="title class_">FilterChainProxy</span> filterChainProxy = <span class="keyword">new</span> <span class="title class_">FilterChainProxy</span>(securityFilterChains);</span><br><span class="line">...</span><br><span class="line"><span class="title class_">Filter</span> result = filterChainProxy;</span><br><span class="line">..</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <strong>SecurityBuilder和SecurityConfigure对于新手来说会特别难理解，建议可以阅读深入浅出Spring Security第四章，本文篇幅有限，不展开讲述，就默认各位都已经掌握上述知识了。</strong> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">FilterChainProxy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">GenericFilterBean</span> &#123;</span><br><span class="line">private <span class="title class_">List</span>&lt;<span class="title class_">SecurityFilterChain</span>&gt; filterChains;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>FilterChainProxy最重要的一点在于其内部维护的filterChains集合，从这里可以看出SpringSecurity可以同时存在多条过滤器链集合，那么，DelegatingFilterProxy拦截到请求转发给FilterChainProxy后，FilterChainProxy又该如何决定把请求转发给内部的哪一条过滤器链进行处理呢？。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> <span class="title function_">doFilter</span>(<span class="title class_">ServletRequest</span> request, <span class="title class_">ServletResponse</span> response,</span><br><span class="line"><span class="title class_">FilterChain</span> chain) throws <span class="title class_">IOException</span>, <span class="title class_">ServletException</span> &#123;</span><br><span class="line">boolean clearContext = request.<span class="title function_">getAttribute</span>(<span class="variable constant_">FILTER_APPLIED</span>) == <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (clearContext) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.<span class="title function_">setAttribute</span>(<span class="variable constant_">FILTER_APPLIED</span>, <span class="title class_">Boolean</span>.<span class="property">TRUE</span>);</span><br><span class="line"><span class="title function_">doFilterInternal</span>(request, response, chain);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="title class_">SecurityContextHolder</span>.<span class="title function_">clearContext</span>();</span><br><span class="line">request.<span class="title function_">removeAttribute</span>(<span class="variable constant_">FILTER_APPLIED</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">doFilterInternal</span>(request, response, chain);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   private <span class="keyword">void</span> <span class="title function_">doFilterInternal</span>(<span class="title class_">ServletRequest</span> request, <span class="title class_">ServletResponse</span> response,</span><br><span class="line"><span class="title class_">FilterChain</span> chain) throws <span class="title class_">IOException</span>, <span class="title class_">ServletException</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title class_">FirewalledRequest</span> fwRequest = firewall</span><br><span class="line">.<span class="title function_">getFirewalledRequest</span>((<span class="title class_">HttpServletRequest</span>) request);</span><br><span class="line"><span class="title class_">HttpServletResponse</span> fwResponse = firewall</span><br><span class="line">.<span class="title function_">getFirewalledResponse</span>((<span class="title class_">HttpServletResponse</span>) response);</span><br><span class="line">       <span class="comment">//从过滤器链集合中挑选出一个适合当前请求的,然后将该过滤器链内部所有Filters拿到并返回</span></span><br><span class="line"><span class="title class_">List</span>&lt;<span class="title class_">Filter</span>&gt; filters = <span class="title function_">getFilters</span>(fwRequest);</span><br><span class="line">       <span class="comment">//如果当前请求关联的过滤器集合为空的话,那么说明当前请求无需被拦截</span></span><br><span class="line"><span class="keyword">if</span> (filters == <span class="literal">null</span> || filters.<span class="title function_">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.<span class="title function_">isDebugEnabled</span>()) &#123;</span><br><span class="line">logger.<span class="title function_">debug</span>(<span class="title class_">UrlUtils</span>.<span class="title function_">buildRequestUrl</span>(fwRequest)</span><br><span class="line">+ (filters == <span class="literal">null</span> ? <span class="string">&quot; has no matching filters&quot;</span></span><br><span class="line">: <span class="string">&quot; has an empty filter list&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fwRequest.<span class="title function_">reset</span>();</span><br><span class="line">           <span class="comment">//跳回到原生的过滤器链继续执行</span></span><br><span class="line">chain.<span class="title function_">doFilter</span>(fwRequest, fwResponse);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//构建一条虚拟过滤器链,来执行当前请求关联的过滤器集合，执行完后，还是跳回到原生的过滤器链继续执行</span></span><br><span class="line"><span class="title class_">VirtualFilterChain</span> vfc = <span class="keyword">new</span> <span class="title class_">VirtualFilterChain</span>(fwRequest, chain, filters);</span><br><span class="line">vfc.<span class="title function_">doFilter</span>(fwRequest, fwResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private <span class="title class_">List</span>&lt;<span class="title class_">Filter</span>&gt; <span class="title function_">getFilters</span>(<span class="params">HttpServletRequest request</span>) &#123;</span><br><span class="line">    <span class="comment">//遍历过滤器链集合，调用每个过滤器链中提供的ReuqestMathcer进行请求匹配，判断是否拦截当前请求</span></span><br><span class="line">    <span class="comment">//第一个匹配上，就直接返回</span></span><br><span class="line"><span class="keyword">for</span> (<span class="title class_">SecurityFilterChain</span> chain : filterChains) &#123;</span><br><span class="line"><span class="keyword">if</span> (chain.<span class="title function_">matches</span>(request)) &#123;</span><br><span class="line"><span class="keyword">return</span> chain.<span class="title function_">getFilters</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>联系上文，对于通过web.ignore配置的忽略请求而言，每个请求都会包装为一个DefaultSecurityFilterChain率先加入FilterChainProxy的过滤链集合中去，但是对应的DefaultSecurityFilterChain中却没有任何一个Filter,这样在被忽略的请求被FilterChainProxy拦截时，发现得到的filters.size&#x3D;&#x3D;0,就知道当前请求需要被放行了。</p><hr><h2 id="VirtualFilterChain"><a href="#VirtualFilterChain" class="headerlink" title="VirtualFilterChain"></a>VirtualFilterChain</h2><p>VirtualFilterChain负责将需要应用到当前请求上的filters集合再包装为一个VirtualFilterChain，然后挨个执行每个Filter:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">VirtualFilterChain</span> implements <span class="title class_">FilterChain</span> &#123;</span><br><span class="line">private final <span class="title class_">FilterChain</span> originalChain;</span><br><span class="line">private final <span class="title class_">List</span>&lt;<span class="title class_">Filter</span>&gt; additionalFilters;</span><br><span class="line">private final <span class="title class_">FirewalledRequest</span> firewalledRequest;</span><br><span class="line">private final int size;</span><br><span class="line">private int currentPosition = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">private <span class="title class_">VirtualFilterChain</span>(<span class="title class_">FirewalledRequest</span> firewalledRequest,</span><br><span class="line"><span class="title class_">FilterChain</span> chain, <span class="title class_">List</span>&lt;<span class="title class_">Filter</span>&gt; additionalFilters) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">originalChain</span> = chain;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">additionalFilters</span> = additionalFilters;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">size</span> = additionalFilters.<span class="title function_">size</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firewalledRequest</span> = firewalledRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Override</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">doFilter</span>(<span class="title class_">ServletRequest</span> request, <span class="title class_">ServletResponse</span> response)</span><br><span class="line">throws <span class="title class_">IOException</span>, <span class="title class_">ServletException</span> &#123;</span><br><span class="line"><span class="comment">//该跳回到原生的过滤器链中了</span></span><br><span class="line"><span class="keyword">if</span> (currentPosition == size) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.<span class="title function_">isDebugEnabled</span>()) &#123;</span><br><span class="line">logger.<span class="title function_">debug</span>(<span class="title class_">UrlUtils</span>.<span class="title function_">buildRequestUrl</span>(firewalledRequest)</span><br><span class="line">+ <span class="string">&quot; reached end of additional filter chain; proceeding with original chain&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deactivate path stripping as we exit the security filter chain</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firewalledRequest</span>.<span class="title function_">reset</span>();</span><br><span class="line"></span><br><span class="line">originalChain.<span class="title function_">doFilter</span>(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">currentPosition++;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Filter</span> nextFilter = additionalFilters.<span class="title function_">get</span>(currentPosition - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.<span class="title function_">isDebugEnabled</span>()) &#123;</span><br><span class="line">logger.<span class="title function_">debug</span>(<span class="title class_">UrlUtils</span>.<span class="title function_">buildRequestUrl</span>(firewalledRequest)</span><br><span class="line">+ <span class="string">&quot; at position &quot;</span> + currentPosition + <span class="string">&quot; of &quot;</span> + size</span><br><span class="line">+ <span class="string">&quot; in additional filter chain; firing Filter: &#x27;&quot;</span></span><br><span class="line">+ nextFilter.<span class="title function_">getClass</span>().<span class="title function_">getSimpleName</span>() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nextFilter.<span class="title function_">doFilter</span>(request, response, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafa入门.md</title>
      <link href="/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/"/>
      <url>/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/</url>
      
        <content type="html"><![CDATA[<h1 id="消息队列的流派"><a href="#消息队列的流派" class="headerlink" title="消息队列的流派"></a>消息队列的流派</h1><h3 id="什么是-MQ"><a href="#什么是-MQ" class="headerlink" title="什么是 MQ"></a>什么是 MQ</h3><blockquote><p>Message Queue（MQ），消息队列中间件。很多人都说：MQ 通过将消息的发送和接收分离来实现应用程序的异步和解偶，这个给人的直觉是——MQ 是异步的，用来解耦的，但是这个只是 MQ 的效果而不是目的。MQ 真正的目的是为了通讯，屏蔽底层复杂的通讯协议，定义了一套应用层的、更加简单的通讯协议。一个分布式系统中两个模块之间通讯要么是HTTP，要么是自己开发的（rpc） TCP，但是这两种协议其实都是原始的协议。HTTP 协议很难实现两端通讯——模块 A 可以调用 B，B 也可以主动调用 A，如果要做到这个两端都要背上WebServer，而且还不支持⻓连接（HTTP 2.0 的库根本找不到）。TCP 就更加原始了，粘包、心跳、私有的协议，想一想头皮就发麻。MQ 所要做的就是在这些协议之上构建一个简单的“协议”——生产者&#x2F;消费者模型。MQ 带给我的“协议”不是具体的通讯协议，而是更高层次通讯模型。它定义了两个对象——发送数据的叫生产者；接收数据的叫消费者， 提供一个SDK 让我们可以定义自己的生产者和消费者实现消息通讯而无视底层通讯协议</p></blockquote><h3 id="有-Broker-的-MQ"><a href="#有-Broker-的-MQ" class="headerlink" title="有 Broker 的 MQ"></a>有 Broker 的 MQ</h3><blockquote><p>这个流派通常有一台服务器作为 Broker，所有的消息都通过它中转。生产者把消息发送给它就结束自己的任务了，Broker 则把消息主动推送给消费者（或者消费者主动轮询）</p></blockquote><h3 id="重-Topic"><a href="#重-Topic" class="headerlink" title="重 Topic"></a>重 Topic</h3><blockquote><p>kafka、JMS（ActiveMQ）就属于这个流派，生产者会发送 key 和数据到 Broker，由 Broker比较 key 之后决定给哪个消费者。这种模式是我们最常⻅的模式，是我们对 MQ 最多的印象。在这种模式下一个 topic 往往是一个比较大的概念，甚至一个系统中就可能只有一个topic，topic 某种意义上就是 queue，生产者发送 key 相当于说：“hi，把数据放到 key 的队列中”</p></blockquote><blockquote><p>如上图所示，Broker 定义了三个队列，key1，key2，key3，生产者发送数据的时候会发送key1 和 data，Broker 在推送数据的时候则推送 data（也可能把 key 带上）。</p></blockquote><blockquote><p>虽然架构一样但是 kafka 的性能要比 jms 的性能不知道高到多少倍，所以基本这种类型的MQ 只有 kafka 一种备选方案。如果你需要一条暴力的数据流（在乎性能而非灵活性）那么kafka 是最好的选择</p></blockquote><h3 id="轻-Topic"><a href="#轻-Topic" class="headerlink" title="轻 Topic"></a>轻 Topic</h3><blockquote><p>这种的代表是 RabbitMQ（或者说是 AMQP）。生产者发送 key 和数据，消费者定义订阅的队列，Broker 收到数据之后会通过一定的逻辑计算出 key 对应的队列，然后把数据交给队列</p></blockquote><blockquote><p>这种模式下解耦了 key 和 queue，在这种架构中 queue 是非常轻量级的（在 RabbitMQ 中它的上限取决于你的内存），消费者关心的只是自己的 queue；生产者不必关心数据最终给谁只要指定 key 就行了，中间的那层映射在 AMQP 中叫 exchange（交换机）。</p></blockquote><p>AMQP 中有四种 exchange</p><ul><li>Direct exchange：key 就等于 queue</li><li>Fanout exchange：无视 key，给所有的 queue 都来一份</li><li>Topic exchange：key 可以用“宽字符”模糊匹配 queue</li><li>Headers exchange：无视 key，通过查看消息的头部元数据来决定发给那个</li><li>queue（AMQP 头部元数据非常丰富而且可以自定义）</li></ul><p>这种结构的架构给通讯带来了很大的灵活性，我们能想到的通讯方式都可以用这四种exchange 表达出来。如果你需要一个企业数据总线（在乎灵活性）那么 RabbitMQ 绝对的值得一用</p><h3 id="无-Broker-的-MQ"><a href="#无-Broker-的-MQ" class="headerlink" title="无 Broker 的 MQ"></a>无 Broker 的 MQ</h3><blockquote><p>无 Broker 的 MQ 的代表是 ZeroMQ。该作者非常睿智，他非常敏锐的意识到——MQ 是更高级的 Socket，它是解决通讯问题的。所以 ZeroMQ 被设计成了一个“库”而不是一个中间件，这种实现也可以达到——没有 Broker 的目的</p></blockquote><blockquote><p>节点之间通讯的消息都是发送到彼此的队列中，每个节点都既是生产者又是消费者。ZeroMQ做的事情就是封装出一套类似于 Socket 的 API 可以完成发送数据，读取数据</p></blockquote><blockquote><p>ZeroMQ 其实就是一个跨语言的、重量级的 Actor 模型邮箱库。你可以把自己的程序想象成一个 Actor，ZeroMQ 就是提供邮箱功能的库；ZeroMQ 可以实现同一台机器的 RPC 通讯也可以实现不同机器的 TCP、UDP 通讯，如果你需要一个强大的、灵活、野蛮的通讯能力，别犹豫 ZeroMQ</p></blockquote><h1 id="一、Kafka介绍"><a href="#一、Kafka介绍" class="headerlink" title="一、Kafka介绍"></a>一、Kafka介绍</h1><blockquote><p>Kafka是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的 （replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理 大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、 Storm&#x2F;Spark流式处理引擎，web&#x2F;nginx日志、访问日志，消息服务等等，用scala语言编 写，Linkedin于 2010 年贡献给了Apache基金会并成为顶级开源 项目。</p></blockquote><h2 id="1-Kafka的使用场景"><a href="#1-Kafka的使用场景" class="headerlink" title="1.Kafka的使用场景"></a>1.Kafka的使用场景</h2><blockquote><p>日志收集：一个公司可以用Kafka收集各种服务的log，通过kafka以统一接口服务的方式 开放给各种consumer，例如hadoop、Hbase、Solr等。 消息系统：解耦和生产者和消费者、缓存消息等。 用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网⻚、 搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过 订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖 掘。 运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产 各种操作的集中反馈，比如报警和报告。</p></blockquote><h2 id="2-Kafka基本概念"><a href="#2-Kafka基本概念" class="headerlink" title="2.Kafka基本概念"></a>2.Kafka基本概念</h2><blockquote><p>kafka是一个分布式的，分区的消息(官方称之为commit log)服务。它提供一个消息系统应该 具备的功能，但是确有着独特的设计。可以这样来说，Kafka借鉴了JMS规范的思想，但是确 并 <code>没有完全遵循JMS规范。</code></p></blockquote><p>首先，让我们来看一下基础的消息(Message)相关术语：</p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Broker</td><td>消息中间件处理节点，⼀个Kafka节点就是⼀个broker，⼀个或者多个Broker可以组成⼀个Kafka集群</td></tr><tr><td>Topic</td><td>Kafka根据topic对消息进⾏归类，发布到Kafka集群的每条消息都需要指定⼀个topic</td></tr><tr><td>Producer</td><td>消息⽣产者，向Broker发送消息的客户端</td></tr><tr><td>Consumer</td><td>消息消费者，从Broker读取消息的客户端</td></tr><tr><td>ConsumerGroup</td><td>每个Consumer属于⼀个特定的Consumer Group，⼀条消息可以被多个不同的Consumer Group消费，但是⼀个Consumer Group中只能有⼀个Consumer能够消费该消息</td></tr><tr><td>Partition</td><td>物理上的概念，⼀个topic可以分为多个partition，每个partition内部消息是有序的</td></tr></tbody></table><p>因此，从一个较高的层面上来看，producer通过网络发送消息到Kafka集群，然后consumer 来进行消费，如下图： <img src="/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/QQ%E6%88%AA%E5%9B%BE20220110112502.png" alt="输入图片说明"></p><p>服务端(brokers)和客户端(producer、consumer)之间通信通过 <strong>TCP协议</strong> 来完成。</p><h1 id="二、kafka基本使用"><a href="#二、kafka基本使用" class="headerlink" title="二、kafka基本使用"></a>二、kafka基本使用</h1><h2 id="1-安装前的环境准备"><a href="#1-安装前的环境准备" class="headerlink" title="1.安装前的环境准备"></a>1.安装前的环境准备</h2><ul><li><p>安装jdk</p></li><li><p>安装zk</p></li><li><p>官网下载kafka的压缩包:<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p></li><li><p>解压缩至如下路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;kafka2.11-2.4&#x2F;config&#x2F;server.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">broker.id属性在kafka集群中必须要是唯一</span></span><br><span class="line">broker.id= 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kafka部署的机器ip和提供服务的端口号</span></span><br><span class="line">listeners=PLAINTEXT://192.168.65.60:9092</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kafka的消息存储文件</span></span><br><span class="line">log.dir=/usr/local/data/kafka-logs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kafka连接zookeeper的地址</span></span><br><span class="line">zookeeper.connect= 192.168.65.60:2181</span><br></pre></td></tr></table></figure><h2 id="2-启动kafka服务器"><a href="#2-启动kafka服务器" class="headerlink" title="2.启动kafka服务器"></a>2.启动kafka服务器</h2></li></ul><p>进入到bin目录下。使用命令来启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-server-start.sh -daemon../config/server.properties</span><br></pre></td></tr></table></figure><blockquote><p> 启动zk：bin&#x2F;zookeeper-server-start.sh -daemon config&#x2F;zookeeper.properties  </p><p> 停止zk：bin&#x2F;zookeeper-server-stop.sh -daemon config&#x2F;zookeeper.properties</p><p> 启动kafka：bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties</p><p> 停止kafka：bin&#x2F;kafka-server-stop.sh -daemon config&#x2F;server.properties</p><p> bin&#x2F;kafka-topics.sh –list –zookeeper localhost:2181</p></blockquote><p>验证是否启动成功：</p><p>进入到zk中的节点看id是 0 的broker有没有存在（上线）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /brokers/ids/</span><br></pre></td></tr></table></figure><p><strong>server.properties核心配置详解：</strong></p><table><thead><tr><th>Property</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>broker.id</td><td>0</td><td>每个broker都可以⽤⼀个唯⼀的⾮负整数id进⾏标识；这个id可以作为broker的“名字”，你可以选择任意你喜欢的数字作为id，只要id是唯⼀的即可。</td></tr><tr><td>log.dirs</td><td>&#x2F;tmp&#x2F;kafka-logs</td><td>kafka存放数据的路径。这个路径并不是唯⼀的，可以是多个，路径之间只需要使⽤逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进⾏。</td></tr><tr><td>listeners</td><td>PLAINTEXT:&#x2F;&#x2F;192.168.65.60:9092</td><td>server接受客户端连接的端⼝，ip配置kafka本机ip即可</td></tr><tr><td>zookeeper.connect</td><td>localhost:2181</td><td>zooKeeper连接字符串的格式为：hostname:port，此处hostname和port分别是ZooKeeper集群中某个节点的host和port；zookeeper如果是集群，连接⽅式为hostname1:port1, hostname2:port2,hostname3:port3</td></tr><tr><td>log.retention.hours</td><td>168</td><td>每个⽇志⽂件删除之前保存的时间。默认数据保存时间对所有topic都⼀样。</td></tr><tr><td>num.partitions</td><td>1</td><td>创建topic的默认分区数</td></tr><tr><td>default.replication.factor</td><td>1</td><td>⾃动创建topic的默认副本数量，建议设置为⼤于等于2</td></tr><tr><td>min.insync.replicas</td><td>1</td><td>当producer设置acks为-1时，min.insync.replicas指定replicas的最⼩数⽬（必须确认每⼀个repica的写数据都是成功的），如果这个数⽬没有达到，producer发送消息会产⽣异常</td></tr><tr><td>delete.topic.enable</td><td>false</td><td>是否允许删除主题</td></tr></tbody></table><h2 id="3-创建主题topic"><a href="#3-创建主题topic" class="headerlink" title="3.创建主题topic"></a>3.创建主题topic</h2><blockquote><p>topic是什么概念？topic可以实现消息的分类，不同消费者订阅不同的topic。</p></blockquote><p><img src="/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/QQ%E6%88%AA%E5%9B%BE20220110122844.png" alt="输入图片说明"></p><p>执行以下命令创建名为“test”的topic，这个topic只有一个partition，并且备份因子也设置为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper 172.16.253.35:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p>查看当前kafka内有哪些topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --list --zookeeper 172.16.253.35:2181</span><br></pre></td></tr></table></figure><h2 id="4-发送消息"><a href="#4-发送消息" class="headerlink" title="4.发送消息"></a>4.发送消息</h2><blockquote><p>kafka自带了一个producer命令客户端，可以从本地文件中读取内容，或者我们也可以以命令行中直接输入内容，并将这些内容以消息的形式发送到kafka集群中。在默认情况下，每一个行会被当做成一个独立的消息。使用kafka的发送消息的客户端，指定发送到的kafka服务器地址和topic</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list 172.16.253.38:9092 --topic test</span><br></pre></td></tr></table></figure><h2 id="5-消费消息"><a href="#5-消费消息" class="headerlink" title="5.消费消息"></a>5.消费消息</h2><p>对于consumer，kafka同样也携带了一个命令行客户端，会将获取到内容在命令中进行输 出， <strong>默认是消费最新的消息</strong> 。使用kafka的消费者消息的客户端，从指定kafka服务器的指定 topic中消费消息</p><p>方式一：从最后一条消息的偏移量+1开始消费</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092 --topic test</span><br></pre></td></tr></table></figure><p>方式二：从头开始消费</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092 --from-beginning --topic test</span><br></pre></td></tr></table></figure><h3 id="几个注意点："><a href="#几个注意点：" class="headerlink" title="几个注意点："></a>几个注意点：</h3><ul><li>消息会被存储</li><li>消息是顺序存储</li><li>消息是有偏移量的</li><li>消费时可以指明偏移量进行消费</li></ul><h1 id="三、Kafka中的关键细节"><a href="#三、Kafka中的关键细节" class="headerlink" title="三、Kafka中的关键细节"></a>三、Kafka中的关键细节</h1><h2 id="1-消息的顺序存储"><a href="#1-消息的顺序存储" class="headerlink" title="1.消息的顺序存储"></a>1.消息的顺序存储</h2><blockquote><p>消息的发送方会把消息发送到broker中，broker会存储消息，消息是按照发送的顺序进行存储。因此消费者在消费消息时可以指明主题中消息的偏移量。默认情况下，是从最后一个消息的下一个偏移量开始消费。</p></blockquote><h2 id="2-单播消息的实现"><a href="#2-单播消息的实现" class="headerlink" title="2. 单播消息的实现"></a>2. 单播消息的实现</h2><blockquote><p>单播消息：一个消费组里 只会有一个消费者能消费到某一个topic中的消息。于是可以创建多个消费者，这些消费者在同一个消费组中。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup --topic test</span><br></pre></td></tr></table></figure><h2 id="3-多播消息的实现"><a href="#3-多播消息的实现" class="headerlink" title="3.多播消息的实现"></a>3.多播消息的实现</h2><h3 id="在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。"><a href="#在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。" class="headerlink" title="在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。"></a>在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。</h3><p>kafka实现多播，只需要让不同的消费者处于不同的消费组即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup1 --topic test</span><br><span class="line"></span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup2 --topic test</span><br></pre></td></tr></table></figure><h2 id="4-查看消费组及信息"><a href="#4-查看消费组及信息" class="headerlink" title="4.查看消费组及信息"></a>4.查看消费组及信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前主题下有哪些消费组</span></span><br><span class="line">./kafka-consumer-groups.sh --bootstrap-server 10.31.167.10:9092 --list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看消费组中的具体信息：比如当前偏移量、最后一条消息的偏移量、堆积的消息数量</span></span><br><span class="line">./kafka-consumer-groups.sh --bootstrap-server 172.16.253.38:9092 --describe --group testGroup</span><br></pre></td></tr></table></figure><p><img src="/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/QQ%E6%88%AA%E5%9B%BE20220110125233.png" alt="输入图片说明"></p><ul><li>Currennt-offset: 当前消费组的已消费偏移量</li><li>Log-end-offset: 主题对应分区消息的结束偏移量(HW)</li><li>Lag: 当前消费组未消费的消息数</li></ul><h1 id="四、主题、分区的概念"><a href="#四、主题、分区的概念" class="headerlink" title="四、主题、分区的概念"></a>四、主题、分区的概念</h1><h2 id="1-主题Topic"><a href="#1-主题Topic" class="headerlink" title="1.主题Topic"></a>1.主题Topic</h2><p>?主题Topic可以理解成是一个类别的名称。</p><h2 id="2-partition分区"><a href="#2-partition分区" class="headerlink" title="2.partition分区"></a>2.partition分区</h2><p><img src="/2023/08/28/kafa%E5%85%A5%E9%97%A8-md/QQ%E6%88%AA%E5%9B%BE20220110125413.png" alt="输入图片说明"></p><blockquote><p>一个主题中的消息量是非常大的，因此可以通过分区的设置，来分布式存储这些消息。比如一个topic创建了 3 个分区。那么topic中的消息就会分别存放在这三个分区中。</p></blockquote><h3 id="为一个主题创建多个分区"><a href="#为一个主题创建多个分区" class="headerlink" title="为一个主题创建多个分区"></a>为一个主题创建多个分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 2 --topic test1</span><br></pre></td></tr></table></figure><p><strong>可以通过这样的命令查看topic的分区信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test1</span><br></pre></td></tr></table></figure><h3 id="分区的作用："><a href="#分区的作用：" class="headerlink" title="分区的作用："></a>分区的作用：</h3><ul><li>可以分布式存储</li><li>可以并行写</li></ul><p>实际上是存在data&#x2F;kafka-logs&#x2F;test-0 和 test-1中的0000000.log文件中</p><p>小细节：</p><blockquote><p>定期将自己消费分区的offset提交给kafka内部topic：__consumer_offsets，提交过去的 时候，key是consumerGroupId+topic+分区号，value就是当前offset的值，kafka会定 期清理topic里的消息，最后就保留最新的那条数据 因为__consumer_offsets可能会接收高并发的请求，kafka默认给其分配 50 个分区(可以 通过offsets.topic.num.partitions设置)，这样可以通过加机器的方式抗大并发。 通过如下公式可以选出consumer消费的offset要提交到__consumer_offsets的哪个分区 公式：hash(consumerGroupId) % __consumer_offsets主题的分区数</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springSecurity学习</title>
      <link href="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity从入门到精通"><a href="#SpringSecurity从入门到精通" class="headerlink" title="SpringSecurity从入门到精通"></a>SpringSecurity从入门到精通</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>​<strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</p><p>​一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</p><p>​ 一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p><p>​<strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p>​<strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><p>​而认证和授权也是SpringSecurity作为安全框架的核心功能。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>​我们先要搭建一个简单的SpringBoot工程</p><p>① 设置父工程 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>② 创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SecurityApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>③ 创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-引入SpringSecurity"><a href="#1-2-引入SpringSecurity" class="headerlink" title="1.2 引入SpringSecurity"></a>1.2 引入SpringSecurity</h3><p>​在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。</p><p>​必须登陆之后才能对接口进行访问。</p><h2 id="2-认证"><a href="#2-认证" class="headerlink" title="2. 认证"></a>2. 认证</h2><h3 id="2-1-登陆校验流程"><a href="#2-1-登陆校验流程" class="headerlink" title="2.1 登陆校验流程"></a>2.1 登陆校验流程</h3><p><img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211215094003288.png" alt="image-20211215094003288"></p><h3 id="2-2-原理初探"><a href="#2-2-原理初探" class="headerlink" title="2.2 原理初探"></a>2.2 原理初探</h3><p>​想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。</p><h4 id="2-2-1-SpringSecurity完整流程"><a href="#2-2-1-SpringSecurity完整流程" class="headerlink" title="2.2.1 SpringSecurity完整流程"></a>2.2.1 SpringSecurity完整流程</h4><p>​SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><p><img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211214144425527.png"></p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的过滤器。</p><p>​</p><p>​我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211214145824903.png" alt="image-20211214145824903"></p><h4 id="2-2-2-认证流程详解"><a href="#2-2-2-认证流程详解" class="headerlink" title="2.2.2 认证流程详解"></a>2.2.2 认证流程详解</h4><p><img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211214151515385.png" alt="image-20211214151515385"></p><p>概念速查:</p><p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager接口：定义了认证Authentication的方法 </p><p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p><h3 id="2-3-解决问题"><a href="#2-3-解决问题" class="headerlink" title="2.3 解决问题"></a>2.3 解决问题</h3><h4 id="2-3-1-思路分析"><a href="#2-3-1-思路分析" class="headerlink" title="2.3.1 思路分析"></a>2.3.1 思路分析</h4><p>登录</p><p>​①自定义登录接口  </p><p>​调用ProviderManager的方法进行认证 如果认证通过生成jwt</p><p>​把用户信息存入redis中</p><p>​②自定义UserDetailsService </p><p>​在这个实现类中去查询数据库</p><p>校验：</p><p>​①定义Jwt认证过滤器</p><p>​获取token</p><p>​解析token获取其中的userid</p><p>​从redis中获取用户信息</p><p>​存入SecurityContextHolder</p><h4 id="2-3-2-准备工作"><a href="#2-3-2-准备工作" class="headerlink" title="2.3.2 准备工作"></a>2.3.2 准备工作</h4><p>①添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>② 添加Redis相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 响应类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000  一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sangeng&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span>(ttlMillis==<span class="literal">null</span>)&#123;</span><br><span class="line">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)              <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject)   <span class="comment">// 主题  可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)     <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)      <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, id);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;</span>;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseJWT(token);</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">40356785423868312L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 昵称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 账号状态（0正常 1停用）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮箱</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 手机号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户性别（0男，1女，2未知）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 头像</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户类型（0管理员，1普通用户）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String userType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建人的用户id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-实现"><a href="#2-3-3-实现" class="headerlink" title="2.3.3 实现"></a>2.3.3 实现</h4><h5 id="2-3-3-1-数据库校验用户"><a href="#2-3-3-1-数据库校验用户" class="headerlink" title="2.3.3.1 数据库校验用户"></a>2.3.3.1 数据库校验用户</h5><p>​从之前的分析我们可以知道，我们可以自定义一个UserDetailsService,让SpringSecurity使用我们的UserDetailsService。我们自己的UserDetailsService可以从数据库中查询用户名和密码。</p><h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><p>​我们先创建一个用户表， 建表语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;</span><br></pre></td></tr></table></figure><p>​引入MybatisPuls和mysql驱动的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​配置数据库信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>​定义Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​修改User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名上加<span class="meta">@TableName(value = &quot;sys_user&quot;)</span> ,id字段上加 <span class="meta">@TableId</span></span><br></pre></td></tr></table></figure><p>​配置Mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.sangeng.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleSecurityApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SimpleSecurityApplication.class);</span><br><span class="line">        System.out.println(run);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​添加junit依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>​   测试MP是否能正常使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserMapper</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h6><p>创建一个类实现UserDetailsService接口，重写其中的方法。更加用户名从数据库中查询用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//封装成UserDetails对象返回 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为UserDetailsService方法的返回值是UserDetails类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如</p><p><img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211216123945882.png" alt="image-20211216123945882"></p><p>这样登陆的时候就可以用sg作为用户名，1234作为密码来登陆了。</p><h5 id="2-3-3-2-密码加密存储"><a href="#2-3-3-2-密码加密存储" class="headerlink" title="2.3.3.2 密码加密存储"></a>2.3.3.2 密码加密存储</h5><p>​实际项目中我们不会把密码明文存储在数据库中。</p><p>​默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。</p><p>​我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。</p><p>​我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</p><p>​我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-3-登陆接口"><a href="#2-3-3-3-登陆接口" class="headerlink" title="2.3.3.3 登陆接口"></a>2.3.3.3 登陆接口</h5><p>​接下我们需要自定义登陆接口，然后让SpringSecurity对这个接口放行,让用户访问这个接口的时候不用登录也能访问。</p><p>​在接口中我们通过AuthenticationManager的authenticate方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p><p>​认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis，可以把用户id作为key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginServcie loginServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginServcie.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginServcie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用userid生成token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">//把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;登陆成功&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3-3-4-认证过滤器"><a href="#2-3-3-4-认证过滤器" class="headerlink" title="2.3.3.4 认证过滤器"></a>2.3.3.4 认证过滤器</h5><p>​我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid。</p><p>​使用userid去redis中获取对应的LoginUser对象。</p><p>​然后封装Authentication对象存入SecurityContextHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span> + userid;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(redisKey);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3-3-5-退出登陆"><a href="#2-3-3-5-退出登陆" class="headerlink" title="2.3.3.5 退出登陆"></a>2.3.3.5 退出登陆</h5><p>​我们只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginServcie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用userid生成token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">//把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;登陆成功&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userid</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;login:&quot;</span>+userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h2><h3 id="3-0-权限系统的作用"><a href="#3-0-权限系统的作用" class="headerlink" title="3.0 权限系统的作用"></a>3.0 权限系统的作用</h3><p>​例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p>​总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p><p>​我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>​所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><p>​</p><h3 id="3-1-授权基本流程"><a href="#3-1-授权基本流程" class="headerlink" title="3.1 授权基本流程"></a>3.1 授权基本流程</h3><p>​在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>​所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。</p><p>​然后设置我们的资源所需要的权限即可。</p><h3 id="3-2-授权实现"><a href="#3-2-授权实现" class="headerlink" title="3.2 授权实现"></a>3.2 授权实现</h3><h4 id="3-2-1-限制访问资源所需权限"><a href="#3-2-1-限制访问资源所需权限" class="headerlink" title="3.2.1 限制访问资源所需权限"></a>3.2.1 限制访问资源所需权限</h4><p>​SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p>​但是要使用它我们需要先开启相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>​然后就可以使用对应的注解。@PreAuthorize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-封装权限信息"><a href="#3-2-2-封装权限信息" class="headerlink" title="3.2.2 封装权限信息"></a>3.2.2 封装权限信息</h4><p>​我们前面在写UserDetailsServiceImpl的时候说过，在查询出用户后还要获取对应的权限信息，封装到UserDetails中返回。</p><p>​我们先直接把权限信息写死封装到UserDetails中进行测试。</p><p>​我们之前定义了UserDetails的实现类LoginUser，想要让其能封装权限信息就要对其进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//存储权限信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user,List&lt;String&gt; permissions)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">if</span>(authorities!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> authorities;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span></span><br><span class="line">        authorities = permissions.stream().</span><br><span class="line">                map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​LoginUser修改完后我们就可以在UserDetailsServiceImpl中去把权限信息封装到LoginUser中了。我们写死权限进行测试，后面我们再从数据库中查询权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-3-从数据库查询权限信息"><a href="#3-2-3-从数据库查询权限信息" class="headerlink" title="3.2.3 从数据库查询权限信息"></a>3.2.3 从数据库查询权限信息</h4><h5 id="3-2-3-1-RBAC权限模型"><a href="#3-2-3-1-RBAC权限模型" class="headerlink" title="3.2.3.1 RBAC权限模型"></a>3.2.3.1 RBAC权限模型</h5><p>​RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p>​<img src="/2023/07/29/springSecurity%E5%AD%A6%E4%B9%A0/image-20211222110249727.png" alt="image-20211222110249727"></p><h5 id="3-2-3-2-准备工作"><a href="#3-2-3-2-准备工作" class="headerlink" title="3.2.3.2 准备工作"></a>3.2.3.2 准备工作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="comment">/*!32312 IF NOT EXISTS*/</span>`sg_security` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line"></span><br><span class="line">USE `sg_security`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_menu` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_menu`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_menu` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `menu_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;NULL&#x27;</span> COMMENT <span class="string">&#x27;菜单名&#x27;</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;路由地址&#x27;</span>,</span><br><span class="line">  `component` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;组件路径&#x27;</span>,</span><br><span class="line">  `visible` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;菜单状态（0显示 1隐藏）&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;菜单状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  `perms` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限标识&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;#&#x27;</span> COMMENT <span class="string">&#x27;菜单图标&#x27;</span>,</span><br><span class="line">  `create_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `del_flag` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否删除（0未删除 1已删除）&#x27;</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_role` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_key` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色权限字符串&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;角色状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;del_flag&#x27;</span>,</span><br><span class="line">  `create_by` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_by` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_role_menu` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_menu`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_menu` (</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;菜单id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`role_id`,`menu_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;NULL&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;NULL&#x27;</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;NULL&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;账号状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `phonenumber` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户性别（0男，1女，2未知）&#x27;</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">  `user_type` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;用户类型（0管理员，1普通用户）&#x27;</span>,</span><br><span class="line">  `create_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人的用户id&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标志（0代表未删除，1代表已删除）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_user_role` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user_role`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user_role` (</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`,`role_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">DISTINCT m.`perms`</span><br><span class="line">FROM</span><br><span class="line">sys_user_role ur</span><br><span class="line">LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">WHERE</span><br><span class="line">user_id = 2</span><br><span class="line">AND r.`status` = 0</span><br><span class="line">AND m.`status` = 0</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(value=&quot;sys_menu&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">54979041104113736L</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 菜单名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 路由地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 组件路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 菜单状态（0显示 1隐藏）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String visible;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 菜单状态（0正常 1停用）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 权限标识</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 菜单图标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 是否删除（0未删除 1已删除）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 备注</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-3-3-代码实现"><a href="#3-2-3-3-代码实现" class="headerlink" title="3.2.3.3 代码实现"></a>3.2.3.3 代码实现</h5><p>​我们只需要根据用户id去查询到其所对应的权限信息即可。</p><p>​所以我们可以先定义个mapper，其中提供一个方法可以根据userid查询权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.Menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​尤其是自定义方法，所以需要创建对应的mapper文件，定义对应的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sangeng.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.`perms`</span><br><span class="line">        FROM</span><br><span class="line">            sys_user_role ur</span><br><span class="line">            LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            user_id = #&#123;userid&#125;</span><br><span class="line">            AND r.`status` = 0</span><br><span class="line">            AND m.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​在application.yml中配置mapperXML文件的位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​然后我们可以在UserDetailsServiceImpl中去调用该mapper的方法查询权限信息封装到LoginUser对象中即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; permissionKeyList =  menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line"><span class="comment">//        //测试写法</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(&quot;test&quot;));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,permissionKeyList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-自定义失败处理"><a href="#4-自定义失败处理" class="headerlink" title="4. 自定义失败处理"></a>4. 自定义失败处理</h2><p>​我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</p><p>​在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><p>​如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p><p>​如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p><p>​所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可。</p><p>①自定义实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.FORBIDDEN.value(), <span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(), <span class="string">&quot;认证失败请重新登录&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②配置给SpringSecurity</p><p>​</p><p>​先注入对应的处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure><p>​然后我们可以使用HttpSecurity对象的方法去配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).</span><br><span class="line">        accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure><h2 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5. 跨域"></a>5. 跨域</h2><p>​浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 </p><p>​前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p><p>​所以我们就要处理一下，让前端能进行跨域请求。</p><p>①先对SpringBoot配置，运行跨域请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②开启SpringSecurity的跨域访问</p><p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">            <span class="comment">//关闭csrf</span></span><br><span class="line">            .csrf().disable()</span><br><span class="line">            <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">            <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤器</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">            <span class="comment">//配置认证失败处理器</span></span><br><span class="line">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-遗留小问题"><a href="#6-遗留小问题" class="headerlink" title="6. 遗留小问题"></a>6. 遗留小问题</h2><h3 id="其它权限校验方法"><a href="#其它权限校验方法" class="headerlink" title="其它权限校验方法"></a>其它权限校验方法</h3><p>​我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。</p><p>​    </p><p>​这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p><p>​hasAuthority方法实际是执行到了SecurityExpressionRoot的hasAuthority，大家只要断点调试既可知道它内部的校验原理。</p><p>​它内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p><p>​hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​hasRole要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h3><p>​我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGExpressionRoot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">//判断用户权限集合中是否存在authority</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 在SPEL表达式中使用 @ex相当于获取容器中bean的名字未ex的对象。然后再调用这个对象的hasAuthority方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于配置的权限控制"><a href="#基于配置的权限控制" class="headerlink" title="基于配置的权限控制"></a>基于配置的权限控制</h3><p>​我们也可以在配置类中使用使用配置的方式对资源进行权限控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">            <span class="comment">//关闭csrf</span></span><br><span class="line">            .csrf().disable()</span><br><span class="line">            <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/testCors&quot;</span>).hasAuthority(<span class="string">&quot;system:dept:list222&quot;</span>)</span><br><span class="line">            <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤器</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">            <span class="comment">//配置认证失败处理器</span></span><br><span class="line">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>​CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>​<a href="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p><p>​SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>​我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以CSRF攻击也就不用担心了。</p><h3 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h3><p>​实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果登录成功了是会调用AuthenticationSuccessHandler的方法进行认证成功后的处理的。AuthenticationSuccessHandler就是登录成功处理器。</p><p>​我们也可以自己去自定义成功处理器进行成功后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证成功了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin().successHandler(successHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h3><p>​实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果认证失败了是会调用AuthenticationFailureHandler的方法进行认证失败后的处理的。AuthenticationFailureHandler就是登录失败处理器。</p><p>​我们也可以自己去自定义失败处理器进行失败后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证失败了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">                .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">                .failureHandler(failureHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">                .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">                .failureHandler(failureHandler);</span><br><span class="line"></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">//配置注销成功处理器</span></span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql优化步骤及常见案例</title>
      <link href="/2023/06/05/sql%E4%BC%98%E5%8C%96%E6%AD%A5%E9%AA%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/06/05/sql%E4%BC%98%E5%8C%96%E6%AD%A5%E9%AA%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>在应用开发的早期，数据量少，开发人员开发功能时更重视功能上的实现，随着生产数据的增长，很多SQL语句开始暴露出性能问题，对生产的影响也越来越大，有时可能这些有问题的SQL就是整个系统性能的瓶颈。</p><h3 id="2、SQL优化一般步骤"><a href="#2、SQL优化一般步骤" class="headerlink" title="2、SQL优化一般步骤"></a>2、SQL优化一般步骤</h3><p><strong>1、通过慢查日志等定位那些执行效率较低的SQL语句</strong></p><p><strong>2、explain 分析SQL的执行计划</strong></p><p>需要重点关注type、rows、filtered、extra。</p><p>type由上至下，效率越来越高</p><ul><li>ALL 全表扫描</li><li>index 索引全扫描</li><li>range 索引范围扫描，常用语&lt;,&lt;&#x3D;,&gt;&#x3D;,between,in等操作</li><li>ref 使用非唯一索引扫描或唯一索引前缀扫描，返回单条记录，常出现在关联查询中</li><li>eq_ref 类似ref，区别在于使用的是唯一索引，使用主键的关联查询</li><li>const&#x2F;system 单条记录，系统会把匹配行中的其他列作为常数处理，如主键或唯一索引查询</li><li>null MySQL不访问任何表或索引，直接返回结果</li><li>虽然上至下，效率越来越高，但是根据cost模型，假设有两个索引idx1(a, b, c),idx2(a, c)，SQL为”select * from t where a &#x3D; 1 and b in (1, 2) order by c”;如果走idx1，那么是type为range，如果走idx2，那么type是ref；当需要扫描的行数，使用idx2大约是idx1的5倍以上时，会用idx1，否则会用idx2</li></ul><p>Extra</p><ul><li>Using filesort：MySQL需要额外的一次传递，以找出如何按排序顺序检索行。通过根据联接类型浏览所有行并为所有匹配WHERE子句的行保存排序关键字和行的指针来完成排序。然后关键字被排序，并按排序顺序检索行。</li><li>Using temporary：使用了临时表保存中间结果，性能特别差，需要重点优化</li><li>Using index：表示相应的 select 操作中使用了覆盖索引（Coveing Index）,避免访问了表的数据行，效率不错！如果同时出现 using where，意味着无法直接通过索引查找来查询到符合条件的数据。</li><li>Using index condition：MySQL5.6之后新增的ICP，using index condtion就是使用了ICP（索引下推），在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据。</li></ul><p><strong>3、show profile 分析</strong></p><p>了解SQL执行的线程的状态及消耗的时间。</p><p>默认是关闭的，开启语句“set profiling &#x3D; 1;”</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW PROFILES ;</span><br><span class="line">SHOW PROFILE FOR QUERY  #&#123;id&#125;;</span><br></pre></td></tr></table></figure><p><strong>4、trace</strong></p><p>trace分析优化器如何选择执行计划，通过trace文件能够进一步了解为什么优惠券选择A执行计划而不选择B执行计划。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set optimizer_trace=&quot;enabled=on&quot;;</span><br><span class="line">set optimizer_trace_max_mem_size=1000000;</span><br><span class="line">select * from information_schema.optimizer_trace;</span><br></pre></td></tr></table></figure><p><strong>5、确定问题并采用相应的措施</strong></p><ul><li>优化索引</li><li>优化SQL语句：修改SQL、IN 查询分段、时间查询分段、基于上一次数据过滤</li><li>改用其他实现方式：ES、数仓等</li><li>数据碎片处理</li></ul><h3 id="3、场景分析"><a href="#3、场景分析" class="headerlink" title="3、场景分析"></a>3、场景分析</h3><p><strong>案例1、最左匹配</strong></p><p>索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_shopid_orderno` (`shop_id`,`order_no`)</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _t where orderno=&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>查询匹配从左往右匹配，要使用order_no走索引，必须查询条件携带shop_id或者索引(shop_id,order_no)调换前后顺序</p><p><strong>案例2、隐式转换</strong></p><p>索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_mobile` (`mobile`)</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _user where mobile=12345678901</span><br></pre></td></tr></table></figure><p>隐式转换相当于在索引上做运算，会让索引失效。mobile是字符类型，使用了数字，应该使用字符串匹配，否则MySQL会用到隐式替换，导致索引失效。</p><p><strong>案例3、大分页</strong></p><p>索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_a_b_c` (`a`, `b`, `c`)</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _t where a = 1 and b = 2 order by c desc limit 10000, 10;</span><br></pre></td></tr></table></figure><p>对于大分页的场景，可以优先让产品优化需求，如果没有优化的，有如下两种优化方式，</p><p>一种是把上一次的最后一条数据，也即上面的c传过来，然后做“c &lt; xxx”处理，但是这种一般需要改接口协议，并不一定可行。</p><p>另一种是采用延迟关联的方式进行处理，减少SQL回表，但是要记得索引需要完全覆盖才有效果，SQL改动如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t1.* from _t t1, (select id from _t where a = 1 and b = 2 order by c desc limit 10000, 10) t2 where t1.id = t2.id;</span><br></pre></td></tr></table></figure><p><strong>案例4、in + order by</strong></p><p>索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_shopid_status_created` (`shop_id`, `order_status`, `created_at`)</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _order where shop_id = 1 and order_status in (1, 2, 3) order by created_at desc limit 10</span><br></pre></td></tr></table></figure><p>in查询在MySQL底层是通过n*m的方式去搜索，类似union，但是效率比union高。</p><p>in查询在进行cost代价计算时（代价 &#x3D; 元组数 * IO平均值），是通过将in包含的数值，一条条去查询获取元组数的，因此这个计算过程会比较的慢，所以MySQL设置了个临界值(eq_range_index_dive_limit)，5.6之后超过这个临界值后该列的cost就不参与计算了。因此会导致执行计划选择不准确。默认是200，即in条件超过了200个数据，会导致in的代价计算存在问题，可能会导致Mysql选择的索引不准确。</p><p>处理方式，可以(order_status, created_at)互换前后顺序，并且调整SQL为延迟关联。</p><p><strong>案例5、范围查询阻断，后续字段不能走索引</strong></p><p>索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_shopid_created_status` (`shop_id`, `created_at`, `order_status`)</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _order where shop_id = 1 and created_at &gt; &#x27;2021-01-01 00:00:00&#x27; and order_status = 10</span><br></pre></td></tr></table></figure><p>范围查询还有“IN、between”</p><p><strong>案例6、不等于、不包含不能用到索引的快速搜索。（可以用到ICP）</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from _order where shop_id=1 and order_status not in (1,2)</span><br><span class="line">select * from _order where shop_id=1 and order_status != 1</span><br></pre></td></tr></table></figure><p>在索引上，避免使用NOT、!&#x3D;、&lt;&gt;、!&lt;、!&gt;、NOT EXISTS、NOT IN、NOT LIKE等</p><p><strong>案例7、优化器选择不使用索引的情况</strong></p><p>如果要求访问的数据量很小，则优化器还是会选择辅助索引，但是当访问的数据占整个表中数据的蛮大一部分时（一般是20%左右），优化器会选择通过聚集索引来查找数据。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _order where  order_status = 1</span><br></pre></td></tr></table></figure><p>查询出所有未支付的订单，一般这种订单是很少的，即使建了索引，也没法使用索引。</p><p><strong>案例8、复杂查询</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(amt) from _t where a = 1 and b in (1, 2, 3) and c &gt; &#x27;2020-01-01&#x27;;</span><br><span class="line">select * from _t where a = 1 and b in (1, 2, 3) and c &gt; &#x27;2020-01-01&#x27; limit 10;</span><br></pre></td></tr></table></figure><p>如果是统计某些数据，可能改用数仓进行解决；</p><p>如果是业务上就有那么复杂的查询，可能就不建议继续走SQL了，而是采用其他的方式进行解决，比如使用ES等进行解决。</p><p><strong>案例9、asc和desc混用</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from _t where a=1 order by b desc, c asc</span><br></pre></td></tr></table></figure><p>desc 和asc混用时会导致索引失效</p><p><strong>案例10、大数据</strong></p><p>对于推送业务的数据存储，可能数据量会很大，如果在方案的选择上，最终选择存储在MySQL上，并且做7天等有效期的保存。</p><p>那么需要注意，频繁的清理数据，会照成数据碎片，需要联系DBA进行数据碎片处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql基础知识</title>
      <link href="/2023/06/05/sql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/06/05/sql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建和操纵表"><a href="#一、创建和操纵表" class="headerlink" title="一、创建和操纵表"></a>一、创建和操纵表</h2><p>1.创建表语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>约束条件<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>约束条件<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>约束条件<span class="operator">&gt;</span></span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.NULL值</p><p>在定义表时，可以在约束条件中指定该列允许或不允许NULL值。如果指定不允许NULL值，则在插入数据时如果为NULL就会报错。</p><p>3.默认值</p><p>可以在定义表时使用默认值，使用关键词default &lt;值&gt;进行设定，如果在插入数据时没有值插入，则该列会插入默认值。</p><p>4.更新表</p><p>更新表使用alter table语句，我们可以进行如下的操作。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table &lt;表名&gt; add column &lt;列名&gt; &lt;数据类型&gt;;     //增加新列</span><br><span class="line">alter table &lt;表名&gt; drop column &lt;列名&gt;;               //删除列</span><br></pre></td></tr></table></figure><p>5.重命名表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename table &lt;旧表名&gt; to &lt;新表名&gt;;</span><br><span class="line">alter table &lt;旧表名&gt; rename to &lt;新表名&gt;;</span><br></pre></td></tr></table></figure><p>6.删除表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table &lt;表名&gt;;</span><br></pre></td></tr></table></figure><h2 id="二、检索数据"><a href="#二、检索数据" class="headerlink" title="二、检索数据"></a>二、检索数据</h2><p>1.检索单列</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &lt;列名&gt; from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>2.检索多列</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &lt;列名1&gt;,&lt;列名2&gt;,... from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>3.检索所有列</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>4.检索不同值</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct(&lt;列名&gt;) from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>5.限制结果</p><p>在mysql中，如果我们需要限制结果输出的条数，可以使用**limit &lt;数字&gt;**来表示限制的行数。</p><p>6.注释</p><p>主要使用如下两种注释方式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注释               //单行注释</span><br><span class="line"></span><br><span class="line">/*多行注释</span><br><span class="line">嘻嘻嘻</span><br><span class="line">*/                   //多行注释</span><br></pre></td></tr></table></figure><h2 id="三、排序检索数据"><a href="#三、排序检索数据" class="headerlink" title="三、排序检索数据"></a>三、排序检索数据</h2><p>有时我们需要对检索出来的数据进行排序，这时我们使用如下语句进行。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by &lt;列名&gt; asc/desc;</span><br></pre></td></tr></table></figure><p>asc为升序排序，也是mysql中默认的排序方式；desc表示按照降序排序。此外根据需要我们也可以对多列进行排序，如下代码所示。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by &lt;列名1&gt; &lt;排序方法&gt;,&lt;列名2&gt; &lt;排序方式&gt;...;</span><br></pre></td></tr></table></figure><p>值得注意的是，<strong>order by语句通常位于查询语句的最后面</strong>。后面会具体介绍查询语句的完整构成。</p><h2 id="四、过滤数据"><a href="#四、过滤数据" class="headerlink" title="四、过滤数据"></a>四、过滤数据</h2><p>1.使用where子句</p><p>在sql中，我们使用where子句来对查询出的结果进行过滤，得到我们所需要的数据。它的格式如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &lt;列名&gt; from &lt;表名&gt;</span><br><span class="line">where &lt;过滤条件&gt;;</span><br></pre></td></tr></table></figure><p>过滤条件有多个时，我们可以使用and或or来进行多个条件的罗列。值得注意的是，当有多个过滤条件是，<strong>and的优先级会高于or</strong>，这也许会导致一些逻辑错误，需要注意。</p><p>2.where子句操作符</p><p><img src="https://pic2.zhimg.com/80/v2-a8b698f93bf714ea6e8d7c3365342665_1440w.webp" alt="img"></p><p>值得注意的是，在判断某个值是否为空值是，应该使用is null或is not null来判断，而不是使用”&#x3D; null”或”!&#x3D; null”。</p><p>3.使用通配符进行过滤</p><p>在用通配符进行过滤时，我们使用like操作符进行。</p><p>通配符主要包括两个，它们分别为百分号’%’和下划线’_’。</p><p>其中’%’表示任意长度的字符串，而下划线’_’只表示一个字符。</p><p>需要注意的是，**’%’不仅可以表示一个或多个字符，还可以表示0个字符**。</p><h2 id="五、创建计算字段"><a href="#五、创建计算字段" class="headerlink" title="五、创建计算字段"></a>五、创建计算字段</h2><p>1.计算字段</p><p>存储在数据库表中的数据一般不是应用程序所需要的格式。</p><p>我们需要直接从数据库中检索出转化、计算或格式化过的数据；而不是检索出数据，然后再在客户机应用改程序或报告程序中重新格式化。</p><p>只有数据库知道SELECT语句中那些列是实际的表列，哪些列是计算字段。从客户机（应用程序）的角度来看，计算字段的额数据是以与其他列的数据相同的方式返回的。</p><p>2.拼接字段</p><p>在mysql中，我们可以使用concat函数对字段进行拼接，格式如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1, str2, str3......)</span><br></pre></td></tr></table></figure><p>对于字符串中存在的空格，我们可以用字符串处理函数**RTRIM()、LTRIM()、TRIM()**来进行处理。</p><p>3.使用别名</p><p>我们可以用关键字as来给我们的列起一个别名。格式如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="keyword">as</span> <span class="operator">&lt;</span>别名<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h2 id="六、使用函数处理数据"><a href="#六、使用函数处理数据" class="headerlink" title="六、使用函数处理数据"></a>六、使用函数处理数据</h2><p>函数的可移植性是很强的，而且使用函数可以很方便的对数据进行处理。</p><p>sql函数主要有四种</p><ul><li>文本函数</li><li>数值函数</li><li>日期与时间函数</li><li>系统函数</li></ul><p>下面介绍常用的一些函数</p><p>1.文本函数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">left(s, n)          //返回字符串左边的n个字符</span><br><span class="line">right(s, n)         //返回字符串右边的n个字符</span><br><span class="line">trim(s)             //去掉字符串s的空格</span><br><span class="line">ltrim(s)            //去掉字符串左边的空格</span><br><span class="line">rtrim(s)            //去掉字符串右边的空格</span><br><span class="line">length(s)           //计算字符串的长度</span><br><span class="line">lower(s)            //将字符串的所有字符变成小写</span><br><span class="line">upper(s)            //将字符串的所有字符变成大写</span><br></pre></td></tr></table></figure><p>2.数值函数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abs(x)             //绝对值</span><br><span class="line">cos(x)</span><br><span class="line">sin(x)</span><br><span class="line">tan(x)</span><br><span class="line">acos(x) asin() atan()     //三角函数</span><br><span class="line">ceil(x)             //返回大于或等于x的最小整数</span><br><span class="line">floor(x)            //舍去x的小数部分，只保留整数部分，并且不进行四舍五入</span><br><span class="line">pi()               //返回圆周率</span><br><span class="line">sqrt(x)            //平方根</span><br><span class="line">pow(x, y)          //x的y次方</span><br><span class="line">exp(x)             //返回e的x次方</span><br><span class="line">rand()             //返回0-1的随机数</span><br><span class="line">round(x, y)            //返回x的值小数点后面的第y位，进行四舍五入</span><br><span class="line">truncate(x, y)     //返回x的值小数点后面的第y位，不进行四舍五入</span><br></pre></td></tr></table></figure><p>3.日期与时间函数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">current_date()                  //返回当前日期</span><br><span class="line">current_time()                  //返回当前时间</span><br><span class="line">current_timestamp()/now()             //返回当前日期和时间</span><br><span class="line">date()                          //从日期或日期时间中提取出日期值</span><br><span class="line">year() month() day() hour() minute() </span><br><span class="line">date_format(d, f)               //以指定格式显示日期</span><br><span class="line">datediff(date1,date2)           //返回两个日期相差的天数，大日期在前</span><br><span class="line">timediff(datetime1,datetime2)   //返回形式为时:分:秒，大日期在前</span><br><span class="line">timestampdiff(interval,time1,time2)     //返回两个日期之差，大日期在后。精确到什么单位取决于第一个参数interval，可以为年---秒</span><br></pre></td></tr></table></figure><h2 id="七、汇总数据"><a href="#七、汇总数据" class="headerlink" title="七、汇总数据"></a>七、汇总数据</h2><p><strong>聚合函数：</strong>聚合函数就是用来数据汇总的一类函数。以下五个聚合函数务必牢记。它们通常和分组数据进行结合使用。</p><ul><li>avg()</li><li>min()</li><li>max()</li><li>count()</li><li>sum()</li></ul><p><strong>需要注意的是，聚合函数均不会处理NULL值。</strong></p><h2 id="八、分组数据"><a href="#八、分组数据" class="headerlink" title="八、分组数据"></a>八、分组数据</h2><p>1.创建分组</p><p>创建分组使用group by子句，格式如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select &lt;列名&gt; from &lt;表名&gt;</span><br><span class="line">where &lt;过滤条件&gt;</span><br><span class="line">group by &lt;列名&gt;</span><br><span class="line">having &lt;过滤条件&gt;</span><br><span class="line">order by &lt;列名&gt; &lt;排序方式&gt;</span><br></pre></td></tr></table></figure><p>其实上面的格式也是select语句完整的格式。</p><p>2.过滤分组</p><p>过滤分组使用having，牢记<strong>where是行级过滤</strong>，<strong>having是组级过滤</strong>。</p><h2 id="九、使用子查询"><a href="#九、使用子查询" class="headerlink" title="九、使用子查询"></a>九、使用子查询</h2><p>子查询也就是select语句的嵌套，有了子查询我们就可以进行复杂的查询。</p><p>子查询返回的一张表，所以其位置也比较灵活，可以位于from后面，也可以位于where后面。</p><p>子查询也可以说是<strong>一个一次性的视图</strong>。</p><p>在执行顺序上，先执行子查询，再执行外层的查询。</p><p>牢记：<strong>where子句中不能使用聚合函数</strong>。</p><h2 id="十、联接表"><a href="#十、联接表" class="headerlink" title="十、联接表"></a>十、联接表</h2><p>表的连接主要分为以下几种。</p><ul><li>内连接</li><li>外连接(左连接、右连接)</li><li>自连接</li></ul><p>1.内连接</p><p>语法格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询字段 FROM 表1 [as] 别名 [INNER] JOIN 表2 [as] 别名 ON 表1.关系字段 = 表2.关系字段</span><br></pre></td></tr></table></figure><p>内连接就是得出两个表的交集部分。</p><p>2.左连接</p><p>语法格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询字段 FROM 表1 [as] 别名 LEFT JOIN 表2 [as] 别名 ON 表1.关系字段 = 表2.关系字段</span><br></pre></td></tr></table></figure><p>左连接就是左边表的记录要全部显示出来，右表只有和左表匹配到的记录才进行显示。</p><p>3.右连接</p><p>和左连接相反，不再累述。</p><p>4.自连接</p><p>就是把一张表看成两张表。进行自连接往往是一张表的某些列间存在逻辑关系。</p><h2 id="十一、组合查询"><a href="#十一、组合查询" class="headerlink" title="十一、组合查询"></a>十一、组合查询</h2><p>1.创建组合查询</p><p>创建组合查询时我们使用UNION将两个或多个select语句查询出的结果组合在一起形成一个表。</p><p>需要不同的select语句返回相同数量的列且对应列的数据类型相同，事实上应该是意义都一样才合理。</p><p>2.union与union all</p><p>对于组合查询出的结果，如果使用union，则会自动对结果进行去重。如果不想去重则使用union all。</p><p>3.组合查询的排序</p><p>对于组合查询结果的排序只需要使用一个order by子句，放在最后一个select语句的后面即可。</p><h2 id="十二、插入、更新与删除数据"><a href="#十二、插入、更新与删除数据" class="headerlink" title="十二、插入、更新与删除数据"></a>十二、插入、更新与删除数据</h2><p>1.插入数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into &lt;表名&gt;(列名1,列名2,...) values (数据...);</span><br></pre></td></tr></table></figure><p>虽然表名后面的列名表不是严格要求的，但是这样会更安全。如果不写出列名，则需要严格按照表的定义插入数据。</p><p>如果我们只需要插入一行中的部分列，那么列出列名就变得必须了。</p><p>1.1.插入检索出的数据</p><p>使用insert…select语句进行。以下是格式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into &lt;表名&gt;(列名表)</span><br><span class="line">select &lt;列名表&gt; from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>1.2.复制表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table copytable as</span><br><span class="line">select * from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>2.更新数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update &lt;表名&gt;</span><br><span class="line">set &lt;列名&gt; = ...</span><br><span class="line">where &lt;过滤条件&gt;;</span><br></pre></td></tr></table></figure><p>一定切记不要忘了过滤条件，否则将会对所有行的数据进行更新。</p><p>3.删除数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from &lt;表名&gt;</span><br><span class="line">where &lt;过滤条件&gt;;</span><br></pre></td></tr></table></figure><blockquote><p>如果要删除某行中某列的元素，可以将其值更新为null。</p></blockquote><h2 id="十三、使用视图"><a href="#十三、使用视图" class="headerlink" title="十三、使用视图"></a>十三、使用视图</h2><p>视图是一张虚表，它并不存储实际的数据，存储的只是select语句。</p><p>使用视图有如下的优点</p><ul><li>提高sql语句的重用性</li><li>保证了数据的安全性</li><li>大大简化了sql语句</li></ul><p><strong>创建视图</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create view &lt;视图名&gt; as</span><br><span class="line">&lt;select语句&gt;;</span><br></pre></td></tr></table></figure><p><strong>删除视图</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view &lt;视图名&gt;;</span><br></pre></td></tr></table></figure><h2 id="十四、事务"><a href="#十四、事务" class="headerlink" title="十四、事务"></a>十四、事务</h2><p>1.什么是事务</p><p>需要在同一个处理单元中执行的一系列更新处理的集合。一个事务中包含多少个更新处理或者包含哪些处理，在DBMS中并没有固定的标准，而是根据用户的要求决定的。</p><p>2.语法</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start transaction；</span><br><span class="line">DML语句1；</span><br><span class="line">DML语句2；</span><br><span class="line">DML语句3；</span><br><span class="line">...</span><br><span class="line">ROLLBACK/COMMIT;</span><br></pre></td></tr></table></figure><p>3.理解事务</p><p>事务其实很好理解，它将一系列操作放在一个块中形成一个代码块，这个代码块要执行就全部执行，要么就不执行。</p><p>拿银行转账举例，转账的过程为，我的账户金额减少——&gt;对方账户金额增加——&gt;交易完毕。</p><p>如果我的账户金额减少后出现了故障导致对方账户金额没有增加，那么这肯定是不被允许的。所以这个转账过程中的每一步都必须完整的执行。</p><p>rollback就是在DML语句出现故障时，来使得数据库回滚到执行操作前的状态。而commit则是所有DML正确执行后才执行，告诉系统这个事务正常完成了，系统可以进入下一个新的状态了。</p><hr><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>一、case when语句</p><p>这个语句出现的比较频繁，所以这里给出它的格式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case when &lt;表达式1&gt; then &lt;表达式&gt;</span><br><span class="line">     when &lt;表达式2&gt; then &lt;表达式&gt;</span><br><span class="line">     ...</span><br><span class="line">     else &lt;表达式&gt;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>二、sql语句及种类</p><p>这是sql的基础知识，需要知道。</p><ul><li>DDL：数据定义语言，用来创建、删除存储数据的数据库以及数据库中的表对象，包含的指令有：CREATE、DROP、ALTER</li><li>DML：数据操纵语言，用来查询或者变更表中的记录。包含的指令有：SELECT、INSERT、UPDATE、DELETE</li><li>DCL：数据控制语言，用来确认或者取消对数据 库中的数据进行的变更。包含的指令有：COMMIT、ROLLBACK、GRANT、REVOKE</li></ul><p>三、exists谓词</p><p>在SQL语言中，EXISTS（存在）谓词是一个非常重要的查询关键词。</p><p>EXISTS代表<strong>存在</strong>量词。带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqoop基础</title>
      <link href="/2023/02/25/sqoop%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/25/sqoop%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h2><h3 id="（一）什么是Sqoop？"><a href="#（一）什么是Sqoop？" class="headerlink" title="（一）什么是Sqoop？"></a>（一）什么是Sqoop？</h3><p><img src="/2023/02/25/sqoop%E5%9F%BA%E7%A1%80/image-20230225215518717.png" alt="image-20230225215518717"></p><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p><p>Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个Apache项目。</p><h3 id="（二）Sqoop是如何工作？"><a href="#（二）Sqoop是如何工作？" class="headerlink" title="（二）Sqoop是如何工作？"></a>（二）Sqoop是如何工作？</h3><ul><li>底层就是利用JDBC连接数据库。</li></ul><h3 id="（三）安装配置Sqoop"><a href="#（三）安装配置Sqoop" class="headerlink" title="（三）安装配置Sqoop"></a>（三）安装配置Sqoop</h3><ul><li>sqoop下载地址：<a href="http://mirror.bit.edu.cn/apache/sqoop/1.4.7/">http://mirror.bit.edu.cn/apache/sqoop/1.4.7/</a></li><li>解压tar包到指定目录</li><li>添加Sqoop根目录到环境变量</li><li>将mysql的mysql-connector-java-5.1.43-bin.jar包放到sqoop的lib目录下</li></ul><h3 id="（四）使用Sqoop"><a href="#（四）使用Sqoop" class="headerlink" title="（四）使用Sqoop"></a>（四）使用Sqoop</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>codegen</td><td>将关系数据库表映射为一个Java文件、Java class类、以及相关的jar包</td></tr><tr><td>create-hive-table</td><td>生成与关系数据库表的表结构对应的HIVE表</td></tr><tr><td>eval</td><td>以快速地使用SQL语句对关系数据库进行操作，这可以使得在使用import这种工具进行数据导入的时候，可以预先了解相关的SQL语句是否正确，并能将结果显示在控制台。</td></tr><tr><td>export</td><td>从hdfs中导数据到关系数据库中</td></tr><tr><td>help</td><td></td></tr><tr><td>import</td><td>将数据库表的数据导入到HDFS中</td></tr><tr><td>import-all-tables</td><td>将数据库中所有的表的数据导入到HDFS中</td></tr><tr><td>job</td><td>用来生成一个sqoop的任务，生成后，该任务并不执行，除非使用命令执行该任务。</td></tr><tr><td>list-databases</td><td>打印出关系数据库所有的数据库名</td></tr><tr><td>list-tables</td><td>打印出关系数据库某一数据库的所有表名</td></tr><tr><td>merge</td><td>将HDFS中不同目录下面的数据合在一起，并存放在指定的目录中</td></tr><tr><td>metastore</td><td>记录sqoop job的元数据信息</td></tr><tr><td>version</td><td>显示sqoop版本信息</td></tr></tbody></table><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-m</td><td>使用几个map任务并发执行</td></tr><tr><td>–split-by</td><td>拆分数据的字段(数据类型最好是int类型，否则不建议设置)</td></tr></tbody></table><h3 id="（五）案例"><a href="#（五）案例" class="headerlink" title="（五）案例"></a>（五）案例</h3><ul><li><p>案例一：将mysql中的表映射为一个java文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop codegen --connect jdbc:mysql://localhost:3306/dbname --username root --password 123 --table emp</span><br></pre></td></tr></table></figure></li><li><p>案例二：根据mysql的表结构在hive中创建一个同样结构的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop create-hive-table --connect jdbc:mysql://localhost:3306/dbname --username root --password Welcome_1 --table emp --hive-table emp</span><br></pre></td></tr></table></figure><blockquote><p>注：需要将hive&#x2F;lib中的hive-common-2.3.3.jar拷贝到sqoop的lib目录中，否则执行报错。</p></blockquote></li><li><p>案例三：通过Sqoop验证一条SQL语句是否正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop eval --connect jdbc:mysql://localhost:3306/dbname --username root --password Welcome_1 --query &#x27;select * from cate&#x27;</span><br></pre></td></tr></table></figure></li><li><p>案例四：将mysql中的数据导入到HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop import --connect jdbc:mysql://localhost:3306/dbname --username root --password Welcome_1 --table cate --target-dir /data</span><br></pre></td></tr></table></figure></li><li><p>案例五：将mysql中所有表中的数据导入HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop import-all-tables &quot;-Dorg.apache.sqoop.splitter.allow_text_splitter=true&quot; --connect jdbc:mysql://localhost:3306/jzgyl --username root --password Welcome_1</span><br></pre></td></tr></table></figure><blockquote><p>注：”-Dorg.apache.sqoop.splitter.allow_text_splitter&#x3D;true” 参数允许表的主键是字符串的情况下仍进行导入，导入的表默认存放在HDFS的&#x2F;user&#x2F;root目录下，而且还会在执行这条命令的那个目录下生成对应表的java文件。</p></blockquote></li><li><p>案例六：将HDFS中的数据导出到mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop export --connect jdbc:mysql://localhost:3306/jzgyl --username root --password Welcome_1 --table cate --export-dir /data</span><br></pre></td></tr></table></figure><blockquote><p>注：如果mysql没有在配置文件中统一utf8编码会出现乱码。</p></blockquote></li><li><p>案例七：列出所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop list-databases --connect jdbc:mysql://localhost:3306/jzgyl --username root --password Welcome_1</span><br></pre></td></tr></table></figure></li><li><p>案例八：列出某个数据库中所有的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop list-tables --connect jdbc:mysql://localhost:3306/jzgyl --username root --password Welcome_1</span><br></pre></td></tr></table></figure></li><li><p>案例九：查看sqoop的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop version</span><br></pre></td></tr></table></figure></li><li><p>案例十：将mysql表中的数据导入HBase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop import --connect jdbc:mysql://localhost:3306/jzgyl --username root --password Welcome_1 --table cate --columns id,name,create_time,update_time --hbase-table cate --hbase-row-key id --column-family info</span><br></pre></td></tr></table></figure><blockquote><p>ps：lz在执行命令的时候在控制台发现提交的mapreduce程序显示被Killed，以为任务挂掉了，但是登录yarn的网页查看却发现已经执行成功……</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sqoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ck的global in和join</title>
      <link href="/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/"/>
      <url>/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/</url>
      
        <content type="html"><![CDATA[<h3 id="Distributed表引擎"><a href="#Distributed表引擎" class="headerlink" title="Distributed表引擎"></a>Distributed表引擎</h3><p>当数据表包含多个分片的时候，我们需要将普通的本地查询转换为分布式查询。当然，这个转换动作是不需要用户自己进行的，在clickhouse里面会由Distributed表引擎代劳。</p><p>一种约定俗成的命名方式，是将Distributed表附带_all后缀；本地分片附带_local后缀，以示区分。</p><p>当我们面对Distributed表引擎查询的时候，它主要为我们做了3件事情:</p><ol><li>发起远程调用，根据集群的配置信息，从当前节点向远端分片发起Remote远程查询调用</li><li>分布式表转本地表，在发送远程查询时，将SQL内的 _all表 转成 _local表</li><li>合并结果集，合并由多个分片返回的数据</li></ol><p>假设Distributed表test_all映射了两个分片，它们分布在CH5和CH6两个节点，那么在CH5节点执查询SELECT * FROM test_all 的执行计划会是下面的这个样子:</p><p><img src="/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/image-20230225205727957.png" alt="image-20230225205727957"></p><p>其中，Remote远程查询 和 One本地查询是并行的，所以图中归为了一个步骤。可以看到，面向Distributed表引擎查询，就自动的完成了整个分布式查询的过程。</p><p>但是这样会存在一些问题：</p><p>在大多数时候，面向Distributed表的SQL写法与本地查询没有多大区别。但当我们执行 IN 或者 JOIN 查询的时候，一不小心就容易掉到坑里，因为这些查询子句会面对多张数据表。</p><p>为了便于演示，我们简化一下场景，用一个自查询的IN子句来解释说明，假设一张表的数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_query_local</span><br><span class="line">┌─id─┬─repo─┐</span><br><span class="line">│  <span class="number">1</span> │  <span class="number">100</span> │</span><br><span class="line">│  <span class="number">2</span> │  <span class="number">100</span> │</span><br><span class="line">│  <span class="number">3</span> │  <span class="number">100</span> │</span><br><span class="line">│  <span class="number">3</span> │  <span class="number">200</span> │</span><br><span class="line">│  <span class="number">4</span> │  <span class="number">200</span> │</span><br><span class="line">└────┴──────┘</span><br></pre></td></tr></table></figure><p>现在有一个统计的需求，找到同时拥有repo &#x3D; 100 和 repo &#x3D; 200的个数，那么它的查询SQL可能是下面这个样子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(id) <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>这条语句目前在单机执行是没有问题的，id为3的数据同时拥有2个repo:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uniq(id)─┐</span><br><span class="line">│        <span class="number">1</span> │</span><br><span class="line">└──────────┘</span><br></pre></td></tr></table></figure><p>现在模拟分布式的场景，把这张表进行分片操作，将它们分布到CH5和CH6两个节点，且每个节点的数据数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CH5节点 test_query_local</span><br><span class="line">┌─id─┬─repo─┐</span><br><span class="line">│  <span class="number">1</span> │  <span class="number">100</span> │</span><br><span class="line">│  <span class="number">2</span> │  <span class="number">100</span> │</span><br><span class="line">│  <span class="number">3</span> │  <span class="number">100</span> │</span><br><span class="line">└────┴──────┘</span><br><span class="line">CH6节点 test_query_local</span><br><span class="line">┌─id─┬─repo─┐</span><br><span class="line">│  <span class="number">3</span> │  <span class="number">200</span> │</span><br><span class="line">│  <span class="number">4</span> │  <span class="number">200</span> │</span><br><span class="line">└────┴──────┘</span><br></pre></td></tr></table></figure><p>接着使用 分布式表 test_query_all 映射这2个分片。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(id)</span><br><span class="line"><span class="keyword">FROM</span> test_query_all</span><br><span class="line"><span class="keyword">WHERE</span> (repo <span class="operator">=</span> <span class="number">100</span>) </span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">id <span class="keyword">IN</span> (    </span><br><span class="line">    <span class="keyword">SELECT</span> id    </span><br><span class="line">    <span class="keyword">FROM</span> test_query_all    </span><br><span class="line">    <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>查询过程如下所示：</p><p><img src="/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/image-20230225210510270.png" alt="image-20230225210510270">站在CH5节点的视角，在SQL语句 _all 转 _local后，在CH5本地会执行下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(id) <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_all <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>注意，IN 子句此时是分布式表 test_query_all，所以它又转成了下面的形式，分别在CH5本地和CH6远端执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p>因为 IN子句 单独发起了一次分布式查询，所以能够查询到所有数据，但此时还会出现另外的问题。</p><p>站在CH6节点的视角下，sql执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(id) <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">100</span> </span><br><span class="line"><span class="keyword">AND</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_all <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>注意 IN 子查询，由于它是 分布式表 test_query_all，所以它又会向集群内其他分片发起分布式查询，如下图所示:</p><p><img src="/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/image-20230225210941065.png" alt="image-20230225210941065"></p><p>这就是分布式查询的放大问题，放大次数是 N的平方(N &#x3D; 分片数量)。所以说，如果一张表有10个分片，那么一次分布式 IN 查询的背后会涉及100次查询，这显然是不可接受的。</p><p>官方给出的解决方案是使用GLOBAL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(id) <span class="keyword">FROM</span> test_query_all <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">100</span> </span><br><span class="line"><span class="keyword">AND</span> id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_all <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/02/25/clickHouse%E5%88%86%E5%B8%83%E5%BC%8Fin%E5%92%8Cjoin/image-20230225211521036.png" alt="image-20230225211521036"></p><p>步骤：</p><p>1、将 GLOBAL 修饰的子句，单独进行了一次分布式查询;</p><p>2、将子句的结果汇总后，用内存临时表保存;</p><p>3、直接将临时表分发至每个分片节点，从而避免了查询放大的问题。</p><ul><li>关于JOIN查询</li></ul><p>对于分布式JOIN查询而言，其执行逻辑和 IN查询是一样的，它们唯一的区别是分发的语句不同，例如：</p><p>当执行 IN子句的时候，是将IN子句提取，发起分布式查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_all <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>IN子句 _all 转 _local，分发到每个分片执行，再汇总：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#分布式执行</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test_query_local <span class="keyword">WHERE</span> repo <span class="operator">=</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p>当执行JOIN子句的时候，是将右表提取，发起分布式查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_query_all <span class="keyword">AS</span> t1 <span class="keyword">GLOBAL</span> <span class="keyword">JOIN</span> test_query_all <span class="keyword">AS</span> t2 <span class="keyword">ON</span> t1.id <span class="operator">=</span> t2.id</span><br></pre></td></tr></table></figure><p>右表 _all 转 _local，分发到每个分片执行，再汇总：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#分布式执行</span><br><span class="line"><span class="keyword">SELECT</span> id, repo <span class="keyword">FROM</span> default.test_query_local</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> clickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive入门学习</title>
      <link href="/2023/02/12/hive/"/>
      <url>/2023/02/12/hive/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h1><ul><li>Hive是什么？其体系结构简介</li><li>Hive的安装与管理</li><li>HiveQL数据类型，表以及表的操作</li><li>HiveQL查询数据</li></ul><h3 id="一、什么是Hive"><a href="#一、什么是Hive" class="headerlink" title="一、什么是Hive"></a>一、什么是Hive</h3><ul><li>Hive 是建立在 Hadoop 上的数据仓库基础构架。它提供了一系列的工具，可以用来进行数据提取转化加载（ETL ），这是一种可以存储、查询和分析存储在 Hadoop 中的大规模数据的机制。Hive 定义了简单的类 SQL 查询语言，称为 QL ，它允许熟悉 SQL 的用户查询数据。同时，这个语言也允许熟悉 MapReduce 开发者的开发自定义的 mapper 和 reducer 来处理内建的 mapper 和 reducer 无法完成的复杂的分析工作。</li><li>Hive是SQL解析引擎，它将SQL语句转译成M&#x2F;R Job然后在Hadoop执行。</li><li>Hive的表其实就是HDFS的目录&#x2F;文件夹，按表名把文件夹分开。如果是分区表，则分区值是子文件夹，可以直接在M&#x2F;R Job里使用这些数据。</li><li>总结：<strong>Hive的表对应HDFS的目录（或文件夹）；Hive表中的数据对应HDFS的文件</strong>。</li></ul><h3 id="二、Hive的系统架构-一"><a href="#二、Hive的系统架构-一" class="headerlink" title="二、Hive的系统架构(一)"></a>二、Hive的系统架构(一)</h3><ul><li><img src="https://img-blog.csdnimg.cn/20210618230340710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Nob2NrYW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">用户接口，包括 CLI，JDBC&#x2F;ODBC，WebUI</li><li>元数据存储，通常是存储在关系数据库如 mysql, derby 中</li><li>解释器、编译器、优化器、执行器</li><li>Hadoop：用 HDFS 进行存储，利用 MapReduce 进行计算</li></ul><h3 id="三、Hive的系统架构（二）"><a href="#三、Hive的系统架构（二）" class="headerlink" title="三、Hive的系统架构（二）"></a>三、Hive的系统架构（二）</h3><ul><li>用户接口主要有三个：CLI，JDBC&#x2F;ODBC和 WebUI<ul><li>CLI，即Shell命令行</li><li>JDBC&#x2F;ODBC 是 Hive 的Java，与使用传统数据库JDBC的方式类似</li><li>WebGUI是通过浏览器访问 Hive</li></ul></li><li>Hive 将元数据存储在数据库中(metastore)，目前只支持 mysql、oracle、derby。Hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等</li><li>解释器、编译器、优化器完成 HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划（plan）的生成。生成的查询计划存储在 HDFS 中，并在随后有 MapReduce 调用执行</li><li>Hive 的数据存储在 HDFS 中，大部分的查询由 MapReduce 完成（包含 * 的查询，比如 select * from table 不会生成 MapRedcue 任务）</li></ul><h3 id="四、Hive的运行模式"><a href="#四、Hive的运行模式" class="headerlink" title="四、Hive的运行模式"></a>四、Hive的运行模式</h3><ul><li><p>Hive的运行模式即任务的执行环境</p></li><li><p>分为本地与集群两种</p><ul><li><p>我们可以通过mapred.job.tracker 来指明</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置方式：</span><br><span class="line">hive &gt; SET mapred.job.tracker=<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="五、Hive的启动方式"><a href="#五、Hive的启动方式" class="headerlink" title="五、Hive的启动方式"></a>五、Hive的启动方式</h3><ul><li><p>1、hive 命令行模式，直接输入#&#x2F;hive&#x2F;bin&#x2F;hive的执行程序，或者输入 #hive –service cli</p></li><li><p>2、 hive web界面的 (端口号9999) 启动方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hive --service hwi &amp;</span></span><br><span class="line">用于通过浏览器来访问hive</span><br><span class="line">http://hadoop0:9999/hwi/</span><br></pre></td></tr></table></figure></li><li><p>3、 hive 远程服务 (端口号10000) 启动方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hive --service hiveserver &amp;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="六、Hive与传统数据库"><a href="#六、Hive与传统数据库" class="headerlink" title="六、Hive与传统数据库"></a>六、Hive与传统数据库</h3><table><thead><tr><th>查询语言</th><th>HiveQL</th><th>SQL</th></tr></thead><tbody><tr><td>数据存储位置</td><td>HDFS</td><td>Raw Device or 本地FS</td></tr><tr><td>数据格式</td><td>用户定义</td><td>系统决定</td></tr><tr><td>数据更新</td><td>不支持</td><td>支持</td></tr><tr><td>索引</td><td>新版本有，但弱</td><td>有</td></tr><tr><td>执行</td><td>MapReduce</td><td>Executor</td></tr><tr><td>执行延迟</td><td>高</td><td>低</td></tr><tr><td>可扩展性</td><td>高</td><td>低</td></tr><tr><td>数据规模</td><td>大</td><td>小</td></tr></tbody></table><h3 id="七、Hive的数据类型"><a href="#七、Hive的数据类型" class="headerlink" title="七、Hive的数据类型"></a>七、Hive的数据类型</h3><ul><li><p>基本数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tinyint/smallint/int/bigint</span><br><span class="line">float/double</span><br><span class="line">boolean</span><br><span class="line">string</span><br></pre></td></tr></table></figure></li><li><p>复杂数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array/Map/Struct</span><br><span class="line">日期只有date和timestamp</span><br></pre></td></tr></table></figure></li></ul><h3 id="八、Hive的数据存储"><a href="#八、Hive的数据存储" class="headerlink" title="八、Hive的数据存储"></a>八、Hive的数据存储</h3><ul><li>Hive的数据存储基于Hadoop HDFS</li><li>Hive没有专门的数据存储格式</li><li>存储结构主要包括：数据库、文件、表、视图</li><li>Hive默认可以直接加载文本文件（TextFile），还支持sequence file 、RC file</li><li>创建表时，指定Hive数据的列分隔符与行分隔符，Hive即可解析数据</li></ul><h3 id="九、Hive的数据模型-数据库"><a href="#九、Hive的数据模型-数据库" class="headerlink" title="九、Hive的数据模型-数据库"></a>九、Hive的数据模型-数据库</h3><ul><li><p>类似传统数据库的DataBase</p></li><li><p>默认数据库”default”</p><ul><li>使用#hive命令后，不使用hive&gt;use &lt;数据库名&gt;，系统默认的数据库。可以显式使用hive&gt; use default;</li></ul></li><li><p>创建一个新库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive &gt; create database test_dw;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十、Hive的数据模型-表"><a href="#十、Hive的数据模型-表" class="headerlink" title="十、Hive的数据模型-表"></a>十、Hive的数据模型-表</h3><ul><li>Table 内部表</li><li>Partition 分区表</li><li>External Table 外部表</li><li>Bucket Table 桶表</li></ul><h3 id="十一、Hive的数据模型-内部表"><a href="#十一、Hive的数据模型-内部表" class="headerlink" title="十一、Hive的数据模型-内部表"></a>十一、Hive的数据模型-内部表</h3><ul><li><p>与数据库中的 Table 在概念上是类似</p></li><li><p>每一个 Table 在 Hive 中都有一个相应的目录存储数据。例如，一个表 test，它在 HDFS 中的路径为：&#x2F; warehouse&#x2F;test。 warehouse是在 hive-site.xml 中由 ${hive.metastore.warehouse.dir} 指定的数据仓库的目录</p></li><li><p>所有的 Table 数据（不包括 External Table）都保存在这个目录中。</p></li><li><p>删除表时，元数据与数据都会被删除</p></li><li><p>内部表的使用</p><ul><li><p>创建数据文件inner_table.dat</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;create table inner_table (key string);</span><br></pre></td></tr></table></figure></li><li><p>加载数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;load data local inpath &#x27;/root/inner_table.dat&#x27; into table inner_table;</span><br></pre></td></tr></table></figure></li><li><p>查看数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from inner_table</span><br><span class="line">select count(*) from inner_table</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table inner_table</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="十二、Hive的数据模型-分区表"><a href="#十二、Hive的数据模型-分区表" class="headerlink" title="十二、Hive的数据模型-分区表"></a>十二、Hive的数据模型-分区表</h3><ul><li><p>Partition 对应于数据库的 Partition 列的密集索引</p></li><li><p>在 Hive 中，表中的一个 Partition 对应于表下的一个目录，所有的 Partition 的数据都存储在对应的目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如：test表中包含 date 和 city 两个 Partition，</span><br><span class="line">则对应于date=20180729, city = bj 的 HDFS 子目录为：</span><br><span class="line">/warehouse/test/date=20130201/city=bj</span><br><span class="line">对应于date=20180729, city=sh 的HDFS 子目录为；</span><br><span class="line">/warehouse/test/date=20180729/city=sh</span><br></pre></td></tr></table></figure></li><li><p>分区表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tmp_table #表名</span><br><span class="line">(</span><br><span class="line">title   string, # 字段名称 字段类型</span><br><span class="line">minimum_bid     double,</span><br><span class="line">quantity        bigint,</span><br><span class="line">have_invoice    bigint</span><br><span class="line">)COMMENT &#x27;注释：XXX&#x27; #表注释</span><br><span class="line"> PARTITIONED BY(pt STRING) #分区表字段（如果你文件非常之大的话，采用分区表可以快过滤出按分区字段划分的数据）</span><br><span class="line"> ROW FORMAT DELIMITED </span><br><span class="line">   FIELDS TERMINATED BY &#x27;\001&#x27;   # 字段是用什么分割开的</span><br><span class="line">STORED AS SEQUENCEFILE; #用哪种方式存储数据，SEQUENCEFILE是hadoop自带的文件压缩格式</span><br></pre></td></tr></table></figure></li><li><p>一些相关命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES; # 查看所有的表</span><br><span class="line">SHOW TABLES &#x27;*TMP*&#x27;; #支持模糊查询</span><br><span class="line">SHOW PARTITIONS TMP_TABLE; #查看表有哪些分区</span><br><span class="line">DESCRIBE TMP_TABLE; #查看表结构</span><br></pre></td></tr></table></figure></li><li><p>分区表的使用</p><ul><li><p>创建数据文件partition_table.dat</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table partition_table(rectime string,msisdn string) partitioned by(daytime string,city string)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27; stored as TEXTFILE;</span><br></pre></td></tr></table></figure></li><li><p>加载数据到分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath &#x27;/home/partition_table.dat&#x27; into table partition_table partition</span><br><span class="line">(daytime=&#x27;2013-02-01&#x27;,city=&#x27;bj&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>查看数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from partition_table</span><br><span class="line">select count(*) from partition_table</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table partition_table</span><br></pre></td></tr></table></figure></li><li><p>通过load data 加载数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table partition_table add partition (daytime=&#x27;2018-07-29&#x27;,city=&#x27;bj&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>元数据，数据文件删除，但目录daytime&#x3D;2013-02-04还在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table partition_table drop partition (daytime=&#x27;2018-07-29&#x27;,city=&#x27;bj&#x27;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="十三、Hive的数据模型—桶表"><a href="#十三、Hive的数据模型—桶表" class="headerlink" title="十三、Hive的数据模型—桶表"></a>十三、Hive的数据模型—桶表</h3><ul><li><p>桶表是对数据进行哈希取值，然后放到不同文件中存储。</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table bucket_table(id string) clustered by(id) into 4 buckets;</span><br></pre></td></tr></table></figure></li><li><p>加载数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set hive.enforce.bucketing = true;</span><br><span class="line">insert into table bucket_table select name from stu;</span><br><span class="line">insert overwrite table bucket_table select name from stu;</span><br></pre></td></tr></table></figure></li><li><p>数据加载到桶表时，会对字段取hash值，然后与桶的数量取模。把数据放到对应的文件中。</p></li><li><p>抽样查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from bucket_table tablesample(bucket 1 out of 4 on id);</span><br></pre></td></tr></table></figure></li></ul><h3 id="十四、Hive的数据模型-外部表"><a href="#十四、Hive的数据模型-外部表" class="headerlink" title="十四、Hive的数据模型-外部表"></a>十四、Hive的数据模型-外部表</h3><ul><li><p>指向已经在 HDFS 中存在的数据，可以创建 Partition</p></li><li><p>它和 内部表 在元数据的组织上是相同的，而实际数据的存储则有较大的差异</p></li><li><p>内部表 的创建过程和数据加载过程（这两个过程可以在同一个语句中完成），在加载数据的过程中，实际数据会被移动到数据仓库目录中；之后对数据对访问将会直接在数据仓库目录中完成。删除表时，表中的数据和元数据将会被同时删除</p></li><li><p>外部表 只有一个过程，加载数据和创建表同时完成，并不会移动到数据仓库目录中，只是与外部数据建立一个链接。当删除一个 外部表 时，仅删除该链接</p></li><li><p>外部表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE page_view</span><br><span class="line">( viewTime INT, </span><br><span class="line">  userid BIGINT,</span><br><span class="line">  page_url STRING, </span><br><span class="line"> referrer_url STRING, </span><br><span class="line">  ip STRING COMMENT &#x27;IP Address of the User&#x27;,</span><br><span class="line">  country STRING COMMENT &#x27;country of origination‘</span><br><span class="line">)</span><br><span class="line">    COMMENT &#x27;This is the staging page view table&#x27;</span><br><span class="line">    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;44&#x27; LINES TERMINATED BY &#x27;12&#x27;</span><br><span class="line">    STORED AS TEXTFILE</span><br><span class="line">    LOCATION &#x27;hdfs://centos:9000/user/data/staging/page_view&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>外部表的使用</p><ul><li><p>创建数据文件external_table.dat</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;create external table external_table1 (key string) ROW FORMAT DELIMITED </span><br><span class="line">                       FIELDS TERMINATED BY &#x27;\t&#x27; location &#x27;/home/external&#x27;;</span><br><span class="line">在HDFS创建目录/home/external</span><br><span class="line">#hadoop fs -put /home/external_table.dat /home/external</span><br></pre></td></tr></table></figure></li><li><p>加载数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INPATH &#x27;/home/external_table1.dat&#x27; INTO TABLE external_table1;</span><br></pre></td></tr></table></figure></li><li><p>查看数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from external_table</span><br><span class="line">select count(*) from external_table</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table external_table</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="十五、视图操作"><a href="#十五、视图操作" class="headerlink" title="十五、视图操作"></a>十五、视图操作</h3><ul><li><p>视图的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW v1 AS select * from t1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十六、表的操作"><a href="#十六、表的操作" class="headerlink" title="十六、表的操作"></a>十六、表的操作</h3><ul><li><p>表的修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table target_tab add columns (cols,string)</span><br></pre></td></tr></table></figure></li><li><p>表的删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table</span><br></pre></td></tr></table></figure></li></ul><h3 id="十七、导入数据"><a href="#十七、导入数据" class="headerlink" title="十七、导入数据"></a>十七、导入数据</h3><ul><li><p>当数据被加载至表中时，不会对数据进行任何转换。Load 操作只是将数据复制&#x2F;移动至 Hive 表对应的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA [LOCAL] INPATH &#x27;filepath&#x27; [OVERWRITE]   </span><br><span class="line">      INTO TABLE tablename    </span><br><span class="line">      [PARTITION (partcol1=val1, partcol2=val2 ...)]</span><br></pre></td></tr></table></figure></li><li><p>把一个Hive表导入到另一个已建Hive表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT OVERWRITE TABLE tablename [PARTITION (partcol1=val1, </span><br><span class="line">      partcol2=val2 ...)] select_statement FROM from_statement</span><br></pre></td></tr></table></figure></li><li><p>CTAS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name </span><br><span class="line">   (col_name data_type, ...)…</span><br><span class="line">   AS SELECT …</span><br></pre></td></tr></table></figure></li><li><p>例：create table new_external_test as select * from external_table1;</p></li></ul><h3 id="十八、查询（select）"><a href="#十八、查询（select）" class="headerlink" title="十八、查询（select）"></a>十八、查询（select）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT] select_expr, select_expr, ...</span><br><span class="line">   FROM table_reference </span><br><span class="line">   [WHERE where_condition] </span><br><span class="line">   [GROUP BY col_list] </span><br><span class="line">   [ CLUSTER BY col_list | [DISTRIBUTE BY col_list] [SORT BY col_list] | [ORDER BY col_list] ]</span><br><span class="line">   [LIMIT number]</span><br></pre></td></tr></table></figure><ul><li><p>注：DISTRIBUTE BY 指定分发器（Partitioner）,多Reducer可用</p></li><li><p>基于Partition的查询</p><ul><li><p>一般 SELECT 查询是全表扫描。但如果是分区表，查询就可以利用分区剪枝（input pruning）的特性，类似“分区索引“”，只扫描一个表中它关心的那一部分。Hive 当前的实现是，只有分区断言（Partitioned by）出现在离 FROM 子句最近的那个WHERE 子句中，才会启用分区剪枝。例如，如果 page_views 表（按天分区）使用 date 列分区，以下语句只会读取分区为‘2018-03-01’的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT page_views.*  FROM page_views  WHERE page_views.date &gt;= &#x27;2018-03-01&#x27; </span><br><span class="line">       AND page_views.date &lt;= &#x27;2018-03-01&#x27;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>LIMIT Clause</p><ul><li><p>Limit 可以限制查询的记录数。查询的结果是随机选择的。下面的查询语句从 t1 表中随机查询5条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 LIMIT 5</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Top N查询</p><ul><li><p>下面的查询语句查询销售记录最大的 5 个销售代表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET mapred.reduce.tasks = 1  </span><br><span class="line">    SELECT * FROM sales SORT BY amount DESC LIMIT 5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="十九、表连接"><a href="#十九、表连接" class="headerlink" title="十九、表连接"></a>十九、表连接</h3><ul><li><p>导入ac信息表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table acinfo (name string,acip string)  row format </span><br><span class="line">delimited fields terminated by &#x27;\t&#x27; stored as TEXTFILE;</span><br><span class="line">hive&gt; load data local inpath &#x27;/home/acinfo/ac.dat&#x27; into table acinfo; </span><br></pre></td></tr></table></figure></li><li><p>内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b.name,a.* from dim_ac a join acinfo b on (a.ac=b.acip) limit 10;</span><br></pre></td></tr></table></figure></li><li><p>左外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b.name,a.* from dim_ac a left outer join acinfo b on a.ac=b.acip limit 10;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术之ClickHouse</title>
      <link href="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/"/>
      <url>/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据技术之-ClickHouse"><a href="#大数据技术之-ClickHouse" class="headerlink" title="大数据技术之 ClickHouse"></a>大数据技术之 ClickHouse</h1><h1 id="第一部分-入门篇"><a href="#第一部分-入门篇" class="headerlink" title="第一部分 入门篇"></a>第一部分 入门篇</h1><h2 id="第-1-章-ClickHouse-入门"><a href="#第-1-章-ClickHouse-入门" class="headerlink" title="第 1 章 ClickHouse 入门"></a>第 1 章 ClickHouse 入门</h2><p>ClickHouse 是俄罗斯的 Yandex 于 2016 年开源的<strong>列式存储数据库</strong>（DBMS），使用 C++ 语言编写，主要用于<strong>在线分析处理查询（OLAP）</strong>，能够使用 SQL 查询实时生成分析数据报告。</p><h3 id="1-1-ClickHouse-的特点"><a href="#1-1-ClickHouse-的特点" class="headerlink" title="1.1 ClickHouse 的特点"></a>1.1 ClickHouse 的特点</h3><h4 id="1-1-1-列式存储"><a href="#1-1-1-列式存储" class="headerlink" title="1.1.1 列式存储"></a>1.1.1 列式存储</h4><p>以下面的表为例：</p><table><thead><tr><th>Id</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>18</td></tr><tr><td>2</td><td>李四</td><td>22</td></tr><tr><td>3</td><td>王五</td><td>34</td></tr></tbody></table><p><strong>1）采用行式存储时，数据在磁盘上的组织结构为：</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220906230720766.png" alt="image-20220906230720766"> </p><p>好处是想查某个人所有的属性时，可以通过一次磁盘查找加顺序读取就可以。但是当想查所有人的年龄时，需要不停的查找，或者全表扫描才行，遍历的很多数据都是不需要的。</p><p><strong>2）采用列式存储时，数据在磁盘上的组织结构为：</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220906231304721.png" alt="image-20220906231304721"> </p><p>这时想查所有人的年龄只需把年龄那一列拿出来就可以了</p><p><strong>3）列式储存的好处：</strong></p><ul><li>对于列的聚合，计数，求和等统计操作优于行式存储。</li><li>由于某一列的数据类型都是相同的，针对于数据存储更容易进行数据压缩，每一列选择更优的数据压缩算法，大大提高了数据的压缩比重。</li><li>由于数据压缩比更好，一方面节省了磁盘空间，另一方面对于 cache 也有了更大的发挥空间。</li></ul><h4 id="1-1-2-DBMS-的功能"><a href="#1-1-2-DBMS-的功能" class="headerlink" title="1.1.2 DBMS 的功能"></a>1.1.2 DBMS 的功能</h4><p>几乎覆盖了标准 SQL 的大部分语法，包括 DDL 和 DML，以及配套的各种函数，用户管理及权限管理，数据的备份与恢复。 </p><h4 id="1-1-3-多样化引擎"><a href="#1-1-3-多样化引擎" class="headerlink" title="1.1.3 多样化引擎"></a>1.1.3 多样化引擎</h4><p>ClickHouse 和 MySQL 类似，把表级的存储引擎插件化，根据表的不同需求可以设定不同的存储引擎。目前包括合并树、日志、接口和其他四大类 20 多种引擎。</p><h4 id="1-1-4-高吞吐写入能力"><a href="#1-1-4-高吞吐写入能力" class="headerlink" title="1.1.4 高吞吐写入能力"></a>1.1.4 高吞吐写入能力</h4><p>ClickHouse 采用类 <strong>LSM Tree</strong> 的结构，数据写入后定期在后台 Compaction。通过类 LSM tree 的结构，ClickHouse 在数据导入时全部是顺序 append 写，写入后数据段不可更改，在后台 compaction 时也是多个段 merge sort 后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力，即便在 HDD 上也有着优异的写入性能。</p><p>官方公开 benchmark 测试显示能够达到 50MB-200MB&#x2F;s 的写入吞吐能力，按照每行100Byte 估算，大约相当于 50W-200W 条&#x2F;s 的写入速度。</p><h4 id="1-1-5-数据分区与线程级并行"><a href="#1-1-5-数据分区与线程级并行" class="headerlink" title="1.1.5 数据分区与线程级并行"></a>1.1.5 数据分区与线程级并行</h4><p>ClickHouse 将数据划分为多个 partition，每个 partition 再进一步划分为多个 index granularity(索引粒度)，然后通过多个 CPU 核心分别处理其中的一部分来实现并行数据处理。在这种设计下，<strong>单条 Query 就能利用整机所有 CPU。</strong>极致的并行处理能力，极大的降低了查询延时。</p><p>所以，ClickHouse 即使对于大量数据的查询也能够化整为零平行处理。但是有一个弊端就是对于单条查询使用较多 cpu，就不利于同时并发多条查询。所以对于高 qps 的查询业务，ClickHouse 并不是强项。</p><h4 id="1-1-6-性能对比"><a href="#1-1-6-性能对比" class="headerlink" title="1.1.6 性能对比"></a>1.1.6 性能对比</h4><p><strong>1）单表查询</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220906232235037.png" alt="image-20220906232235037"> </p><p><strong>2）关联查询</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220906232310852.png" alt="image-20220906232310852"> </p><p>结论: ClickHouse 像很多 OLAP 数据库一样，单表查询速度优于关联查询，而且 ClickHouse 的两者差距更为明显。</p><h2 id="第-2-章-ClickHouse-的安装"><a href="#第-2-章-ClickHouse-的安装" class="headerlink" title="第 2 章 ClickHouse 的安装"></a>第 2 章 ClickHouse 的安装</h2><h3 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h3><h4 id="2-1-1-确定防火墙处于关闭状态"><a href="#2-1-1-确定防火墙处于关闭状态" class="headerlink" title="2.1.1 确定防火墙处于关闭状态"></a>2.1.1 确定防火墙处于关闭状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><blockquote><p>注意：生产环境不建议关闭</p></blockquote><h4 id="2-1-2-CentOS-取消打开文件数限制"><a href="#2-1-2-CentOS-取消打开文件数限制" class="headerlink" title="2.1.2 CentOS 取消打开文件数限制"></a>2.1.2 CentOS 取消打开文件数限制</h4><p>（1）查看文件数限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -a</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220906234741765.png" alt="image-20220906234741765"> </p><p>（2）在 &#x2F;etc&#x2F;security&#x2F;limits.conf 文件的末尾加入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soft指当前数值，hard指最大数值</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br></pre></td></tr></table></figure><p>（3）在 &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf 文件的末尾加入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br></pre></td></tr></table></figure><p>（4）在 &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nofile.conf 文件的末尾加入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure><p>（5）重新登录即可生效</p><h4 id="2-1-3-安装依赖"><a href="#2-1-3-安装依赖" class="headerlink" title="2.1.3 安装依赖"></a>2.1.3 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y libtool</span><br><span class="line">sudo yum install -y *unixODBC*</span><br></pre></td></tr></table></figure><h4 id="2-1-4-CentOS-取消-SELINUX"><a href="#2-1-4-CentOS-取消-SELINUX" class="headerlink" title="2.1.4 CentOS 取消 SELINUX"></a>2.1.4 CentOS 取消 SELINUX</h4><p>（1）修改&#x2F;etc&#x2F;selinux&#x2F;config 中的 SELINUX&#x3D;disabled</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>（2）临时关闭 SELINUX</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看SELINUX状态</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭SELINUX</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="2-2-单机安装"><a href="#2-2-单机安装" class="headerlink" title="2.2 单机安装"></a>2.2 单机安装</h3><p>官方网址：<a href="https://clickhouse.com/">https://clickhouse.com/</a></p><p>下载地址：<a href="https://packages.clickhouse.com/rpm/stable/">https://packages.clickhouse.com/rpm/stable/</a></p><h4 id="2-2-1-在-x2F-opt-x2F-software-下创建-clickhouse-目录"><a href="#2-2-1-在-x2F-opt-x2F-software-下创建-clickhouse-目录" class="headerlink" title="2.2.1 在 &#x2F;opt&#x2F;software 下创建 clickhouse 目录"></a>2.2.1 在 &#x2F;opt&#x2F;software 下创建 clickhouse 目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/</span><br><span class="line">mkdir clickhouse</span><br></pre></td></tr></table></figure><h4 id="2-2-2-将-ClickHouse-安装文件上传到-clickhouse-目录下"><a href="#2-2-2-将-ClickHouse-安装文件上传到-clickhouse-目录下" class="headerlink" title="2.2.2 将 ClickHouse 安装文件上传到 clickhouse 目录下"></a>2.2.2 将 ClickHouse 安装文件上传到 clickhouse 目录下</h4><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220907010745802.png" alt="image-20220907010745802"> </p><h4 id="2-2-3-安装"><a href="#2-2-3-安装" class="headerlink" title="2.2.3 安装"></a>2.2.3 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">sudo rpm -ivh *.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看安装情况</span></span><br><span class="line">sudo rpm -qa|grep clickhouse</span><br></pre></td></tr></table></figure><h4 id="2-2-4-修改配置文件"><a href="#2-2-4-修改配置文件" class="headerlink" title="2.2.4 修改配置文件"></a>2.2.4 修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure><p>（1）把 <strong><listen_host>::</listen_host></strong> 的注释打开，这样的话才能让 ClickHouse 被除本机以外的服务器访问</p><blockquote><p>注意：生产环境可以配置指定的IP进行访问</p></blockquote><p>（2）默认的路径配置</p><p>数据文件路径：<code>&lt;path&gt;/&lt;/path&gt;</code></p><p>日志文件路径：<code>&lt;log&gt;/var/log/clickhouse-server/clickhouse-server.log&lt;/log&gt;</code></p><h4 id="2-2-5-启动-Server"><a href="#2-2-5-启动-Server" class="headerlink" title="2.2.5 启动 Server"></a>2.2.5 启动 Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start clickhouse-server</span><br></pre></td></tr></table></figure><h4 id="2-2-6-关闭开机自启（可选）"><a href="#2-2-6-关闭开机自启（可选）" class="headerlink" title="2.2.6 关闭开机自启（可选）"></a>2.2.6 关闭开机自启（可选）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable clickhouse-server</span><br></pre></td></tr></table></figure><h4 id="2-2-7-使用-client-连接-server"><a href="#2-2-7-使用-client-连接-server" class="headerlink" title="2.2.7 使用 client 连接 server"></a><strong>2.2.7</strong> <strong>使用</strong> <strong>client</strong> <strong>连接</strong> <strong>server</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client -m [--password]</span><br></pre></td></tr></table></figure><h2 id="第-3-章-数据类型"><a href="#第-3-章-数据类型" class="headerlink" title="第 3 章 数据类型"></a><strong>第</strong> <strong>3</strong> <strong>章 数据类型</strong></h2><h3 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1 整型"></a><strong>3.1</strong> <strong>整型</strong></h3><p>固定长度的整型，包括有符号整型或无符号整型。</p><p>整型范围（-2n-1~2n-1-1）：</p><p>Int8 - [-128 : 127]</p><p>Int16 - [-32768 : 32767]</p><p>Int32 - [-2147483648 : 2147483647]</p><p>Int64 - [-9223372036854775808 : 9223372036854775807]</p><p>无符号整型范围（0~2n-1）：</p><p>UInt8 - [0 : 255]</p><p>UInt16 - [0 : 65535]</p><p>UInt32 - [0 : 4294967295]</p><p>UInt64 - [0 : 18446744073709551615]</p><h3 id="3-2-浮点型"><a href="#3-2-浮点型" class="headerlink" title="3.2 浮点型"></a><strong>3.2</strong> <strong>浮点型</strong></h3><p>Float32 - float</p><p>Float64 – double</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908212753988.png" alt="image-20220908212753988"> </p><blockquote><p>注意：浮点型在进行计算时可能会引起四舍五入的误差。</p></blockquote><h3 id="3-3-布尔型"><a href="#3-3-布尔型" class="headerlink" title="3.3 布尔型"></a><strong>3.3</strong> <strong>布尔型</strong></h3><p>没有单独的类型来存储布尔值。可以使用 UInt8 类型，取值限制为 0 或 1。</p><h3 id="3-4-Decimal-型"><a href="#3-4-Decimal-型" class="headerlink" title="3.4 Decimal 型"></a><strong>3.4 Decimal</strong> <strong>型</strong></h3><p>有符号的浮点数，可在加、减和乘法运算过程中保持精度。对于除法，最低有效数字会被丢弃（不舍入）。</p><p>有三种声明：</p><ul><li>Decimal32(s)，相当于 Decimal(9-s, s)，有效位数为 1~9</li><li>Decimal64(s)，相当于 Decimal(18-s, s)，有效位数为 1~18</li><li>Decimal128(s)，相当于 Decimal(38-s, s)，有效位数为 1~38</li></ul><p><strong>s 标识小数位</strong></p><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a><strong>3.5</strong> <strong>字符串</strong></h3><p><strong>1）String</strong></p><p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。</p><p><strong>2）FixedString(N)</strong></p><p>固定长度 N 的字符串，N 必须是严格的正自然数。当服务端读取长度小于 N 的字符串时候，通过在字符串末尾添加空字节来达到 N 字节长度。 当服务端读取长度大于 N 的字符串时候，将返回错误消息。</p><p>与 String 相比，极少会使用 FixedString，因为使用起来不是很方便。</p><h3 id="3-6-枚举类型"><a href="#3-6-枚举类型" class="headerlink" title="3.6 枚举类型"></a><strong>3.6</strong> <strong>枚举类型</strong></h3><p>包括 Enum8 和 Enum16 类型。Enum 保存 ‘string’&#x3D; integer 的对应关系。</p><p>Enum8 用 ‘String’&#x3D; Int8 对描述。</p><p>Enum16 用 ‘String’&#x3D; Int16 对描述。</p><p><strong>1）用法演示</strong></p><p>创建一个带有一个枚举 Enum8(‘hello’ &#x3D; 1, ‘world’ &#x3D; 2) 类型的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_enum</span><br><span class="line">(</span><br><span class="line">    `x` Enum8(<span class="string">&#x27;hello&#x27;</span> <span class="operator">=</span> <span class="number">1</span>, <span class="string">&#x27;world&#x27;</span> <span class="operator">=</span> <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> TinyLog;</span><br></pre></td></tr></table></figure><p><strong>2）这个 x 列只能存储类型定义中列出的值：’hello’或’world’</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_enum <span class="keyword">VALUES</span> (<span class="string">&#x27;hello&#x27;</span>), (<span class="string">&#x27;world&#x27;</span>), (<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908213812152.png" alt="image-20220908213812152"> </p><p><strong>3）如果尝试保存任何其他值，ClickHouse 抛出异常</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_enum <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908214102455.png" alt="image-20220908214102455"> </p><p><strong>4）如果需要看到对应行的数值，则必须将 Enum 值转换为整数类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(x, <span class="string">&#x27;Int8&#x27;</span>) <span class="keyword">FROM</span> t_enum;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908214245932.png" alt="image-20220908214245932"> </p><h3 id="3-7-时间类型"><a href="#3-7-时间类型" class="headerlink" title="3.7 时间类型"></a><strong>3.7</strong> <strong>时间类型</strong></h3><p>目前 ClickHouse 有三种时间类型</p><ul><li>Date 接受<strong>年-月-日</strong>的字符串比如 ‘2019-12-16’</li><li>Datetime 接受<strong>年-月-日 时:分:秒</strong>的字符串比如 ‘2019-12-16 20:50:10’ </li><li>Datetime64 接受<strong>年-月-日 时:分:秒.亚秒</strong>的字符串比如 ‘2019-12-16 20:50:10.66’</li></ul><p>日期类型，用两个字节存储，表示从 1970-01-01 (无符号) 到当前的日期值。</p><h3 id="3-8-数组"><a href="#3-8-数组" class="headerlink" title="3.8 数组"></a><strong>3.8</strong> <strong>数组</strong></h3><p><strong>Array(T)：</strong>由 T 类型元素组成的数组。</p><p>T 可以是任意类型，包含数组类型。但不推荐使用多维数组，ClickHouse 对多维数组的支持有限。例如，不能在 MergeTree 表中存储多维数组。</p><p>（1）创建数组方式 1，使用 array 函数</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908214714506.png" alt="image-20220908214714506"> </p><p>（2）创建数组方式 2：使用方括号</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908214753599.png" alt="image-20220908214753599"> </p><h2 id="第-4-章-表引擎"><a href="#第-4-章-表引擎" class="headerlink" title="第 4 章 表引擎"></a><strong>第</strong> <strong>4</strong> <strong>章 表引擎</strong></h2><h3 id="4-1-表引擎的使用"><a href="#4-1-表引擎的使用" class="headerlink" title="4.1 表引擎的使用"></a><strong>4.1</strong> <strong>表引擎的使用</strong></h3><p>表引擎是 ClickHouse 的一大特色。可以说，表引擎决定了如何存储表的数据。包括：</p><ul><li>数据的存储方式和位置，写到哪里以及从哪里读取数据。</li><li>支持哪些查询以及如何支持。</li><li>并发数据访问。</li><li>索引的使用（如果存在）。</li><li>是否可以执行多线程请求。</li><li>数据复制参数。</li></ul><p>表引擎的使用方式就是必须显式在创建表时定义该表使用的引擎，以及引擎使用的相关参数。</p><blockquote><p>特别注意：引擎的名称大小写敏感</p></blockquote><h3 id="4-2-TinyLog"><a href="#4-2-TinyLog" class="headerlink" title="4.2 TinyLog"></a><strong>4.2 TinyLog</strong></h3><p>以列文件的形式保存在磁盘上，不支持索引，没有并发控制。一般保存少量数据的小表，生产环境上作用有限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_tinylog</span><br><span class="line">(</span><br><span class="line">    `id` String,</span><br><span class="line">    `name` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> TinyLog;</span><br></pre></td></tr></table></figure><h3 id="4-3-Memory"><a href="#4-3-Memory" class="headerlink" title="4.3 Memory"></a><strong>4.3 Memory</strong></h3><p>内存引擎，数据以未压缩的原始形式直接保存在内存当中，服务器重启数据就会消失。读写操作不会相互阻塞，不支持索引。简单查询下有非常非常高的性能表现（<strong>超过 10G&#x2F;s</strong>）。</p><h3 id="4-4-MergeTree"><a href="#4-4-MergeTree" class="headerlink" title="4.4 MergeTree"></a><strong>4.4 MergeTree</strong></h3><p>ClickHouse 中<strong>最强大的表引擎</strong>当属 MergeTree（合并树）引擎及该系列（*MergeTree）中的其他引擎，<strong>支持索引和分区</strong>，地位可以相当于 innodb 之于 Mysql。</p><p><strong>1）建表语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_mt</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p><strong>2）插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_mt <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>) ,</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 11:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">12000.00</span>,<span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>MergeTree 其实还有很多参数(绝大多数用默认值即可)，但是这三个参数是更加重要的，也涉及了关于 MergeTree 的很多概念。</p><h4 id="4-4-1-partition-by-分区-可选"><a href="#4-4-1-partition-by-分区-可选" class="headerlink" title="4.4.1 partition by 分区(可选)"></a><strong>4.4.1 partition by</strong> <strong>分区(可选)</strong></h4><p><strong>1）作用</strong></p><p>分区的目的主要是降低扫描的范围，优化查询速度</p><p><strong>2）如果不填</strong></p><p>只会使用一个分区。</p><p><strong>3）分区目录</strong></p><p>MergeTree 是以列文件+索引文件+表定义文件组成的，但是如果设定了分区那么这些文件就会保存到不同的分区目录中。</p><p>分区目录文件命名规则：PartitionId_MinBlockNum_MaxBlockNum_Level（分区值_最小分区_最大分区块编号_合并层级）</p><ul><li>PartitionId：<ul><li>数据分区 ID 生成规则</li><li>数据分区规则由分区 ID 决定，分区ID由 PARTITION BY 分区键决定。根据分区键字段类型，ID生成规则可以分为：<ul><li>未定义分区键：没有定义 PARTITION BY ，默认生成一个目录名为 all 的数据分区，所有数据均存放在 all 目录下。</li><li>整型分区键：分区键为整型，那么直接用该整型值的字符串形式作为分区ID。</li><li>日期类分区键：分区键为日期类型，或者可以转化成日期类型。</li><li>其他类型分区键：String、Float 类型等，通过128位的 Hash 算法取其 Hash 值作为分区ID。</li></ul></li></ul></li><li>MinBlockNum：最小分区块编号，自增类型，从1开始向上递增。每产生一个新的目录分区就向上递增一个数字。</li><li>MaxBlockNum：最大分区块编号，新创建的分区 MinBlockNum 等于 MaxBlockNum 的编号。</li><li>Level：合并的层级，被合并的次数。合并次数越多，层级值越大。</li></ul><p><strong>4）并行</strong></p><p>分区后，面对涉及跨分区的查询统计，ClickHouse 会以分区为单位并行处理。</p><p><strong>5）数据写入与分区合并</strong></p><p>任何一个批次的数据写入都会产生一个临时分区，不会纳入任何一个已有的分区。写入后的某个时刻（大概 10-15 分钟后），ClickHouse 会自动执行合并操作（等不及也可以手动通过 optimize 执行），把临时分区的数据，合并到已有分区中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> xxxx <span class="keyword">FINAL</span>;</span><br><span class="line"># 只针对某一个分区做合并操作</span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> xxxx <span class="keyword">PARTITION</span> <span class="string">&#x27;yyyy&#x27;</span> <span class="keyword">FINAL</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-primary-key-主键-可选"><a href="#4-4-2-primary-key-主键-可选" class="headerlink" title="4.4.2 primary key 主键(可选)"></a>4.4.2 primary key 主键(可选)</h4><p>ClickHouse 中的主键，和其他数据库不太一样，<strong>它只提供了数据的一级索引，但是却不是唯一约束。</strong>这就意味着是可以存在相同 primary key 的数据的。</p><p>主键的设定主要依据是查询语句中的 where 条件。</p><p>根据条件通过对主键进行某种形式的二分查找，能够定位到对应的 index granularity，避免了全表扫描。</p><p>index granularity：直接翻译的话就是索引粒度，指在<strong>稀疏索引</strong>中两个相邻索引对应数据的间隔。ClickHouse 中的 MergeTree 默认是 8192。官方不建议修改这个值，除非该列存在大量重复值，比如在一个分区中几万行才有一个不同数据。</p><p><strong>稀疏索引：</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220908224603867.png" alt="image-20220908224603867"> </p><p>稀疏索引的好处就是可以用很少的索引数据，定位更多的数据，代价就是只能定位到索引粒度的第一行，然后再进行进行一点扫描。</p><h4 id="4-4-3-order-by（必选）"><a href="#4-4-3-order-by（必选）" class="headerlink" title="4.4.3 order by（必选）"></a><strong>4.4.3 order by（必选）</strong></h4><p>order by 设定了<strong>分区内</strong>的数据按照哪些字段顺序进行有序保存。</p><p>order by 是 MergeTree 中唯一一个必填项，甚至比 primary key 还重要，因为当用户不设置主键的情况，很多处理会依照 order by 的字段进行处理。</p><p><strong>要求：主键必须是 order by 字段的前缀字段。</strong></p><p>比如 order by 字段是 (id, sku_id) 那么主键必须是 id 或者(id, sku_id)</p><h4 id="4-4-4-二级索引"><a href="#4-4-4-二级索引" class="headerlink" title="4.4.4 二级索引"></a><strong>4.4.4</strong> <strong>二级索引</strong></h4><p>目前在 ClickHouse 的官网上二级索引的功能在 <strong>v20.1.2.4</strong> 之前是被标注为实验性的，在这个版本之后默认是开启的。 </p><p><strong>1）老版本使用二级索引前需要增加设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set allow_experimental_data_skipping_indices=1;</span><br></pre></td></tr></table></figure><p><strong>2）创建测试表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_mt2</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime,</span><br><span class="line">    INDEX a total_amount TYPE minmax GRANULARITY <span class="number">5</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>其中 GRANULARITY N 是设定二级索引对于一级索引粒度的粒度。</p><p><strong>3）插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_mt2 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>, <span class="string">&#x27;sku_001&#x27;</span>, <span class="number">1000.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>) ,</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 11:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_004&#x27;</span>, <span class="number">2500.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">12000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">600.00</span>, <span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>4）对比效果</strong></p><p>使用下面语句进行测试，可以看出二级索引能够为非主键字段的查询发挥作用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --send_logs_level=trace &lt;&lt;&lt; &#x27;select * from t_order_mt2 where total_amount &gt; toDecimal32(900., 2)&#x27;;</span><br></pre></td></tr></table></figure><h4 id="4-4-5-数据-TTL"><a href="#4-4-5-数据-TTL" class="headerlink" title="4.4.5 数据 TTL"></a>4.4.5 数据 TTL</h4><p>TTL 即 Time To Live，MergeTree 提供了可以管理数据表或者列的<strong>生命周期</strong>的功能。</p><p><strong>1）列级别 TTL</strong></p><p>（1）创建测试表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_mt3</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>) TTL create_time <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">SECOND</span>,</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>（2）插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_mt3 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">106</span>, <span class="string">&#x27;sku_001&#x27;</span>, <span class="number">1000.00</span>, NOW()),</span><br><span class="line">(<span class="number">107</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, NOW()),</span><br><span class="line">(<span class="number">110</span>, <span class="string">&#x27;sku_003&#x27;</span>, <span class="number">600.00</span>, NOW() <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">SECOND</span>);</span><br></pre></td></tr></table></figure><p>（3）<strong>手动合并</strong>，查看效果，到期后，指定的字段数据将变为默认值</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220909002325459.png" alt="image-20220909002325459"> </p><blockquote><p>官方文档：When the values in the column expire, ClickHouse replaces them with the default values for the column data type. If all the column values in the data part expire, ClickHouse deletes this column from the data part in a filesystem.</p><p>但是实际测试下来，每个分区的最新的一条或多条数据不会被删除，原因未知。</p></blockquote><p><strong>2）表级 TTL</strong></p><p>下面的这条语句是数据会在 create_time 之后 10 秒丢失</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_order_mt3 MODIFY TTL create_time <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">SECOND</span>;</span><br></pre></td></tr></table></figure><p>涉及判断的字段必须是 Date 或者 Datetime 类型，推荐使用分区的日期字段。</p><p>能够使用的时间周期：</p><ul><li>SECOND</li><li>MINUTE</li><li>HOUR</li><li>DAY</li><li>WEEK</li><li>MONTH</li><li>QUARTER</li><li>YEAR</li></ul><h3 id="4-5-ReplacingMergeTree"><a href="#4-5-ReplacingMergeTree" class="headerlink" title="4.5 ReplacingMergeTree"></a>4.5 ReplacingMergeTree</h3><p>ReplacingMergeTree 是 MergeTree 的一个变种，它存储特性完全继承 MergeTree，只是多了一个去重的功能。 尽管 MergeTree 可以设置主键，但是 primary key 其实没有唯一约束的功能。如果你想处理掉重复的数据，可以借助这个 ReplacingMergeTree。</p><p><strong>1）去重时机</strong></p><p><strong>数据的去重只会在合并的过程中出现。</strong>合并会在未知的时间在后台进行，所以你无法预先作出计划。有一些数据可能仍未被处理。</p><p><strong>2）去重范围</strong></p><p><strong>如果表经过了分区，去重只会在分区内部进行去重，不能执行跨分区的去重。</strong></p><p>所以 ReplacingMergeTree 能力有限， ReplacingMergeTree 适用于在后台清除重复的数据以节省空间，但是它不保证没有重复的数据出现。</p><p><strong>3）案例演示</strong></p><p>（1）创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_rmt</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(create_time)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p><strong>ReplacingMergeTree() 填入的参数为版本字段，重复数据保留版本字段值最大的。</strong></p><p><strong>如果不填版本字段，默认按照插入顺序保留最后一条。</strong> </p><p>（2）向表中插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_rmt <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>, <span class="string">&#x27;sku_001&#x27;</span>, <span class="number">1000.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 11:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_004&#x27;</span>, <span class="number">2500.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">12000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">600.00</span>, <span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（3）重复再插入一次，执行第一次查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order_rmt;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220909003504730.png" alt="image-20220909003504730"> </p><p>（4）手动合并</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> t_order_rmt <span class="keyword">FINAL</span>;</span><br></pre></td></tr></table></figure><p>（5）再执行一次查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order_rmt;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220909003530398.png" alt="image-20220909003530398"> </p><p><strong>4）通过测试得到结论</strong></p><ul><li>实际上是使用 order by 字段作为唯一键</li><li>去重不能跨分区</li><li>只有同一批插入（新版本）或合并分区时才会进行去重</li><li>认定重复的数据保留，取版本字段值最大的</li><li>如果版本字段相同则按插入顺序保留最后一笔</li></ul><h3 id="4-6-SummingMergeTree"><a href="#4-6-SummingMergeTree" class="headerlink" title="4.6 SummingMergeTree"></a><strong>4.6 SummingMergeTree</strong></h3><p>对于不查询明细，只关心以维度进行汇总聚合结果的场景。如果只使用普通的MergeTree的话，无论是存储空间的开销，还是查询时临时聚合的开销都比较大。</p><p>ClickHouse 为了这种场景，提供了一种能够“预聚合”的引擎 SummingMergeTree</p><p><strong>1）案例演示</strong></p><p>（1）创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_smt</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree(total_amount)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>（2）插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_smt <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>, <span class="string">&#x27;sku_001&#x27;</span>, <span class="number">1000.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 11:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_004&#x27;</span>, <span class="number">2500.00</span>, <span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">2000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">12000.00</span>, <span class="string">&#x27;2020-06-01 13:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;sku_002&#x27;</span>, <span class="number">600.00</span>, <span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（3）重复再插入一次，执行第一次查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order_smt;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220909004038208.png" alt="image-20220909004038208">  </p><p>（4）手动合并</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> t_order_smt <span class="keyword">FINAL</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220909004121096.png" alt="image-20220909004121096"> </p><p><strong>2）通过结果可以得到以下结论</strong></p><ul><li>以 SummingMergeTree（）中指定的列作为汇总数据列 </li><li>可以填写多列必须数字列，如果不填，以所有非维度列且为数字列的字段为汇总数据列</li><li>以 order by 的列为准，作为维度列</li><li>其他的列按插入顺序保留第一行</li><li>不在一个分区的数据不会被聚合</li><li>只有在同一批次插入（新版本）或分片合并时才会进行聚合</li></ul><p><strong>3）开发建议</strong></p><p>设计聚合表的话，唯一键值、流水号可以去掉，所有字段全部是维度、度量或者时间戳。</p><p><strong>4）问题</strong></p><p>能不能直接执行以下 SQL 得到汇总值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> total_amount <span class="keyword">FROM</span> XXX <span class="keyword">WHERE</span> province_name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">AND</span> create_date <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>不行，<strong>可能会包含一些还没来得及聚合的临时明细</strong></p><p>如果要是获取汇总值，还是需要使用 sum 进行聚合，这样效率会有一定的提高，但本身 ClickHouse 是列式存储的，效率提升有限，不会特别明显。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(total_amount) <span class="keyword">FROM</span> XXX <span class="keyword">WHERE</span> province_name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">AND</span> create_date <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第-5-章-SQL-操作"><a href="#第-5-章-SQL-操作" class="headerlink" title="第 5 章 SQL 操作"></a><strong>第</strong> <strong>5</strong> <strong>章</strong> <strong>SQL</strong> <strong>操作</strong></h2><p>基本上来说传统关系型数据库（以 MySQL 为例）的 SQL 语句，ClickHouse 基本都支持，这里只介绍 ClickHouse 与标准 SQL（MySQL）不一致的地方。</p><h3 id="5-1-Insert"><a href="#5-1-Insert" class="headerlink" title="5.1 Insert"></a><strong>5.1 Insert</strong></h3><p>与标准 SQL（MySQL）基本一致</p><p>（1）标准</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [table_name] <span class="keyword">VALUES</span> (...), (...)</span><br></pre></td></tr></table></figure><p>（2）从表到表的插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [table_name] <span class="keyword">SELECT</span> a,b,c <span class="keyword">FROM</span> [table_name_2]</span><br></pre></td></tr></table></figure><h3 id="5-2-Update-和-Delete"><a href="#5-2-Update-和-Delete" class="headerlink" title="5.2 Update 和 Delete"></a><strong>5.2 Update</strong> <strong>和</strong> <strong>Delete</strong></h3><p>ClickHouse 提供了 Delete 和 Update 的能力，这类操作被称为 Mutation 查询，它可以看做 Alter 的一种。</p><p>虽然可以实现修改和删除，但是和一般的 OLTP 数据库不一样，<strong>Mutation</strong> <strong>语句是一种很“重”的操作，而且不支持事务。</strong></p><p>“重”的原因主要是每次修改或者删除都会导致放弃目标数据的原有分区，重建新分区。所以尽量做批量的变更，不要进行频繁小数据的操作。</p><p>（1）删除操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_order_smt <span class="keyword">DELETE</span> <span class="keyword">WHERE</span> sku_id <span class="operator">=</span> <span class="string">&#x27;sku_001&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（2）修改操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_order_smt <span class="keyword">UPDATE</span> total_amount <span class="operator">=</span> toDecimal32(<span class="number">2000.00</span>, <span class="number">2</span>) <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">102</span>;</span><br></pre></td></tr></table></figure><p>由于操作比较“重”，所以 Mutation 语句分两步执行，同步执行的部分其实只是进行新增数据新增分区和并把旧分区打上逻辑上的失效标记。直到触发分区合并的时候，才会删除旧数据释放磁盘空间，一般不会开放这样的功能给用户，由管理员完成。</p><p><strong>问题：如何实现高性能 update 和 delete ？</strong></p><p>回答：在创建表时，添加两个标记字段，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> A</span><br><span class="line">(</span><br><span class="line">a xxx,</span><br><span class="line">    b xxx,</span><br><span class="line">    c xxx,</span><br><span class="line">    _sign UInt8,</span><br><span class="line">    _version UInt32</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>那么，对于更新操作，则相当于是插入一条新的数据，此时 _version + 1，查询的时候加上一个过滤条件（WHERE  _version最大）进行查询。</p><p>对于删除操作，通过 _sign（0表示未删除，1表示已删除），同时 _version + 1，查询的时候加上一个过滤条件（WHERE _sign &#x3D; 0 AND _version最大）进行查询。</p><p><strong>那么如果时间久了，数据膨胀了怎么办？</strong>可以提供类似合并的机制，定期把过期数据进行清除。</p><h3 id="5-3-查询操作"><a href="#5-3-查询操作" class="headerlink" title="5.3 查询操作"></a><strong>5.3</strong> <strong>查询操作</strong></h3><p>ClickHouse 基本上与标准 SQL 差别不大</p><ul><li>支持子查询</li><li>支持 CTE(Common Table Expression 公用表表达式 with 子句) </li><li>支持各种 JOIN，但是 JOIN 操作无法使用缓存，所以即使是两次相同的 JOIN 语句，ClickHouse 也会视为两条新 SQL</li><li>支持窗口函数</li><li>支持自定义函数</li><li>GROUP BY 操作增加了 with rollup\with cube\with total 用来计算小计和总计。</li></ul><p>（1）插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空数据</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_order_mt <span class="keyword">DELETE</span> <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_mt <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">101</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">103</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">104</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">105</span>,<span class="string">&#x27;sku_003&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">106</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-04 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">107</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-04 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">108</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-04 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">109</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-04 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">110</span>,<span class="string">&#x27;sku_003&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（2）with rollup：<strong>从右至左去掉维度进行小计</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, sku_id, <span class="built_in">sum</span>(total_amount) <span class="keyword">FROM</span> t_order_mt <span class="keyword">GROUP</span> <span class="keyword">BY</span> id, sku_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912165949176.png" alt="image-20220912165949176"> </p><p>（3）with cube : 从右至左去掉维度进行小计，再从左至右去掉维度进行小计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, sku_id, <span class="built_in">sum</span>(total_amount) <span class="keyword">FROM</span> t_order_mt <span class="keyword">GROUP</span> <span class="keyword">BY</span> id, sku_id <span class="keyword">WITH</span> <span class="keyword">CUBE</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912170136379.png" alt="image-20220912170136379"> </p><p>（4）with totals: 只计算合计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, sku_id, <span class="built_in">sum</span>(total_amount) <span class="keyword">FROM</span> t_order_mt <span class="keyword">GROUP</span> <span class="keyword">BY</span> id, sku_id <span class="keyword">WITH</span> TOTALS;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912170328807.png" alt="image-20220912170328807"> </p><h3 id="5-4-alter-操作"><a href="#5-4-alter-操作" class="headerlink" title="5.4 alter 操作"></a><strong>5.4 alter</strong> <strong>操作</strong></h3><p>同 MySQL 的修改字段基本一致</p><p><strong>1）新增字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> newcolname String AFTER col1;</span><br></pre></td></tr></table></figure><p><strong>2）修改字段类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName MODIFY <span class="keyword">COLUMN</span> newcolname String;</span><br></pre></td></tr></table></figure><p><strong>3）删除字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> newcolname;</span><br></pre></td></tr></table></figure><h3 id="5-5-导出数据"><a href="#5-5-导出数据" class="headerlink" title="5.5 导出数据"></a><strong>5.5 导出数据</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">-</span>client <span class="comment">--query &quot;select * from t_order_mt where create_time=&#x27;2020-06-01 12:00:00&#x27;&quot; --format CSVWithNames&gt; /opt/module/data/rs1.csv</span></span><br></pre></td></tr></table></figure><p>更多支持格式参考：<a href="https://clickhouse.com/docs/en/interfaces/formats/">https://clickhouse.com/docs/en/interfaces/formats/</a></p><h2 id="第-6-章-副本"><a href="#第-6-章-副本" class="headerlink" title="第 6 章 副本"></a><strong>第</strong> <strong>6</strong> <strong>章 副本</strong></h2><p>副本的目的主要是保障数据的高可用性，即使一台 ClickHouse 节点宕机，那么也可以从其他服务器获得相同的数据。</p><h3 id="6-1-副本写入流程"><a href="#6-1-副本写入流程" class="headerlink" title="6.1 副本写入流程"></a><strong>6.1</strong> <strong>副本写入流程</strong></h3><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912192635581.png" alt="image-20220912192635581"> </p><h3 id="6-2-配置步骤"><a href="#6-2-配置步骤" class="headerlink" title="6.2 配置步骤"></a><strong>6.2</strong> <strong>配置步骤</strong></h3><p>（1）启动 zookeeper 集群</p><p>（2）在 hadoop102 的 &#x2F;etc&#x2F;clickhouse-server&#x2F;config.d 目录下创建一个名为 metrika.xml 的配置文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：也可以不创建外部文件，直接在 config.xml 中指定 <code>&lt;zookeeper&gt;</code></p></blockquote><blockquote><p>提示：这里用三台机器作为集群，分别为hadoop102 、hadoop103 和 hadoop104</p></blockquote><p>（3）同步到 hadoop103 和 hadoop104 上</p><p>（4）在 hadoop102 的&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml 中增加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span> <span class="attr">incl</span>=<span class="string">&quot;zookeeper-servers&quot;</span> <span class="attr">optional</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include_from</span>&gt;</span>/etc/clickhouse-server/config.d/metrika.xml<span class="tag">&lt;/<span class="name">include_from</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912204716940.png" alt="image-20220912204716940"> </p><p>（5）同步到 hadoop103 和 hadoop104 上，然后分别在 hadoop102、hadoop103 和 hadoop104 上重启 ClickHouse 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo clickhouse restart</span><br></pre></td></tr></table></figure><p>（6）在 hadoop102 和 hadoop103 上分别建表</p><p><strong>副本只能同步数据，不能同步表结构，所以我们需要在每台机器上自己手动建表</strong></p><p>① hadoop102</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_rep2</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/table/01/t_order_rep&#x27;</span>, <span class="string">&#x27;rep_102&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>② hadoop103</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_rep2</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/table/01/t_order_rep&#x27;</span>, <span class="string">&#x27;rep_103&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>③ hadoop104</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_rep2</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/table/01/t_order_rep&#x27;</span>, <span class="string">&#x27;rep_104&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>在 ReplicatedMergeTree 中，</p><p><strong>第一个参数</strong>是分片的 zk_path 一般按照：&#x2F;clickhouse&#x2F;table&#x2F;{shard}&#x2F;{table_name} 的格式写，如果只有一个分片就写 01 即可。</p><p><strong>第二个参数</strong>是副本名称，<strong>相同的分片副本名称不能相同。</strong></p><p>（7）在 hadoop102 上执行 insert 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_order_rep2 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">101</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">103</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">104</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">105</span>,<span class="string">&#x27;sku_003&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（8）在 hadoop103 上执行 select，可以查询出结果，说明副本配置正确</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order_rep2;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912195219517.png" alt="image-20220912195219517"> </p><h2 id="第-7-章-分片集群"><a href="#第-7-章-分片集群" class="headerlink" title="第 7 章 分片集群"></a><strong>第</strong> <strong>7</strong> <strong>章 分片集群</strong></h2><p>副本虽然能够提高数据的可用性，降低丢失风险，但是每台服务器实际上必须容纳全量数据，对数据的<strong>横向扩容</strong>没有解决。</p><p>要解决数据水平切分的问题，需要引入分片的概念。通过分片把一份完整的数据进行切分，不同的分片分布到不同的节点上，再通过 Distributed 表引擎把数据拼接起来一同使用。</p><p><strong>Distributed 表引擎本身不存储数据，</strong>有点类似于 MyCat 之于 MySql，成为一种中间件，通过分布式逻辑表来写入、分发、路由来操作多台节点不同分片的分布式数据。</p><blockquote><p>注意：ClickHouse 的集群是表级别的，实际企业中，大部分做了高可用，但是没有用分片，避免降低查询性能以及操作集群的复杂性。</p></blockquote><h3 id="7-1-集群写入流程（3-分片-2-副本共-6-个节点）"><a href="#7-1-集群写入流程（3-分片-2-副本共-6-个节点）" class="headerlink" title="7.1 集群写入流程（3 分片 2 副本共 6 个节点）"></a><strong>7.1 集群写入流程（3 分片 2 副本共 6 个节点）</strong></h3><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912205654322.png" alt="image-20220912205654322"> </p><h3 id="7-2-集群读取流程（3-分片-2-副本共-6-个节点）"><a href="#7-2-集群读取流程（3-分片-2-副本共-6-个节点）" class="headerlink" title="7.2 集群读取流程（3 分片 2 副本共 6 个节点）"></a><strong>7.2 集群读取流程（3 分片 2 副本共 6 个节点）</strong></h3><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912205722974.png" alt="image-20220912205722974"> </p><h3 id="7-3-3-分片-2-副本共-6-个节点集群配置（供参考）"><a href="#7-3-3-分片-2-副本共-6-个节点集群配置（供参考）" class="headerlink" title="7.3 3 分片 2 副本共 6 个节点集群配置（供参考）"></a>7.3 3 分片 2 副本共 6 个节点集群配置（供参考）</h3><p>配置的位置还是在之前的&#x2F;etc&#x2F;clickhouse-server&#x2F;config.d&#x2F;metrika.xml，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 集群名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gmall_cluster</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--集群的第一个分片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第一个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop101<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第二个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--集群的第二个分片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第一个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第二个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--集群的第三个分片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第一个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop105<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第二个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop106<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">gmall_cluster</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：也可以不创建外部文件，直接在 config.xml 的 <code>&lt;remote_servers&gt;</code> 中指定</p></blockquote><h3 id="7-4-配置三节点版本集群及副本"><a href="#7-4-配置三节点版本集群及副本" class="headerlink" title="7.4 配置三节点版本集群及副本"></a><strong>7.4</strong> <strong>配置三节点版本集群及副本</strong></h3><h4 id="7-4-1-集群及副本规划（2-个分片，只有第一个分片有副本）"><a href="#7-4-1-集群及副本规划（2-个分片，只有第一个分片有副本）" class="headerlink" title="7.4.1 集群及副本规划（2 个分片，只有第一个分片有副本）"></a><strong>7.4.1 集群及副本规划（2 个分片，只有第一个分片有副本）</strong></h4><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912210332486.png" alt="image-20220912210332486"> </p><table><thead><tr><th align="left">hadoop102</th><th align="left">hadoop103</th><th align="left">hadoop104</th></tr></thead><tbody><tr><td align="left"><macros><br>    <shard>01</shard><br><replica>rep_1_1</replica><br></macros></td><td align="left"><macros><br>    <shard>01</shard><br><replica>rep_1_2</replica><br></macros></td><td align="left"><macros><br>    <shard>02</shard><br><replica>rep_2_1</replica><br></macros></td></tr></tbody></table><h4 id="7-4-2-配置步骤"><a href="#7-4-2-配置步骤" class="headerlink" title="7.4.2 配置步骤"></a><strong>7.4.2</strong> <strong>配置步骤</strong></h4><p><strong>1）在 hadoop102 的 &#x2F;etc&#x2F;clickhouse-server&#x2F;config.d 目录下创建 metrika-shard.xml 文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 集群名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gmall_cluster</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--集群的第一个分片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第一个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第二个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--集群的第二个分片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该分片的第一个副本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">gmall_cluster</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不同机器放的分片数不一样--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span>01<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不同机器放的副本数不一样--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span>rep_1_1<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：也可以不创建外部文件，直接在 config.xml 的 <code>&lt;remote_servers&gt;</code> 中指定</p></blockquote><p><strong>2）将 hadoop102 的 metrika-shard.xml 同步到 103 和 104</strong></p><p><strong>3）修改 103 和 104 中 metrika-shard.xml 宏的配置</strong></p><p>（1）103</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912211209173.png" alt="image-20220912211209173"> </p><p>（2）104</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912211350373.png" alt="image-20220912211350373"> </p><p><strong>4）在 hadoop102 上修改 &#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml</strong></p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912211517131.png" alt="image-20220912211517131"> </p><p><strong>5）同步 &#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml 到 103 和 104</strong></p><p><strong>6）重启三台服务器上的 ClickHouse 服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo clickhouse restart</span><br></pre></td></tr></table></figure><p><strong>7）在 hadoop102 上执行建表语句</strong></p><ul><li>会自动同步到 hadoop103 和 hadoop104 上</li><li>集群名字要和配置文件中的一致</li><li>分片和副本名称从配置文件的宏定义中获取</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> st_order_mt <span class="keyword">ON</span> CLUSTER gmall_cluster</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/tables/&#123;shard&#125;/st_order_mt&#x27;</span>, <span class="string">&#x27;&#123;replica&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(create_time)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><p>可以到 hadoop103 和 hadoop104 上查看表是否创建成功</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912214352072.png" alt="image-20220912214352072"> </p><p><strong>8）在 hadoop102 上创建 Distribute 分布式表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> st_order_mt_all2 <span class="keyword">ON</span> CLUSTER gmall_cluster</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Datetime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> Distributed(gmall_cluster, <span class="keyword">default</span>, st_order_mt, hiveHash(sku_id));</span><br></pre></td></tr></table></figure><p><strong>参数含义：</strong></p><p>Distributed（集群名称，库名，本地表名，分片键）</p><p>分片键必须是整型数字，所以用 hiveHash 函数转换，也可以 rand()</p><p><strong>9）在 hadoop102 上插入测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st_order_mt_all2 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">201</span>,<span class="string">&#x27;sku_001&#x27;</span>,<span class="number">1000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>) ,</span><br><span class="line">(<span class="number">202</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">203</span>,<span class="string">&#x27;sku_004&#x27;</span>,<span class="number">2500.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">204</span>,<span class="string">&#x27;sku_002&#x27;</span>,<span class="number">2000.00</span>,<span class="string">&#x27;2020-06-01 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">205</span>,<span class="string">&#x27;sku_003&#x27;</span>,<span class="number">600.00</span>,<span class="string">&#x27;2020-06-02 12:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>10）通过查询分布式表和本地表观察输出结果</strong></p><blockquote><p>注意：分布式表管理不同分片时需要知道用户名和密码，如果 clickhouse 的用户设置了密码，则需要在分片配置中添加上密码。</p><p>错误信息：DB::Exception: Received from hadoop104:9000. DB::Exception: default: Authentication failed: password is incorrect or there is no user with such name.                     </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1）分布式表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> st_order_mt_all2;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912215138964.png" alt="image-20220912215138964"> </p><p>（2）本地表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> st_order_mt;</span><br></pre></td></tr></table></figure><p>① hadoop102</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912215214139.png" alt="image-20220912215214139"> </p><p>② hadoop103</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912215231777.png" alt="image-20220912215231777"> </p><p>③ hadoop104</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220912215308837.png" alt="image-20220912215308837"> </p><h1 id="第二部分-高级篇"><a href="#第二部分-高级篇" class="headerlink" title="第二部分 高级篇"></a>第二部分 高级篇</h1><h2 id="第-1-章-Explain-查看执行计划"><a href="#第-1-章-Explain-查看执行计划" class="headerlink" title="第 1 章 Explain 查看执行计划"></a><strong>第</strong> <strong>1</strong> <strong>章</strong> <strong>Explain</strong> <strong>查看执行计划</strong></h2><p>在 clickhouse 20.6 版本之前要查看 SQL 语句的执行计划需要设置日志级别为 trace 才能可以看到，并且只能真正执行 sql，在执行日志里面查看。在 20.6 版本引入了原生的执行计划的语法。在 20.6.3 版本成为正式版本的功能。</p><h3 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a><strong>1.1</strong> <strong>基本语法</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN [AST <span class="operator">|</span> SYNTAX <span class="operator">|</span> PLAN <span class="operator">|</span> PIPELINE] [setting <span class="operator">=</span> <span class="keyword">value</span>, ...] </span><br><span class="line"><span class="keyword">SELECT</span> ... [FORMAT ...]</span><br></pre></td></tr></table></figure><ul><li>PLAN：用于查看执行计划，默认值。<ul><li>header：打印计划中各个步骤的 head 说明，默认关闭，默认值 0;</li><li>description：打印计划中各个步骤的描述，默认开启，默认值 1；</li><li>actions：打印计划中各个步骤的详细信息，默认关闭，默认值 0。</li></ul></li><li>AST：用于查看语法树; </li><li>SYNTAX：用于查看优化语法; </li><li>PIPELINE：用于查看 PIPELINE 计划。 <ul><li>header：打印计划中各个步骤的 head 说明，默认关闭; </li><li>graph：用 DOT 图形语言描述管道图，默认关闭，需要查看相关的图形需要配合 graphviz 查看；</li><li>actions：如果开启了 graph，紧凑打印打，默认开启。</li></ul></li></ul><h3 id="1-2-案例实操"><a href="#1-2-案例实操" class="headerlink" title="1.2 案例实操"></a><strong>1.2</strong> <strong>案例实操</strong></h3><h4 id="1-2-1-使用-EXPLAIN"><a href="#1-2-1-使用-EXPLAIN" class="headerlink" title="1.2.1 使用 EXPLAIN"></a><strong>1.2.1</strong> <strong>使用</strong> <strong>EXPLAIN</strong></h4><p>1）查看 PLAN</p><p>简单查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PLAN <span class="keyword">SELECT</span> arrayJoin([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>]);</span><br></pre></td></tr></table></figure><p>复杂 SQL 的执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> database, <span class="keyword">table</span>, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> system.parts <span class="keyword">WHERE</span> database <span class="keyword">IN</span> (<span class="string">&#x27;datasets&#x27;</span>, <span class="string">&#x27;system&#x27;</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> database, <span class="keyword">table</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> database <span class="keyword">ASC</span>, cnt <span class="keyword">DESC</span> LIMIT <span class="number">2</span> <span class="keyword">BY</span> database;</span><br></pre></td></tr></table></figure><p>打开全部的参数的执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN header <span class="operator">=</span> <span class="number">1</span>, actions <span class="operator">=</span> <span class="number">1</span>, description <span class="operator">=</span> <span class="number">1</span> <span class="keyword">SELECT</span> number <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>2）AST 语法树</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN AST <span class="keyword">SELECT</span> number <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>3）SYNTAX 语法优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先做一次查询</span></span><br><span class="line"><span class="keyword">SELECT</span> number <span class="operator">=</span> <span class="number">1</span> ? <span class="string">&#x27;hello&#x27;</span> : (number <span class="operator">=</span> <span class="number">2</span> ? <span class="string">&#x27;world&#x27;</span> : <span class="string">&#x27;atguigu&#x27;</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 查看语法优化</span></span><br><span class="line">EXPLAIN SYNTAX <span class="keyword">SELECT</span> number <span class="operator">=</span> <span class="number">1</span> ? <span class="string">&#x27;hello&#x27;</span> : (number <span class="operator">=</span> <span class="number">2</span> ? <span class="string">&#x27;world&#x27;</span> : <span class="string">&#x27;atguigu&#x27;</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 开启三元运算符优化</span></span><br><span class="line"><span class="keyword">SET</span> optimize_if_chain_to_multiif <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 再次查看语法优化</span></span><br><span class="line">EXPLAIN SYNTAX <span class="keyword">SELECT</span> number <span class="operator">=</span> <span class="number">1</span> ? <span class="string">&#x27;hello&#x27;</span> : (number <span class="operator">=</span> <span class="number">2</span> ? <span class="string">&#x27;world&#x27;</span> : <span class="string">&#x27;atguigu&#x27;</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918101624402.png" alt="image-20220918101624402"> </p><p>4）查看 PIPELINE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE <span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers_mt(<span class="number">100000</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 打开其他参数</span></span><br><span class="line">EXPLAIN PIPELINE header <span class="operator">=</span> <span class="number">1</span>, graph <span class="operator">=</span> <span class="number">1</span> <span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers_mt(<span class="number">10000</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="第-2-章-建表优化"><a href="#第-2-章-建表优化" class="headerlink" title="第 2 章 建表优化"></a><strong>第</strong> <strong>2</strong> <strong>章 建表优化</strong></h2><h3 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a><strong>2.1</strong> <strong>数据类型</strong></h3><h4 id="2-1-1-时间字段的类型"><a href="#2-1-1-时间字段的类型" class="headerlink" title="2.1.1 时间字段的类型"></a><strong>2.1.1</strong> <strong>时间字段的类型</strong></h4><p>建表时能用数值型或日期时间型表示的字段就不要用字符串，全 String 类型在以 Hive 为中心的数仓建设中常见，但 ClickHouse 环境不应受此影响。</p><p>虽然 ClickHouse 底层将 DateTime 存储为时间戳 Long 类型，但不建议存储 Long 类型，<strong>因为 DateTime 不需要经过函数转换处理，执行效率高、可读性好。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_type2</span><br><span class="line">(</span><br><span class="line">    `id` UInt32,</span><br><span class="line">    `sku_id` String,</span><br><span class="line">    `total_amount` <span class="type">Decimal</span>(<span class="number">16</span>, <span class="number">2</span>),</span><br><span class="line">    `create_time` Int32</span><br><span class="line">) ENGINE <span class="operator">=</span> ReplacingMergeTree(create_time)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(toDate(create_time)) <span class="comment">-- 需要转换一次，否则报错</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id, sku_id);</span><br></pre></td></tr></table></figure><h4 id="2-1-2-空值存储类型"><a href="#2-1-2-空值存储类型" class="headerlink" title="2.1.2 空值存储类型"></a><strong>2.1.2</strong> <strong>空值存储类型</strong></h4><p>官方已经指出 <strong>Nullable</strong> <strong>类型几乎总是会拖累性能</strong>，因为存储 Nullable 列时需要创建一个额外的文件来存储 NULL 的标记，并且 Nullable 列无法被索引。因此除非极特殊情况，应直接使用字段默认值表示空，或者自行指定一个在业务中无意义的值（例如用-1 表示没有商品ID）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_null</span><br><span class="line">(</span><br><span class="line">    `x` Int8,</span><br><span class="line">    `y` Nullable(Int8)</span><br><span class="line">) ENGINE <span class="operator">=</span> TinyLog;</span><br><span class="line"><span class="comment">-- 插入语句</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_null <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="keyword">NULL</span>), (<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 查询语句</span></span><br><span class="line"><span class="keyword">SELECT</span> x <span class="operator">+</span> y <span class="keyword">FROM</span> t_null;</span><br></pre></td></tr></table></figure><p>查看存储的文件：（没有权限就用 root 用户）</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918103851762.png" alt="image-20220918103851762"> </p><p>官方说明：<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable/">https://clickhouse.com/docs/zh/sql-reference/data-types/nullable/</a></p><h3 id="2-2-分区和索引"><a href="#2-2-分区和索引" class="headerlink" title="2.2 分区和索引"></a><strong>2.2</strong> <strong>分区和索引</strong></h3><p>分区粒度根据业务特点决定，不宜过粗或过细。一般选择<strong>按天分区</strong>，也可以指定为 Tuple()，以单表一亿数据为例，分区大小控制在 10-30 个为最佳。</p><p>必须指定索引列，ClickHouse 中的<strong>索引列即排序列</strong>，通过 <strong>order by</strong> 指定，一般在查询条件中经常被用来充当筛选条件的属性被纳入进来；可以是单一维度，也可以是组合维度的索引；通常需要满足高级列在前、查询频率大的在前原则；还有基数特别大的不适合做索引列，如用户表的 userid 字段；通常<strong>筛选后的数据满足在百万以内为最佳</strong>。</p><blockquote><p><strong>问题：为什么基数特别大的不适合做索引列？</strong></p><p>官方文档：</p><p>When a query is filtering on at least one column that is part of a compound key, and is the first key column, <a href="https://clickhouse.com/docs/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-design#the-primary-index-is-used-for-selecting-granules">then ClickHouse is running the binary search algorithm over the key column’s index marks</a>.</p><p>When a query is filtering (only) on a column that is part of a compound key, but is not the first key column, <a href="https://clickhouse.com/docs/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-multiple#secondary-key-columns-can-not-be-inefficient">then ClickHouse is using the generic exclusion search algorithm over the key column’s index marks</a>.</p><p>官方文档：</p><p>We discussed that because <a href="https://clickhouse.com/docs/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-design#data-is-stored-on-disk-ordered-by-primary-key-columns">a ClickHouse table’s row data is stored on disk ordered by primary key column(s)</a>, having a very high cardinality column (like a UUID column) in a primary key or in a compound primary key before columns with lower cardinality <a href="https://clickhouse.com/docs/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-cardinality#optimal-compression-ratio-of-data-files">is detrimental for the compression ratio of other table columns</a>.</p><p>A compromise between fastest retrieval and optimal data compression is to use a compound primary key where the UUID is the last key column, after low(er) cardinality key columns that are used to ensure a good compression ratio for some of the table’s columns.</p><p>结论：并不是基数特别大的不适合做索引列，而是基数特别大的不适合作为第一个索引列。因为如果查询条件不包含第一个索引时，这会使得通用排除搜索算法的效率变差。一个折中的做法是，索引列按照基数大小进行升序排列，基数特别大的作为索引的最后一列。</p></blockquote><p>比如官方案例的 hits_v1 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(EventDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, EventDate, intHash32(UserID))</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>visits_v1 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(StartDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, StartDate, intHash32(UserID), VisitID)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="2-3-表参数"><a href="#2-3-表参数" class="headerlink" title="2.3 表参数"></a><strong>2.3</strong> <strong>表参数</strong></h3><p>Index_granularity 是用来控制索引粒度的，默认是 8192，如非必须不建议调整。</p><p>如果表中不是必须保留全量历史数据，建议指定 TTL（生存时间值），可以免去手动清除过期历史数据的麻烦，TTL 也可以通过 alter table 语句随时修改。</p><h3 id="2-4-写入和删除优化"><a href="#2-4-写入和删除优化" class="headerlink" title="2.4 写入和删除优化"></a><strong>2.4</strong> <strong>写入和删除优化</strong></h3><p>（1）尽量不要执行单条或小批量删除和插入操作，这样会产生小分区文件，给后台 Merge 任务带来巨大压力</p><p>（2）不要一次写入太多分区，或数据写入太快，数据写入太快会导致 Merge 速度跟不上而报错，一般建议每秒钟发起 2-3 次写入操作，每次操作写入 2w~5w 条数据（依服务器性能而定）</p><p>写入过快报错，报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Code: 252, e.displayText() = DB::Exception: Too many parts(304). Merges are processing significantly slower than inserts</span><br><span class="line">2. Code: 241, e.displayText() = DB::Exception: Memory limit (for query) exceeded:would use 9.37 GiB (attempt to allocate chunk of 301989888 bytes), maximum: 9.31 GiB</span><br></pre></td></tr></table></figure><p>处理方式：</p><p>“ Too many parts 处理 ” ：使用 WAL 预写日志，提高写入性能。</p><p>in_memory_parts_enable_wal 默认为 true</p><p>在服务器内存充裕的情况下增加内存配额，一般通过 max_memory_usage 来实现</p><p>在服务器内存不充裕的情况下，建议将超出部分内容分配到系统硬盘上，但会降低执行速度，一般通过 max_bytes_before_external_group_by、max_bytes_before_external_sort 参数来实现。</p><h3 id="2-5-常见配置"><a href="#2-5-常见配置" class="headerlink" title="2.5 常见配置"></a><strong>2.5</strong> <strong>常见配置</strong></h3><p>配置项主要在 config.xml 或 users.xml 中， 基本上都在 users.xml 里 </p><ul><li>config.xml 的配置项<ul><li><a href="https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings/">https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings/</a></li></ul></li><li>users.xml 的配置项<ul><li><a href="https://clickhouse.com/docs/en/operations/settings/settings/">https://clickhouse.com/docs/en/operations/settings/settings/</a></li></ul></li></ul><h4 id="2-5-1-CPU-资源"><a href="#2-5-1-CPU-资源" class="headerlink" title="2.5.1 CPU 资源"></a><strong>2.5.1 CPU</strong> <strong>资源</strong></h4><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>background_pool_size</td><td>后台线程池的大小，merge 线程就是在该线程池中执行，该线程池不仅仅是给 merge 线程用的，默认值 16，允许的前提下建议改成 <strong>cpu 个数的 2 倍（线程数）</strong>。</td></tr><tr><td>background_schedule_pool_size</td><td>执行后台任务（复制表、Kafka 流、DNS 缓存更新）的线程数。默认 128，<strong>建议改成 cpu 个数的 2 倍（线程数）</strong>。</td></tr><tr><td>background_distributed_schedule_pool_size</td><td>设置为分布式发送执行后台任务的线程数，默认 16，<strong>建议改成 cpu 个数的 2 倍（线程数）</strong>。</td></tr><tr><td>max_concurrent_queries</td><td>最大并发处理的请求数(包含 select,insert 等)，默认值 100，<strong>推荐 150(不够再加)~300</strong>。</td></tr><tr><td>max_threads</td><td>设置单个查询所能使用的最大 cpu 个数，默认是 cpu 核数</td></tr></tbody></table><h4 id="2-5-2-内存资源"><a href="#2-5-2-内存资源" class="headerlink" title="2.5.2 内存资源"></a><strong>2.5.2</strong> <strong>内存资源</strong></h4><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>max_memory_usage</td><td>此参数在 users.xml 中，表示单次 Query 占用内存最大值，该值可以设置的比较大，这样可以提升集群查询的上限。<strong>保留一点给 OS，比如 128G 内存的机器，设置为 100GB</strong>。</td></tr><tr><td>max_bytes_before_external_group_by</td><td>一般按照 max_memory_usage 的一半设置内存，当 group 使用内存超过阈值后会刷新到磁盘进行。因为 clickhouse 聚合分两个阶段：查询并及建立中间数据、合并中间数据，<strong>结合上一项，建议 50GB</strong>。</td></tr><tr><td>max_bytes_before_external_sort</td><td>一般按照 max_memory_usage 的一半设置内存，如果不设置该值，那么当内存不够时直接抛错，设置了该值 order by 可以正常完成，但是速度相对存内存来说肯定要慢点(实测慢的非常多，无法接受)。</td></tr><tr><td>max_table_size_to_drop</td><td>此参数在 config.xml 中，应用于需要删除表或分区的情况，默认是50GB，意思是如果删除 50GB 以上的分区表会失败。<strong>建议修改为 0</strong>，这样不管多大的分区表都可以删除。</td></tr></tbody></table><h4 id="2-5-3-存储"><a href="#2-5-3-存储" class="headerlink" title="2.5.3 存储"></a><strong>2.5.3</strong> <strong>存储</strong></h4><p>ClickHouse 不支持设置多数据目录，为了提升数据 io 性能，可以挂载虚拟券组，一个券组绑定多块物理磁盘提升读写性能，多数据查询场景 SSD 会比普通机械硬盘快 2-3 倍。</p><h2 id="第-3-章-ClickHouse-语法优化规则"><a href="#第-3-章-ClickHouse-语法优化规则" class="headerlink" title="第 3 章 ClickHouse 语法优化规则"></a><strong>第</strong> <strong>3</strong> <strong>章</strong> <strong>ClickHouse</strong> <strong>语法优化规则</strong></h2><p>ClickHouse 的 SQL 优化规则是基于 RBO(Rule Based Optimization)，下面是一些优化规则</p><h3 id="3-1-准备测试用表"><a href="#3-1-准备测试用表" class="headerlink" title="3.1 准备测试用表"></a><strong>3.1</strong> <strong>准备测试用表</strong></h3><p><strong>1）下载并导入官方的数据集</strong></p><p>官网地址：<a href="https://clickhouse.com/docs/en/getting-started/example-datasets/metrica">https://clickhouse.com/docs/en/getting-started/example-datasets/metrica</a></p><p><strong>下载 hits 压缩 TSV 文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl https://datasets.clickhouse.com/hits/tsv/hits_v1.tsv.xz | unxz --threads=`nproc` &gt; hits_v1.tsv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Validate the checksum</span></span><br><span class="line">md5sum hits_v1.tsv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Checksum should be equal to: f3631b6295bf06989c1437491f7592cb</span></span><br></pre></td></tr></table></figure><p><strong>创建数据库和表：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --query &quot;CREATE DATABASE IF NOT EXISTS datasets&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --query &quot;CREATE TABLE datasets.hits_v1 ( WatchID UInt64,  JavaEnable UInt8,  Title String,  GoodEvent Int16,  EventTime DateTime,  EventDate Date,  CounterID UInt32,  ClientIP UInt32,  ClientIP6 FixedString(16),  RegionID UInt32,  UserID UInt64,  CounterClass Int8,  OS UInt8,  UserAgent UInt8,  URL String,  Referer String,  URLDomain String,  RefererDomain String,  Refresh UInt8,  IsRobot UInt8,  RefererCategories Array(UInt16),  URLCategories Array(UInt16), URLRegions Array(UInt32),  RefererRegions Array(UInt32),  ResolutionWidth UInt16,  ResolutionHeight UInt16,  ResolutionDepth UInt8,  FlashMajor UInt8, FlashMinor UInt8,  FlashMinor2 String,  NetMajor UInt8,  NetMinor UInt8, UserAgentMajor UInt16,  UserAgentMinor FixedString(2),  CookieEnable UInt8, JavascriptEnable UInt8,  IsMobile UInt8,  MobilePhone UInt8,  MobilePhoneModel String,  Params String,  IPNetworkID UInt32,  TraficSourceID Int8, SearchEngineID UInt16,  SearchPhrase String,  AdvEngineID UInt8,  IsArtifical UInt8,  WindowClientWidth UInt16,  WindowClientHeight UInt16,  ClientTimeZone Int16,  ClientEventTime DateTime,  SilverlightVersion1 UInt8, SilverlightVersion2 UInt8,  SilverlightVersion3 UInt32,  SilverlightVersion4 UInt16,  PageCharset String,  CodeVersion UInt32,  IsLink UInt8,  IsDownload UInt8,  IsNotBounce UInt8,  FUniqID UInt64,  HID UInt32,  IsOldCounter UInt8, IsEvent UInt8,  IsParameter UInt8,  DontCountHits UInt8,  WithHash UInt8, HitColor FixedString(1),  UTCEventTime DateTime,  Age UInt8,  Sex UInt8,  Income UInt8,  Interests UInt16,  Robotness UInt8,  GeneralInterests Array(UInt16), RemoteIP UInt32,  RemoteIP6 FixedString(16),  WindowName Int32,  OpenerName Int32,  HistoryLength Int16,  BrowserLanguage FixedString(2),  BrowserCountry FixedString(2),  SocialNetwork String,  SocialAction String,  HTTPError UInt16, SendTiming Int32,  DNSTiming Int32,  ConnectTiming Int32,  ResponseStartTiming Int32,  ResponseEndTiming Int32,  FetchTiming Int32,  RedirectTiming Int32, DOMInteractiveTiming Int32,  DOMContentLoadedTiming Int32,  DOMCompleteTiming Int32,  LoadEventStartTiming Int32,  LoadEventEndTiming Int32, NSToDOMContentLoadedTiming Int32,  FirstPaintTiming Int32,  RedirectCount Int8, SocialSourceNetworkID UInt8,  SocialSourcePage String,  ParamPrice Int64, ParamOrderID String,  ParamCurrency FixedString(3),  ParamCurrencyID UInt16, GoalsReached Array(UInt32),  OpenstatServiceName String,  OpenstatCampaignID String,  OpenstatAdID String,  OpenstatSourceID String,  UTMSource String, UTMMedium String,  UTMCampaign String,  UTMContent String,  UTMTerm String, FromTag String,  HasGCLID UInt8,  RefererHash UInt64,  URLHash UInt64,  CLID UInt32,  YCLID UInt64,  ShareService String,  ShareURL String,  ShareTitle String,  ParsedParams Nested(Key1 String,  Key2 String, Key3 String, Key4 String, Key5 String,  ValueDouble Float64),  IslandID FixedString(16),  RequestNum UInt32,  RequestTry UInt8) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192&quot;</span><br></pre></td></tr></table></figure><p><strong>导入 hits 数据：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat hits_v1.tsv | clickhouse-client [--password] --query &quot;INSERT INTO datasets.hits_v1 FORMAT TSV&quot; --max_insert_block_size=100000</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --query &quot;SELECT COUNT(*) FROM datasets.hits_v1&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918212056904.png" alt="image-20220918212056904"> </p><p><strong>下载 visits 压缩 TSV 文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl https://datasets.clickhouse.com/visits/tsv/visits_v1.tsv.xz | unxz --threads=`nproc` &gt; visits_v1.tsv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Validate the checksum</span></span><br><span class="line">md5sum visits_v1.tsv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Checksum should be equal to: 6dafe1a0f24e59e3fc2d0fed85601de6</span></span><br></pre></td></tr></table></figure><p><strong>创建表：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --query &quot;CREATE TABLE datasets.visits_v1 ( CounterID UInt32,  StartDate Date,  Sign Int8,  IsNew UInt8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,  Duration UInt32,  UTCStartTime DateTime,  PageViews Int32,  Hits Int32,  IsBounce UInt8,  Referer String,  StartURL String,  RefererDomain String,  StartURLDomain String,  EndURL String,  LinkURL String,  IsDownload UInt8,  TraficSourceID Int8,  SearchEngineID UInt16,  SearchPhrase String,  AdvEngineID UInt8,  PlaceID Int32,  RefererCategories Array(UInt16),  URLCategories Array(UInt16),  URLRegions Array(UInt32),  RefererRegions Array(UInt32),  IsYandex UInt8,  GoalReachesDepth Int32,  GoalReachesURL Int32,  GoalReachesAny Int32,  SocialSourceNetworkID UInt8,  SocialSourcePage String,  MobilePhoneModel String,  ClientEventTime DateTime,  RegionID UInt32,  ClientIP UInt32,  ClientIP6 FixedString(16),  RemoteIP UInt32,  RemoteIP6 FixedString(16),  IPNetworkID UInt32,  SilverlightVersion3 UInt32,  CodeVersion UInt32,  ResolutionWidth UInt16,  ResolutionHeight UInt16,  UserAgentMajor UInt16,  UserAgentMinor UInt16,  WindowClientWidth UInt16,  WindowClientHeight UInt16,  SilverlightVersion2 UInt8,  SilverlightVersion4 UInt16,  FlashVersion3 UInt16,  FlashVersion4 UInt16,  ClientTimeZone Int16,  OS UInt8,  UserAgent UInt8,  ResolutionDepth UInt8,  FlashMajor UInt8,  FlashMinor UInt8,  NetMajor UInt8,  NetMinor UInt8,  MobilePhone UInt8,  SilverlightVersion1 UInt8,  Age UInt8,  Sex UInt8,  Income UInt8,  JavaEnable UInt8,  CookieEnable UInt8,  JavascriptEnable UInt8,  IsMobile UInt8,  BrowserLanguage UInt16,  BrowserCountry UInt16,  Interests UInt16,  Robotness UInt8,  GeneralInterests Array(UInt16),  Params Array(String),  Goals Nested(ID UInt32, Serial UInt32, EventTime DateTime,  Price Int64,  OrderID String, CurrencyID UInt32),  WatchIDs Array(UInt64),  ParamSumPrice Int64,  ParamCurrency FixedString(3),  ParamCurrencyID UInt16,  ClickLogID UInt64,  ClickEventID Int32,  ClickGoodEvent Int32,  ClickEventTime DateTime,  ClickPriorityID Int32,  ClickPhraseID Int32,  ClickPageID Int32,  ClickPlaceID Int32,  ClickTypeID Int32,  ClickResourceID Int32,  ClickCost UInt32,  ClickClientIP UInt32,  ClickDomainID UInt32,  ClickURL String,  ClickAttempt UInt8,  ClickOrderID UInt32,  ClickBannerID UInt32,  ClickMarketCategoryID UInt32,  ClickMarketPP UInt32,  ClickMarketCategoryName String,  ClickMarketPPName String,  ClickAWAPSCampaignName String,  ClickPageName String,  ClickTargetType UInt16,  ClickTargetPhraseID UInt64,  ClickContextType UInt8,  ClickSelectType Int8,  ClickOptions String,  ClickGroupBannerID Int32,  OpenstatServiceName String,  OpenstatCampaignID String,  OpenstatAdID String,  OpenstatSourceID String,  UTMSource String,  UTMMedium String,  UTMCampaign String,  UTMContent String,  UTMTerm String,  FromTag String,  HasGCLID UInt8,  FirstVisit DateTime,  PredLastVisit Date,  LastVisit Date,  TotalVisits UInt32,  TraficSource    Nested(ID Int8,  SearchEngineID UInt16, AdvEngineID UInt8, PlaceID UInt16, SocialSourceNetworkID UInt8, Domain String, SearchPhrase String, SocialSourcePage String),  Attendance FixedString(16),  CLID UInt32,  YCLID UInt64,  NormalizedRefererHash UInt64,  SearchPhraseHash UInt64,  RefererDomainHash UInt64,  NormalizedStartURLHash UInt64,  StartURLDomainHash UInt64,  NormalizedEndURLHash UInt64,  TopLevelDomain UInt64,  URLScheme UInt64,  OpenstatServiceNameHash UInt64,  OpenstatCampaignIDHash UInt64,  OpenstatAdIDHash UInt64,  OpenstatSourceIDHash UInt64,  UTMSourceHash UInt64,  UTMMediumHash UInt64,  UTMCampaignHash UInt64,  UTMContentHash UInt64,  UTMTermHash UInt64,  FromHash UInt64,  WebVisorEnabled UInt8,  WebVisorActivity UInt32,  ParsedParams    Nested(Key1 String,  Key2 String,  Key3 String,  Key4 String, Key5 String, ValueDouble    Float64),  Market Nested(Type UInt8, GoalID UInt32, OrderID String,  OrderPrice Int64,  PP UInt32,  DirectPlaceID UInt32,  DirectOrderID  UInt32,  DirectBannerID UInt32,  GoodID String, GoodName String, GoodQuantity Int32,  GoodPrice Int64),  IslandID FixedString(16)) ENGINE = CollapsingMergeTree(Sign) PARTITION BY toYYYYMM(StartDate) ORDER BY (CounterID, StartDate, intHash32(UserID), VisitID) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192&quot;</span><br></pre></td></tr></table></figure><p><strong>导入 visits 数据：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat visits_v1.tsv | clickhouse-client [--password] --query &quot;INSERT INTO datasets.visits_v1 FORMAT TSV&quot; --max_insert_block_size=100000</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client [--password] --query &quot;SELECT COUNT(*) FROM datasets.visits_v1&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918211502836.png" alt="image-20220918211502836"> </p><h3 id="3-2-COUNT-优化"><a href="#3-2-COUNT-优化" class="headerlink" title="3.2 COUNT 优化"></a><strong>3.2 COUNT</strong> <strong>优化</strong></h3><p>在调用 count 函数时，如果使用的是 count() 或者 count(*)，且没有 where 条件，则会直接使用 system.tables 的 total_rows，例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="built_in">count</span>() <span class="keyword">FROM</span> datasets.hits_v1;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918212520617.png" alt="image-20220918212520617"> </p><p>注意 Optimized trivial count ，这是对 count 的优化。</p><p>如果 count 具体的列字段，则不会使用此项优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="built_in">count</span>(CounterID) <span class="keyword">FROM</span> datasets.hits_v1;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918212624192.png" alt="image-20220918212624192"> </p><h3 id="3-3-消除子查询重复字段"><a href="#3-3-消除子查询重复字段" class="headerlink" title="3.3 消除子查询重复字段"></a><strong>3.3</strong> <strong>消除子查询重复字段</strong></h3><p>下面语句子查询中有两个重复的 id 字段，会被去重:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.UserID,</span><br><span class="line">    b.VisitID,</span><br><span class="line">    a.URL,</span><br><span class="line">    b.UserID</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        UserID,</span><br><span class="line">        UserID <span class="keyword">AS</span> HaHa,</span><br><span class="line">        VisitID</span><br><span class="line">    <span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">) <span class="keyword">AS</span> b <span class="keyword">USING</span> (UserID)</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918213307849.png" alt="image-20220918213307849"> </p><h3 id="3-4-谓词下推"><a href="#3-4-谓词下推" class="headerlink" title="3.4 谓词下推"></a><strong>3.4</strong> <strong>谓词下推</strong></h3><p>当 group by 有 having 子句，但是没有 with cube、with rollup 或者 with totals 修饰的时候，having 过滤会下推到 where 提前过滤。例如下面的查询，HAVING name 变成了 WHERE name，在 group by 之前过滤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX <span class="keyword">SELECT</span> UserID <span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> UserID <span class="keyword">HAVING</span> UserID <span class="operator">=</span> <span class="string">&#x27;8585742290196126178&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918213532475.png" alt="image-20220918213532475"> </p><p>子查询也支持谓词下推：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> UserID</span><br><span class="line">    <span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> UserID <span class="operator">=</span> <span class="string">&#x27;8585742290196126178&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918213712676.png" alt="image-20220918213712676"> </p><p>再来一个复杂例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> UserID</span><br><span class="line">        <span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> UserID</span><br><span class="line">        <span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> UserID <span class="operator">=</span> <span class="string">&#x27;8585742290196126178&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918213856857.png" alt="image-20220918213856857"> </p><h3 id="3-5-聚合计算外推"><a href="#3-5-聚合计算外推" class="headerlink" title="3.5 聚合计算外推"></a><strong>3.5</strong> <strong>聚合计算外推</strong></h3><p>聚合函数内的计算，会外推，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(UserID <span class="operator">*</span> <span class="number">2</span>)</span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918214011204.png" alt="image-20220918214011204"> </p><h3 id="3-6-聚合函数消除"><a href="#3-6-聚合函数消除" class="headerlink" title="3.6 聚合函数消除"></a><strong>3.6</strong> <strong>聚合函数消除</strong></h3><p>如果对聚合键，也就是 group by key 使用 min、max、any 聚合函数，则将函数消除，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">sum</span>(UserID <span class="operator">*</span> <span class="number">2</span>),</span><br><span class="line">    <span class="built_in">max</span>(VisitID),</span><br><span class="line">    <span class="built_in">max</span>(UserID)</span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> UserID;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918214136336.png" alt="image-20220918214136336">  </p><h3 id="3-7-删除重复的-order-by-key"><a href="#3-7-删除重复的-order-by-key" class="headerlink" title="3.7 删除重复的 order by key"></a><strong>3.7</strong> <strong>删除重复的</strong> <strong>order by key</strong></h3><p>例如下面的语句，重复的聚合键 id 字段会被去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    UserID <span class="keyword">ASC</span>,</span><br><span class="line">    UserID <span class="keyword">ASC</span>,</span><br><span class="line">    VisitID <span class="keyword">ASC</span>,</span><br><span class="line">    VisitID <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918214619369.png" alt="image-20220918214619369"> </p><h3 id="3-8-删除重复的-limit-by-key"><a href="#3-8-删除重复的-limit-by-key" class="headerlink" title="3.8 删除重复的 limit by key"></a><strong>3.8</strong> <strong>删除重复的</strong> <strong>limit by key</strong></h3><p>例如下面的语句，重复声明的 name 字段会被去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">BY</span></span><br><span class="line">    VisitID,</span><br><span class="line">    VisitID</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918214726919.png" alt="image-20220918214726919"> </p><h3 id="3-9-删除重复的-USING-Key"><a href="#3-9-删除重复的-USING-Key" class="headerlink" title="3.9 删除重复的 USING Key"></a><strong>3.9</strong> <strong>删除重复的</strong> <strong>USING Key</strong></h3><p>例如下面的语句，重复的关联键 id 字段会被去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.UserID,</span><br><span class="line">    a.UserID,</span><br><span class="line">    b.VisitID,</span><br><span class="line">    a.URL,</span><br><span class="line">    b.UserID</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v1 <span class="keyword">AS</span> b <span class="keyword">USING</span> (UserID, UserID);</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918214918761.png" alt="image-20220918214918761"> </p><h3 id="3-10-标量替换"><a href="#3-10-标量替换" class="headerlink" title="3.10 标量替换"></a><strong>3.10</strong> <strong>标量替换</strong></h3><p>如果子查询只返回一行数据，在被引用的时候用标量替换，例如下面语句中的 total_disk_usage 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">sum</span>(bytes)</span><br><span class="line">        <span class="keyword">FROM</span> system.parts</span><br><span class="line">        <span class="keyword">WHERE</span> active</span><br><span class="line">    ) <span class="keyword">AS</span> total_disk_usage</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="built_in">sum</span>(bytes) <span class="operator">/</span> total_disk_usage) <span class="operator">*</span> <span class="number">100</span> <span class="keyword">AS</span> table_disk_usage,</span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">FROM</span> system.parts</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> table_disk_usage <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918215026462.png" alt="image-20220918215026462"> </p><h3 id="3-11-三元运算优化"><a href="#3-11-三元运算优化" class="headerlink" title="3.11 三元运算优化"></a><strong>3.11</strong> <strong>三元运算优化</strong></h3><p>如果开启了 optimize_if_chain_to_multiif 参数，三元运算符会被替换成 multiIf 函数，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX </span><br><span class="line"><span class="keyword">SELECT</span> number <span class="operator">=</span> <span class="number">1</span> ? <span class="string">&#x27;hello&#x27;</span> : (number <span class="operator">=</span> <span class="number">2</span> ? <span class="string">&#x27;world&#x27;</span> : <span class="string">&#x27;atguigu&#x27;</span>) </span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>) </span><br><span class="line">settings optimize_if_chain_to_multiif <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918215233545.png" alt="image-20220918215233545"> </p><h2 id="第-4-章-查询优化"><a href="#第-4-章-查询优化" class="headerlink" title="第 4 章 查询优化"></a><strong>第</strong> <strong>4</strong> <strong>章 查询优化</strong></h2><h3 id="4-1-单表查询"><a href="#4-1-单表查询" class="headerlink" title="4.1 单表查询"></a><strong>4.1</strong> <strong>单表查询</strong></h3><h4 id="4-1-1-Prewhere-替代-where"><a href="#4-1-1-Prewhere-替代-where" class="headerlink" title="4.1.1 Prewhere 替代 where"></a><strong>4.1.1 Prewhere</strong> <strong>替代</strong> <strong>where</strong></h4><p>Prewhere 和 where 语句的作用相同，用来过滤数据。不同之处在于 prewhere 只支持 *MergeTree 族系列引擎的表，首先会读取指定的列数据，来判断数据过滤，等待数据过滤之后再读取 select 声明的列字段来补全其余属性。</p><p>当查询列明显多于筛选列时使用 Prewhere 可十倍提升查询性能，Prewhere 会自动优化执行过滤阶段的数据读取方式，降低 io 操作。</p><p>在某些场合下，prewhere 语句比 where 语句处理的数据量更少性能更高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭 where 自动转 prewhere(默认情况下， where 条件会自动优化成 prewhere)</span></span><br><span class="line"><span class="keyword">set</span> optimize_move_to_prewhere <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 where</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    WatchID,</span><br><span class="line">    JavaEnable,</span><br><span class="line">    Title,</span><br><span class="line">    GoodEvent,</span><br><span class="line">    EventTime,</span><br><span class="line">    EventDate,</span><br><span class="line">    CounterID,</span><br><span class="line">    ClientIP,</span><br><span class="line">    ClientIP6,</span><br><span class="line">    RegionID,</span><br><span class="line">    UserID,</span><br><span class="line">    CounterClass,</span><br><span class="line">    OS,</span><br><span class="line">    UserAgent,</span><br><span class="line">    URL,</span><br><span class="line">    Referer,</span><br><span class="line">    URLDomain,</span><br><span class="line">    RefererDomain,</span><br><span class="line">    Refresh,</span><br><span class="line">    IsRobot,</span><br><span class="line">    RefererCategories,</span><br><span class="line">    URLCategories,</span><br><span class="line">    URLRegions,</span><br><span class="line">    RefererRegions,</span><br><span class="line">    ResolutionWidth,</span><br><span class="line">    ResolutionHeight,</span><br><span class="line">    ResolutionDepth,</span><br><span class="line">    FlashMajor,</span><br><span class="line">    FlashMinor,</span><br><span class="line">    FlashMinor2</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line"><span class="keyword">WHERE</span> UserID <span class="operator">=</span> <span class="string">&#x27;3198390223272470366&#x27;</span>;</span><br><span class="line"><span class="comment">-- 152 rows in set. Elapsed: 0.897 sec. Processed 8.87 million rows, 3.86 GB (9.89 million rows/s., 4.30 GB/s.)</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 prewhere 关键字</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    WatchID,</span><br><span class="line">    JavaEnable,</span><br><span class="line">    Title,</span><br><span class="line">    GoodEvent,</span><br><span class="line">    EventTime,</span><br><span class="line">    EventDate,</span><br><span class="line">    CounterID,</span><br><span class="line">    ClientIP,</span><br><span class="line">    ClientIP6,</span><br><span class="line">    RegionID,</span><br><span class="line">    UserID,</span><br><span class="line">    CounterClass,</span><br><span class="line">    OS,</span><br><span class="line">    UserAgent,</span><br><span class="line">    URL,</span><br><span class="line">    Referer,</span><br><span class="line">    URLDomain,</span><br><span class="line">    RefererDomain,</span><br><span class="line">    Refresh,</span><br><span class="line">    IsRobot,</span><br><span class="line">    RefererCategories,</span><br><span class="line">    URLCategories,</span><br><span class="line">    URLRegions,</span><br><span class="line">    RefererRegions,</span><br><span class="line">    ResolutionWidth,</span><br><span class="line">    ResolutionHeight,</span><br><span class="line">    ResolutionDepth,</span><br><span class="line">    FlashMajor,</span><br><span class="line">    FlashMinor,</span><br><span class="line">    FlashMinor2</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line">PREWHERE UserID <span class="operator">=</span> <span class="string">&#x27;3198390223272470366&#x27;</span>;</span><br><span class="line"><span class="comment">-- 152 rows in set. Elapsed: 0.083 sec. Processed 8.87 million rows, 116.54 MB (106.55 million rows/s., 1.40 GB/s.)</span></span><br></pre></td></tr></table></figure><p>默认情况，我们肯定不会关闭 where 自动优化成 prewhere，但是某些场景即使开启优化，也不会自动转换成 prewhere，需要手动指定 prewhere：</p><ul><li>使用常量表达式</li><li>使用默认值为 alias 类型的字段</li><li>包含了 arrayJOIN，globalIn，globalNotIn 或者 indexHint 的查询</li><li>select 查询的列字段和 where 的谓词相同</li><li>使用了主键字段</li></ul><h4 id="4-1-2-数据采样"><a href="#4-1-2-数据采样" class="headerlink" title="4.1.2 数据采样"></a><strong>4.1.2</strong> <strong>数据采样</strong></h4><p>通过采样运算可极大提升数据分析的性能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Title,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> PageViews</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line">SAMPLE <span class="number">1</span> <span class="operator">/</span> <span class="number">10</span> <span class="comment">-- 代表采样10%的数据,也可以是具体的条数</span></span><br><span class="line"><span class="keyword">WHERE</span> CounterID <span class="operator">=</span> <span class="number">57</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> PageViews <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>采样修饰符只有在 MergeTree engine 表中才有效，且在创建表时需要指定采样策略。</p><h4 id="4-1-3-列裁剪与分区裁剪"><a href="#4-1-3-列裁剪与分区裁剪" class="headerlink" title="4.1.3 列裁剪与分区裁剪"></a><strong>4.1.3</strong> <strong>列裁剪与分区裁剪</strong></h4><p>数据量太大时应避免使用 select * 操作，查询的性能会与查询的字段大小和数量成线性表换，字段越少，消耗的 io 资源越少，性能就会越高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 反例</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> datasets.hits_v1;</span><br><span class="line"><span class="comment">-- 正例</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    WatchID, </span><br><span class="line">    JavaEnable, </span><br><span class="line">    Title, </span><br><span class="line">    GoodEvent, </span><br><span class="line">    EventTime, </span><br><span class="line">    EventDate, </span><br><span class="line">    CounterID, </span><br><span class="line">    ClientIP, </span><br><span class="line">    ClientIP6, </span><br><span class="line">    RegionID, </span><br><span class="line">    UserID</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1;</span><br></pre></td></tr></table></figure><p>分区裁剪就是只读取需要的分区，在过滤条件中指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    WatchID, </span><br><span class="line">    JavaEnable, </span><br><span class="line">    Title, </span><br><span class="line">    GoodEvent, </span><br><span class="line">    EventTime, </span><br><span class="line">    EventDate, </span><br><span class="line">    CounterID, </span><br><span class="line">    ClientIP, </span><br><span class="line">    ClientIP6, </span><br><span class="line">    RegionID, </span><br><span class="line">    UserID</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line"><span class="keyword">WHERE</span> EventDate <span class="operator">=</span> <span class="string">&#x27;2014-03-23&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-1-4-orderby-结合-where、limit"><a href="#4-1-4-orderby-结合-where、limit" class="headerlink" title="4.1.4 orderby 结合 where、limit"></a><strong>4.1.4 orderby 结合 where、limit</strong></h4><p>千万以上数据集进行 order by 查询时需要搭配 where 条件和 limit 语句一起使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 正例：</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    UserID,</span><br><span class="line">    Age</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line"><span class="keyword">WHERE</span> CounterID <span class="operator">=</span> <span class="number">57</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Age <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- 反例：</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    UserID,</span><br><span class="line">    Age</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="4-1-5-避免构建虚拟列"><a href="#4-1-5-避免构建虚拟列" class="headerlink" title="4.1.5 避免构建虚拟列"></a><strong>4.1.5</strong> <strong>避免构建虚拟列</strong></h4><p>如非必须，不要在结果集上构建虚拟列，虚拟列非常消耗资源浪费性能，可以考虑在前端进行处理，或者在表中构造实际字段进行额外存储。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 反例：</span></span><br><span class="line"><span class="keyword">SELECT</span> Income, Age, Income<span class="operator">/</span>Age <span class="keyword">as</span> IncRate <span class="keyword">FROM</span> datasets.hits_v1;</span><br><span class="line"><span class="comment">-- 正例：拿到 Income 和 Age 后，考虑在前端进行处理，或者在表中构造实际字段进行额外存储</span></span><br><span class="line"><span class="keyword">SELECT</span> Income, Age <span class="keyword">FROM</span> datasets.hits_v1;</span><br></pre></td></tr></table></figure><h4 id="4-1-6-uniqCombined-替代-distinct"><a href="#4-1-6-uniqCombined-替代-distinct" class="headerlink" title="4.1.6 uniqCombined 替代 distinct"></a><strong>4.1.6 uniqCombined</strong> <strong>替代</strong> <strong>distinct</strong></h4><p>性能可提升 10 倍以上，uniqCombined 底层采用类似 HyperLogLog 算法实现，能接受 2% 左右的数据误差，可直接使用这种去重方式提升查询性能。Count(distinct)会使用 uniqExact 精确去重。</p><p>不建议在千万级不同数据上执行 distinct 去重查询，改为近似去重 uniqCombined</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 反例：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> rand()) <span class="keyword">FROM</span> datasets.hits_v1;</span><br><span class="line"><span class="comment">-- 正例：</span></span><br><span class="line"><span class="keyword">SELECT</span> uniqCombined(rand()) <span class="keyword">FROM</span> datasets.hits_v1;</span><br></pre></td></tr></table></figure><h4 id="4-1-7-使用物化视图"><a href="#4-1-7-使用物化视图" class="headerlink" title="4.1.7 使用物化视图"></a><strong>4.1.7</strong> <strong>使用物化视图</strong></h4><p>参考第 6 章。</p><h4 id="4-1-8-其他注意事项"><a href="#4-1-8-其他注意事项" class="headerlink" title="4.1.8 其他注意事项"></a><strong>4.1.8</strong> <strong>其他注意事项</strong></h4><p><strong>（1）查询熔断</strong></p><p>为了避免因个别慢查询引起的服务雪崩的问题，除了可以为单个查询设置超时以外，还可以配置周期熔断，在一个查询周期内，如果用户频繁进行慢查询操作超出规定阈值后将无法继续进行查询操作。</p><p><strong>（2）关闭虚拟内存</strong></p><p>物理内存和虚拟内存的数据交换，会导致查询变慢，资源允许的情况下关闭虚拟内存。</p><p><strong>（3）配置 join_use_nulls</strong></p><p>为每一个账户添加 join_use_nulls 配置，左表中的一条记录在右表中不存在，右表的相应字段会返回该字段相应数据类型的默认值，而不是标准 SQL 中的 Null 值。</p><p><strong>（4）批量写入时先排序</strong></p><p>批量写入数据时，必须控制每个批次的数据中涉及到的分区的数量，在写入之前最好对需要导入的数据进行排序。无序的数据或者涉及的分区太多，会导致 ClickHouse 无法及时对新导入的数据进行合并，从而影响查询性能。</p><p><strong>（5）关注 CPU</strong></p><p>cpu 一般在 50%左右会出现查询波动，达到 70%会出现大范围的查询超时，cpu 是最关键的指标，要非常关注。</p><h3 id="4-2-多表关联"><a href="#4-2-多表关联" class="headerlink" title="4.2 多表关联"></a><strong>4.2</strong> <strong>多表关联</strong></h3><h4 id="4-2-1-准备表和数据"><a href="#4-2-1-准备表和数据" class="headerlink" title="4.2.1 准备表和数据"></a><strong>4.2.1</strong> <strong>准备表和数据</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建小表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> datasets.visits_v2</span><br><span class="line">ENGINE <span class="operator">=</span> CollapsingMergeTree(Sign)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(StartDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, StartDate, intHash32(UserID), VisitID)</span><br><span class="line">SAMPLE <span class="keyword">BY</span> intHash32(UserID)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span> <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">LIMIT <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 join 结果表：避免控制台疯狂打印数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> datasets.hits_v2</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(EventDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, EventDate, intHash32(UserID))</span><br><span class="line">SAMPLE <span class="keyword">BY</span> intHash32(UserID)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span> <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-用-IN-代替-JOIN"><a href="#4-2-2-用-IN-代替-JOIN" class="headerlink" title="4.2.2 用 IN 代替 JOIN"></a><strong>4.2.2</strong> <strong>用</strong> <strong>IN</strong> <strong>代替</strong> <strong>JOIN</strong></h4><p>当多表联查时，查询的数据仅从其中一张表出时，可考虑用 IN 操作而不是 JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.CounterID <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> CounterID</span><br><span class="line">    <span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 0 rows in set. Elapsed: 1.595 sec. Processed 6.19 million rows, 5.86 GB (3.88 million rows/s., 3.68 GB/s.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 反例：使用 join</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v1 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID;</span><br><span class="line"><span class="comment">-- 0 rows in set. Elapsed: 25.152 sec. Processed 10.55 million rows, 8.47 GB (419.58 thousand rows/s., 336.60 MB/s.)</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-大小表-JOIN"><a href="#4-2-3-大小表-JOIN" class="headerlink" title="4.2.3 大小表 JOIN"></a><strong>4.2.3</strong> <strong>大小表</strong> <strong>JOIN</strong></h4><p>多表 join 时要满足小表在右的原则，右表关联时被加载到内存中与左表进行比较，ClickHouse 中无论是 Left join 、Right join 还是 Inner join 永远都是拿着右表中的每一条记录到左表中查找该记录是否存在，所以右表必须是小表。</p><p><strong>（1）小表在右</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID;</span><br><span class="line"><span class="comment">-- 0 rows in set. Elapsed: 23.745 sec. Processed 8.88 million rows, 8.46 GB (374.11 thousand rows/s., 356.28 MB/s.)</span></span><br></pre></td></tr></table></figure><p><strong>（2）大表在右</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v2 <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.hits_v1 <span class="keyword">AS</span> a <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID;</span><br><span class="line"><span class="comment">-- Code: 241. DB::Exception: Received from localhost:9000. DB::Exception: Memory limit (total) exceeded: would use 3.31 GiB (attempt to allocate chunk of 4202528 bytes), maximum: 3.31 GiB: (while reading column UTMMedium): (while reading from part /var/lib/clickhouse/store/f5f/f5f00661-967a-4a35-b5f0-0661967afa35/201403_25_30_1/ from mark 0 with max_rows_to_read = 8192): While executing MergeTreeThread.</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4-注意谓词下推（版本差异）"><a href="#4-2-4-注意谓词下推（版本差异）" class="headerlink" title="4.2.4 注意谓词下推（版本差异）"></a><strong>4.2.4</strong> <strong>注意谓词下推（版本差异）</strong></h4><p>ClickHouse 在 join 查询时不会主动发起谓词下推的操作，需要每个子查询提前完成过滤操作，需要注意的是，是否执行谓词下推，对性能影响差别很大（新版本中已经不存在此问题，但是需要注意谓词的位置的不同依然有性能的差异）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID</span><br><span class="line"><span class="keyword">HAVING</span> a.EventDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918230221445.png" alt="image-20220918230221445"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID</span><br><span class="line"><span class="keyword">HAVING</span> b.StartDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918230335644.png" alt="image-20220918230335644"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID</span><br><span class="line"><span class="keyword">WHERE</span> a.EventDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span>;</span><br><span class="line"><span class="comment">-- 0 rows in set. Elapsed: 5.113 sec. Processed 6.70 million rows, 5.66 GB (1.31 million rows/s., 1.11 GB/s.)</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_v2 <span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line">    <span class="keyword">WHERE</span> EventDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span></span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> datasets.visits_v2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.CounterID <span class="operator">=</span> b.CounterID;</span><br><span class="line"><span class="comment">-- 0 rows in set. Elapsed: 5.204 sec. Processed 6.70 million rows, 5.66 GB (1.29 million rows/s., 1.09 GB/s.)</span></span><br></pre></td></tr></table></figure><h4 id="4-2-5-分布式表使用-GLOBAL"><a href="#4-2-5-分布式表使用-GLOBAL" class="headerlink" title="4.2.5 分布式表使用 GLOBAL"></a><strong>4.2.5</strong> <strong>分布式表使用</strong> <strong>GLOBAL</strong></h4><p>两张<strong>分布式表</strong>上的 IN 和 JOIN 之前必须加上 <strong>GLOBAL</strong> 关键字，右表只会在接收查询请求的那个节点查询一次，并将其分发到其他节点上。如果不加 GLOBAL 关键字的话，每个节点都会单独发起一次对右表的查询，而右表又是分布式表，就导致右表一共会被查询 N²次（N是该分布式表的分片数量），这就是<strong>查询放大</strong>，会带来很大开销。</p><h4 id="4-2-6-使用字典表"><a href="#4-2-6-使用字典表" class="headerlink" title="4.2.6 使用字典表"></a><strong>4.2.6</strong> <strong>使用字典表</strong></h4><p>将一些需要关联分析的业务创建成字典表进行 join 操作，前提是字典表不宜太大，因为字典表会常驻内存</p><h4 id="4-2-7-提前过滤"><a href="#4-2-7-提前过滤" class="headerlink" title="4.2.7 提前过滤"></a><strong>4.2.7</strong> <strong>提前过滤</strong></h4><p>通过增加逻辑过滤可以减少数据扫描，达到提高执行速度及降低内存消耗的目的</p><h2 id="第-5-章-数据一致性（重点）"><a href="#第-5-章-数据一致性（重点）" class="headerlink" title="第 5 章 数据一致性（重点）"></a><strong>第</strong> <strong>5</strong> <strong>章 数据一致性（重点）</strong></h2><p>查询 CK 手册发现，即便对数据一致性支持最好的 Mergetree，也只是保证<strong>最终一致性</strong>：</p><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918231654892.png" alt="image-20220918231654892"> </p><p>我们在使用 ReplacingMergeTree、SummingMergeTree 这类表引擎的时候，会出现短暂数据不一致的情况。</p><p>在某些对一致性非常敏感的场景，通常有以下几种解决方案。</p><h3 id="5-1-准备测试表和数据"><a href="#5-1-准备测试表和数据" class="headerlink" title="5.1 准备测试表和数据"></a><strong>5.1</strong> <strong>准备测试表和数据</strong></h3><p><strong>（1）创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_a</span><br><span class="line">(</span><br><span class="line">    `user_id` UInt64,</span><br><span class="line">    `score` String,</span><br><span class="line">    `deleted` UInt8 <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    `create_time` DateTime <span class="keyword">DEFAULT</span> toDateTime(<span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> user_id;</span><br></pre></td></tr></table></figure><p>其中：</p><p>user_id 是数据去重更新的标识；</p><p>create_time 是版本号字段，每组数据中 create_time 最大的一行表示最新的数据；</p><p>deleted 是自定的一个标记位，比如 0 代表未删除，1 代表删除数据。</p><p><strong>（2）写入 1000 万 测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_a (user_id, score) <span class="keyword">WITH</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">    ) <span class="keyword">AS</span> dict</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    number <span class="keyword">AS</span> user_id,</span><br><span class="line">    dict[(number <span class="operator">%</span> <span class="number">7</span>) <span class="operator">+</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10000000</span>);</span><br></pre></td></tr></table></figure><p><strong>（3）修改前 50 万 行数据，修改内容包括 name 字段和 create_time 版本号字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_a (user_id, score, create_time) <span class="keyword">WITH</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> [<span class="string">&#x27;AA&#x27;</span>, <span class="string">&#x27;BB&#x27;</span>, <span class="string">&#x27;CC&#x27;</span>, <span class="string">&#x27;DD&#x27;</span>, <span class="string">&#x27;EE&#x27;</span>, <span class="string">&#x27;FF&#x27;</span>, <span class="string">&#x27;GG&#x27;</span>]</span><br><span class="line">    ) <span class="keyword">AS</span> dict</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    number <span class="keyword">AS</span> user_id,</span><br><span class="line">    dict[(number <span class="operator">%</span> <span class="number">7</span>) <span class="operator">+</span> <span class="number">1</span>],</span><br><span class="line">    now() <span class="keyword">AS</span> create_time</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">500000</span>);</span><br></pre></td></tr></table></figure><p><strong>（4）统计总数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>() <span class="keyword">FROM</span> test_a;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918232130909.png" alt="image-20220918232130909"> </p><p>还未触发分区合并，所以还未去重。</p><h3 id="5-2-手动-OPTIMIZE"><a href="#5-2-手动-OPTIMIZE" class="headerlink" title="5.2 手动 OPTIMIZE"></a><strong>5.2</strong> <strong>手动</strong> <strong>OPTIMIZE</strong></h3><p>在写入数据后，立刻执行 OPTIMIZE 强制触发新写入分区的合并动作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> test_a <span class="keyword">FINAL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法：OPTIMIZE TABLE [db.]name [ON CLUSTER cluster] [PARTITION partition | PARTITION ID &#x27;partition_id&#x27;] [FINAL] [DEDUPLICATE [BY expression]]</span></span><br></pre></td></tr></table></figure><h3 id="5-3-通过-Group-by-去重"><a href="#5-3-通过-Group-by-去重" class="headerlink" title="5.3 通过 Group by 去重"></a><strong>5.3</strong> <strong>通过</strong> <strong>Group by</strong> <strong>去重</strong></h3><p><strong>（1）执行去重的查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    user_id,</span><br><span class="line">    argMax(score, create_time) <span class="keyword">AS</span> score,</span><br><span class="line">    argMax(deleted, create_time) <span class="keyword">AS</span> deleted,</span><br><span class="line">    <span class="built_in">max</span>(create_time) <span class="keyword">AS</span> ctime</span><br><span class="line"><span class="keyword">FROM</span> test_a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id</span><br><span class="line"><span class="keyword">HAVING</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>函数说明：</p><ul><li>argMax(field1，field2)：按照 field2 的最大值取 field1 的值。</li></ul><p>当我们更新数据时，会写入一行新的数据，例如上面语句中，通过查询最大的 create_time 得到修改后的 score 字段值。</p><p><strong>（2）创建视图，方便测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_test_a <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    user_id,</span><br><span class="line">    argMax(score, create_time) <span class="keyword">AS</span> score,</span><br><span class="line">    argMax(deleted, create_time) <span class="keyword">AS</span> deleted,</span><br><span class="line">    <span class="built_in">max</span>(create_time) <span class="keyword">AS</span> ctime</span><br><span class="line"><span class="keyword">FROM</span> test_a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id</span><br><span class="line"><span class="keyword">HAVING</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>（3）插入重复数据，再次查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 再次插入一条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_a (user_id, score, create_time) <span class="keyword">VALUES</span>(<span class="number">0</span>, <span class="string">&#x27;AAAA&#x27;</span>, now());</span><br><span class="line"><span class="comment">-- 再次查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> view_test_a</span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918232722893.png" alt="image-20220918232722893"> </p><p><strong>（4）删除数据测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 再次插入一条标记为删除的数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_a (user_id, score, deleted, create_time) <span class="keyword">VALUES</span>(<span class="number">0</span>, <span class="string">&#x27;AAAA&#x27;</span>, <span class="number">1</span>, now()); </span><br><span class="line"><span class="comment">-- 再次查询，刚才那条数据看不到了</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> view_test_a</span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918232843982.png" alt="image-20220918232843982"> </p><p>这行数据并没有被真正的删除，而是被过滤掉了。在一些合适的场景下，可以结合表级别的 TTL 最终将物理数据删除。</p><h3 id="5-4-通过-FINAL-查询"><a href="#5-4-通过-FINAL-查询" class="headerlink" title="5.4 通过 FINAL 查询"></a><strong>5.4</strong> <strong>通过</strong> <strong>FINAL</strong> <strong>查询</strong></h3><p>在查询语句后增加 FINAL 修饰符，这样在查询的过程中将会执行 Merge 的特殊逻辑（例如数据去重，预聚合等）。</p><p>但是这种方法在早期版本基本没有人使用，因为在增加 FINAL 之后，我们的查询将会变成一个单线程的执行过程，查询速度非常慢。</p><p>在 <strong>v20.5.2.7-stable</strong> 版本中，FINAL 查询支持多线程执行，并且可以通过 <strong>max_final_threads 参数</strong>控制单个查询的线程数。但是目前读取 part 部分的动作依然是串行的。</p><p>FINAL 查询最终的性能和很多因素相关，列字段的大小、分区的数量等等都会影响到最终的查询时间，所以还要结合实际场景取舍。</p><p>参考链接：<a href="https://github.com/ClickHouse/ClickHouse/pull/10463">https://github.com/ClickHouse/ClickHouse/pull/10463</a></p><h4 id="5-4-1-测试"><a href="#5-4-1-测试" class="headerlink" title="5.4.1 测试"></a><strong>5.4.1</strong> <strong>测试</strong></h4><p><strong>（1）普通语句查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">WHERE</span> StartDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span></span><br><span class="line">LIMIT <span class="number">100</span></span><br><span class="line">SETTINGS max_threads <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>查看执行计划：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">WHERE</span> StartDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span></span><br><span class="line">LIMIT <span class="number">100</span></span><br><span class="line">SETTINGS max_threads <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918233420942.png" alt="image-20220918233420942"> </p><p>明显将由 2 个线程并行读取 part 查询。</p><p><strong>（2）FINAL 查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">FINAL</span></span><br><span class="line"><span class="keyword">WHERE</span> StartDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span></span><br><span class="line">LIMIT <span class="number">100</span></span><br><span class="line">SETTINGS max_final_threads <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>查询速度没有普通的查询快，但是相比之前已经有了一些提升,查看 FINAL 查询的执行计划：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> datasets.visits_v1</span><br><span class="line"><span class="keyword">FINAL</span></span><br><span class="line"><span class="keyword">WHERE</span> StartDate <span class="operator">=</span> <span class="string">&#x27;2014-03-17&#x27;</span></span><br><span class="line">LIMIT <span class="number">100</span></span><br><span class="line">SETTINGS max_final_threads <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918233706434.png" alt="image-20220918233706434"> </p><p>从 CollapsingSortedTransform 这一步开始已经是多线程执行，但是读取 part 部分的动作还是串行。</p><h2 id="第-6-章-物化视图"><a href="#第-6-章-物化视图" class="headerlink" title="第 6 章 物化视图"></a><strong>第</strong> <strong>6</strong> <strong>章 物化视图</strong></h2><p>ClickHouse 的物化视图是一种查询结果的持久化，它确实是给我们带来了查询效率的提升。用户查起来跟表没有区别，它就是一张表，它也像是一张时刻在预计算的表，创建的过程它是用了一个特殊引擎，加上后来 as select，就是 create 一个 table as select 的写法。</p><p>“查询结果集”的范围很宽泛，可以是基础表中部分数据的一份简单拷贝，也可以是多表 join 之后产生的结果或其子集，或者原始数据的聚合指标等等。所以，物化视图不会随着基础表的变化而变化，所以它也称为快照（snapshot）</p><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a><strong>6.1</strong> <strong>概述</strong></h3><h4 id="6-1-1-物化视图与普通视图的区别"><a href="#6-1-1-物化视图与普通视图的区别" class="headerlink" title="6.1.1 物化视图与普通视图的区别"></a><strong>6.1.1</strong> <strong>物化视图与普通视图的区别</strong></h4><p><strong>普通视图不保存数据，保存的仅仅是查询语句</strong>，查询的时候还是从原表读取数据，可以将普通视图理解为是个子查询。<strong>物化视图则是把查询的结果根据相应的引擎存入到了磁盘或内存中</strong>，对数据重新进行了组织，你可以理解物化视图是完全的一张新表。</p><h4 id="6-1-2-优缺点"><a href="#6-1-2-优缺点" class="headerlink" title="6.1.2 优缺点"></a><strong>6.1.2</strong> <strong>优缺点</strong></h4><p>优点：查询速度<strong>快</strong>，要是把物化视图这些规则全部写好，它比原数据查询快了很多，总的行数少了，因为都预计算好了。</p><p>缺点：它的本质是一个流式数据的使用场景，是累加式的技术，所以要用历史数据做去重、去核这样的分析，在物化视图里面是不太好用的。在某些场景的使用也是有限的。而且如果一张表加了好多物化视图，在写这张表的时候，就会消耗很多机器的资源，比如数据带宽占满、存储一下子增加了很多。</p><h4 id="6-1-3-基本语法"><a href="#6-1-3-基本语法" class="headerlink" title="6.1.3 基本语法"></a><strong>6.1.3</strong> <strong>基本语法</strong></h4><p>也是 create 语法，会创建一个隐藏的目标表来保存视图数据。也可以 TO 表名，保存到一张显式的表。没有加 TO 表名，表名默认就是 .inner.物化视图名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [MATERIALIZED] <span class="keyword">VIEW</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db.]table_name [<span class="keyword">TO</span>[db.]name] [ENGINE <span class="operator">=</span> engine] [POPULATE] <span class="keyword">AS</span> <span class="keyword">SELECT</span> ...</span><br></pre></td></tr></table></figure><p><strong>1）创建物化视图的限制</strong></p><p>1.必须指定物化视图的 engine 用于数据存储</p><p>2.TO [db].[table]语法的时候，不得使用 POPULATE。</p><p>3.查询语句(select）可以包含下面的子句： DISTINCT, GROUP BY, ORDER BY, LIMIT…</p><p>4.物化视图的 alter 操作有些限制，操作起来不大方便。</p><p>5.若物化视图的定义使用了 TO [db.]name 子语句，则可以将目标表的视图 卸载 DETACH 再装载 ATTACH</p><p><strong>2）物化视图的数据更新</strong></p><p>（1）物化视图创建好之后，若源表被写入新数据则物化视图也会同步更新</p><p>（2）POPULATE 关键字决定了物化视图的更新策略：</p><ul><li>若有 POPULATE 则在创建视图的过程会将源表已经存在的数据一并导入，类似于 create table … as</li><li>若无 POPULATE 则物化视图在创建之后没有数据，只会同步之后写入源表的数据</li><li>clickhouse 官方并不推荐使用 POPULATE，因为在创建物化视图的过程中同时写入的数据不能被插入物化视图。</li></ul><p>（3）物化视图不支持同步删除，若源表的数据不存在（删除了）则物化视图的数据仍然保留</p><p>（4）物化视图是一种特殊的数据表，可以用 show tables 查看</p><h3 id="6-2-案例实操"><a href="#6-2-案例实操" class="headerlink" title="6.2 案例实操"></a><strong>6.2</strong> <strong>案例实操</strong></h3><p>对于一些确定的数据模型，可将统计指标通过物化视图的方式进行构建，这样可避免查询时重复计算的过程，物化视图会在有新数据插入时进行更新。</p><h4 id="6-2-1-准备测试用表和数据"><a href="#6-2-1-准备测试用表和数据" class="headerlink" title="6.2.1 准备测试用表和数据"></a><strong>6.2.1</strong> <strong>准备测试用表和数据</strong></h4><p>1）建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> datasets.hits_test</span><br><span class="line">(</span><br><span class="line">    `EventDate` <span class="type">Date</span>,</span><br><span class="line">    `CounterID` UInt32,</span><br><span class="line">    `UserID` UInt64,</span><br><span class="line">    `URL` String,</span><br><span class="line">    `Income` UInt8</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(EventDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, EventDate, intHash32(UserID))</span><br><span class="line">SAMPLE <span class="keyword">BY</span> intHash32(UserID)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span>;</span><br></pre></td></tr></table></figure><p>2）导入一些数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_test <span class="keyword">SELECT</span></span><br><span class="line">    EventDate,</span><br><span class="line">    CounterID,</span><br><span class="line">    UserID,</span><br><span class="line">    URL,</span><br><span class="line">    Income</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line">LIMIT <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-创建物化视图"><a href="#6-2-2-创建物化视图" class="headerlink" title="6.2.2 创建物化视图"></a><strong>6.2.2</strong> <strong>创建物化视图</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> datasets.hits_mv</span><br><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(EventDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (EventDate, intHash32(UserID)) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    UserID,</span><br><span class="line">    EventDate,</span><br><span class="line">    <span class="built_in">count</span>(URL) <span class="keyword">AS</span> ClickCount,</span><br><span class="line">    <span class="built_in">sum</span>(Income) <span class="keyword">AS</span> IncomeSum</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_test</span><br><span class="line"><span class="keyword">WHERE</span> EventDate <span class="operator">&gt;=</span> <span class="string">&#x27;2014-03-20&#x27;</span> <span class="comment">-- 设置更新点,该时间点之前的数据可以另外通过 insert into select …… 的方式进行插入</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    UserID,</span><br><span class="line">    EventDate;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 或者可以用下列语法，表 A 可以是一张 mergetree 表</span></span><br><span class="line"><span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> 物化视图名 <span class="keyword">TO</span> 表 A</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="keyword">FROM</span> 表 B; <span class="comment">-- 不建议添加 populate 关键字进行全量更新</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3-导入增量数据"><a href="#6-3-3-导入增量数据" class="headerlink" title="6.3.3 导入增量数据"></a><strong>6.3.3</strong> <strong>导入增量数据</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入增量数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_test <span class="keyword">SELECT</span></span><br><span class="line">    EventDate,</span><br><span class="line">    CounterID,</span><br><span class="line">    UserID,</span><br><span class="line">    URL,</span><br><span class="line">    Income</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_v1</span><br><span class="line"><span class="keyword">WHERE</span> EventDate <span class="operator">&gt;=</span> <span class="string">&#x27;2014-03-23&#x27;</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询物化视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> datasets.hits_mv;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918235343145.png" alt="image-20220918235343145"> </p><h4 id="6-3-4-导入历史数据"><a href="#6-3-4-导入历史数据" class="headerlink" title="6.3.4 导入历史数据"></a><strong>6.3.4</strong> <strong>导入历史数据</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入增量数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> datasets.hits_mv <span class="keyword">SELECT</span></span><br><span class="line">    UserID,</span><br><span class="line">    EventDate,</span><br><span class="line">    <span class="built_in">count</span>(URL) <span class="keyword">AS</span> ClickCount,</span><br><span class="line">    <span class="built_in">sum</span>(Income) <span class="keyword">AS</span> IncomeSum</span><br><span class="line"><span class="keyword">FROM</span> datasets.hits_test</span><br><span class="line"><span class="keyword">WHERE</span> EventDate <span class="operator">=</span> <span class="string">&#x27;2014-03-20&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    UserID,</span><br><span class="line">    EventDate;</span><br><span class="line"><span class="comment">-- 查询物化视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> datasets.hits_mv;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220918235440748.png" alt="image-20220918235440748"> </p><h2 id="第-7-章-MaterializeMySQL-引擎"><a href="#第-7-章-MaterializeMySQL-引擎" class="headerlink" title="第 7 章 MaterializeMySQL 引擎"></a><strong>第</strong> <strong>7</strong> <strong>章</strong> <strong>MaterializeMySQL</strong> <strong>引擎</strong></h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a><strong>7.1</strong> <strong>概述</strong></h3><p>MySQL 的用户群体很大，为了能够增强数据的实时性，很多解决方案会利用 binlog 将数据写入到 ClickHouse。为了能够监听 binlog 事件，我们需要用到类似 canal 这样的第三方中间件，这无疑增加了系统的复杂度。</p><p>ClickHouse 20.8.2.3 版本新增加了 MaterializeMySQL 的 database 引擎，该 database 能映射到 MySQL 中的某个 database ，并自动在 ClickHouse 中创建对应的ReplacingMergeTree。ClickHouse 服务做为 MySQL 副本，读取 Binlog 并执行 DDL 和 DML 请求，实现了基于 MySQL Binlog 机制的业务数据库实时同步功能。</p><h4 id="7-1-1-特点"><a href="#7-1-1-特点" class="headerlink" title="7.1.1 特点"></a><strong>7.1.1</strong> <strong>特点</strong></h4><p>（1）MaterializeMySQL 同时支持<strong>全量</strong>和<strong>增量</strong>同步，在 database 创建之初会全量同步 MySQL 中的表和数据，之后则会通过 binlog 进行增量同步。</p><p>（2）MaterializeMySQL database 为其所创建的每张 ReplacingMergeTree 自动增加了 _sign 和 _version 字段。</p><p>其中，_version 用作 ReplacingMergeTree 的 ver 版本参数，每当监听到 insert、update 和 delete 事件时，在 databse 内全局自增。而 _sign 则用于标记是否被删除，取值 1 或者 -1。</p><p>目前 MaterializeMySQL 支持如下几种 binlog 事件：</p><ul><li>MYSQL_WRITE_ROWS_EVENT： _sign &#x3D; 1，_version ++</li><li>MYSQL_DELETE_ROWS_EVENT： _sign &#x3D; -1，_version ++</li><li>MYSQL_UPDATE_ROWS_EVENT：新数据 _sign &#x3D; 1</li><li>MYSQL_QUERY_EVENT：支持 CREATE TABLE 、DROP TABLE 、RENAME TABLE 等。</li></ul><h4 id="7-1-2-使用细则"><a href="#7-1-2-使用细则" class="headerlink" title="7.1.2 使用细则"></a><strong>7.1.2</strong> <strong>使用细则</strong></h4><p><strong>（1）DDL 查询</strong></p><p>MySQL DDL 查询被转换成相应的 ClickHouse DDL 查询（ALTER, CREATE, DROP, RENAME）。如果 ClickHouse 不能解析某些 DDL 查询，该查询将被忽略。</p><p><strong>（2）数据复制</strong></p><p>MaterializeMySQL 不支持直接插入、删除和更新查询，而是将 DDL 语句进行相应转换：</p><p>MySQL INSERT 查询被转换为 INSERT with _sign&#x3D;1。</p><p>MySQL DELETE 查询被转换为 INSERT with _sign&#x3D;-1。</p><p>MySQL UPDATE 查询被转换成 INSERT with _sign&#x3D;1 和 INSERT with _sign&#x3D;-1。</p><p><strong>（3）SELECT 查询</strong></p><p>如果在 SELECT 查询中没有指定_version，则使用 FINAL 修饰符，返回_version 的最大值对应的数据，即最新版本的数据。</p><p>如果在 SELECT 查询中没有指定_sign，则默认使用 WHERE _sign&#x3D;1，即返回未删除状态（_sign&#x3D;1)的数据。</p><p><strong>（4）索引转换</strong></p><p>ClickHouse 数据库表会自动将 MySQL 主键和索引子句转换为 ORDER BY 元组。</p><p>ClickHouse 只有一个物理顺序，由 ORDER BY 子句决定。如果需要创建新的物理顺序，请使用物化视图。</p><h3 id="7-2-案例实操"><a href="#7-2-案例实操" class="headerlink" title="7.2 案例实操"></a><strong>7.2</strong> <strong>案例实操</strong></h3><h4 id="7-2-1-MySQL-开启-binlog-和-GTID-模式"><a href="#7-2-1-MySQL-开启-binlog-和-GTID-模式" class="headerlink" title="7.2.1 MySQL 开启 binlog 和 GTID 模式"></a><strong>7.2.1 MySQL</strong> <strong>开启</strong> <strong>binlog</strong> <strong>和</strong> <strong>GTID</strong> <strong>模式</strong></h4><p><strong>（1）确保 MySQL 开启了 binlog 功能，且格式为 ROW</strong></p><p>打开&#x2F;etc&#x2F;my.cnf，在[mysqld]下添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id=1 </span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure><p><strong>（2）开启 GTID 模式</strong></p><p>如果如果 clickhouse 使用的是 20.8 prestable 之后发布的版本，那么 MySQL 还需要配置开启 GTID 模式, 这种方式在 mysql 主从模式下可以确保数据同步的一致性(主从切换时)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=1 # 设置为主从强一致性</span><br><span class="line">log-slave-updates=1 # 记录日志</span><br></pre></td></tr></table></figure><p>GTID 是 MySQL 复制增强版，从 MySQL 5.6 版本开始支持，目前已经是 MySQL 主流复制模式。它为每个 event 分配一个全局唯一 ID 和序号，我们可以不用关心 MySQL 集群主从拓扑结构，直接告知 MySQL 这个 GTID 即可。</p><p><strong>（3）启用旧的加密方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure><p><strong>（4）重启 MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure><h4 id="7-2-2-准备-MySQL-表和数据"><a href="#7-2-2-准备-MySQL-表和数据" class="headerlink" title="7.2.2 准备 MySQL 表和数据"></a><strong>7.2.2</strong> <strong>准备</strong> <strong>MySQL</strong> <strong>表和数据</strong></h4><p><strong>（1）在 MySQL 中创建数据表并写入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE testck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testck`.`t_organization` (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> `code` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `name` text <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `updatetime` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"> <span class="keyword">UNIQUE</span> KEY (`code`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testck.t_organization (code, name,updatetime) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000</span>,<span class="string">&#x27;Realinsight&#x27;</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testck.t_organization (code, name,updatetime) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>, <span class="string">&#x27;Realindex&#x27;</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testck.t_organization (code, name,updatetime) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;EDT&#x27;</span>,NOW());</span><br></pre></td></tr></table></figure><p><strong>（2）创建第二张表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testck`.`t_user` (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> `code` <span class="type">int</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testck.t_user (code) <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="7-2-3-开启-ClickHouse-物化引擎"><a href="#7-2-3-开启-ClickHouse-物化引擎" class="headerlink" title="7.2.3 开启 ClickHouse 物化引擎"></a><strong>7.2.3</strong> <strong>开启</strong> <strong>ClickHouse</strong> <strong>物化引擎</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> allow_experimental_database_materialize_mysql <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="7-2-4-创建复制管道"><a href="#7-2-4-创建复制管道" class="headerlink" title="7.2.4 创建复制管道"></a><strong>7.2.4</strong> <strong>创建复制管道</strong></h4><p>（1）ClickHouse 中创建 MaterializeMySQL 数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test_binlog</span><br><span class="line">ENGINE <span class="operator">=</span> MaterializeMySQL(<span class="string">&#x27;hadoop102:3306&#x27;</span>, <span class="string">&#x27;testck&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>);</span><br></pre></td></tr></table></figure><p>其中 4 个参数分别是 MySQL 地址、databse、username 和 password。 </p><p>（2）查看 ClickHouse 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE test_binlog;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_organization;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_user;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220919012323650.png" alt="image-20220919012323650"> </p><h4 id="7-2-5-修改数据"><a href="#7-2-5-修改数据" class="headerlink" title="7.2.5 修改数据"></a><strong>7.2.5</strong> <strong>修改数据</strong></h4><p>（1）在 MySQL 中修改数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_organization <span class="keyword">SET</span> name <span class="operator">=</span> CONCAT(name,<span class="string">&#x27;-v1&#x27;</span>) <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>（2）查看 clickhouse 日志可以看到 binlog 监听事件，查询 clickhouse</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_organization;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220919015123209.png" alt="image-20220919015123209"> </p><h4 id="7-2-6-删除数据"><a href="#7-2-6-删除数据" class="headerlink" title="7.2.6 删除数据"></a><strong>7.2.6</strong> <strong>删除数据</strong></h4><p>（1）MySQL 删除数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_organization <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>（2）ClicKHouse，日志有 DeleteRows 的 binlog 监听事件，查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_organization;</span><br></pre></td></tr></table></figure><p>（3）在刚才的查询中增加 _sign 和 _version 虚拟字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t_organization</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    _sign <span class="keyword">DESC</span>,</span><br><span class="line">    _version <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BClickHouse/image-20220919015340982.png" alt="image-20220919015340982"> </p><p>在查询时，对于已经被删除的数据，_sign&#x3D;-1，ClickHouse 会自动重写 SQL，将 _sign &#x3D; -1 的数据过滤掉;</p><p>对于修改的数据，则自动重写 SQL，为其增加 FINAL 修饰符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_organization;</span><br><span class="line"><span class="comment">-- 等同于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_organization <span class="keyword">FINAL</span> <span class="keyword">WHERE</span> _sign <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="7-2-7-删除表"><a href="#7-2-7-删除表" class="headerlink" title="7.2.7 删除表"></a><strong>7.2.7</strong> <strong>删除表</strong></h4><p>（1）在 mysql 执行删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_user;</span><br></pre></td></tr></table></figure><p>（2）此时在 clickhouse 处会同步删除对应表，如果查询会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_user;</span><br><span class="line"><span class="comment">-- Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Table test_binlog.t_user doesn&#x27;t exist. </span></span><br></pre></td></tr></table></figure><p>（3）mysql 新建表，clickhouse 可以查询到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testck`.`t_user` (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> `code` <span class="type">int</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testck.t_user (code) <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ClickHouse 查询</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_user;</span><br></pre></td></tr></table></figure><h2 id="第-8-章-常见问题排查"><a href="#第-8-章-常见问题排查" class="headerlink" title="第 8 章 常见问题排查"></a><strong>第</strong> <strong>8</strong> <strong>章 常见问题排查</strong></h2><h3 id="8-1-分布式-DDL-某数据节点的副本不执行"><a href="#8-1-分布式-DDL-某数据节点的副本不执行" class="headerlink" title="8.1 分布式 DDL 某数据节点的副本不执行"></a><strong>8.1</strong> <strong>分布式</strong> <strong>DDL</strong> <strong>某数据节点的副本不执行</strong></h3><p><strong>（1）问题：</strong>使用分布式 ddl 执行命令 create table on cluster xxxx 某个节点上没有创建表，但是 client 返回正常，查看日志有如下报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Error&gt; xxx.xxx: Retrying createReplica(), because some other replicas were created at the same time</span><br></pre></td></tr></table></figure><p><strong>（2）解决办法：</strong>重启该不执行的节点。</p><h3 id="8-2-数据副本表和数据不一致"><a href="#8-2-数据副本表和数据不一致" class="headerlink" title="8.2 数据副本表和数据不一致"></a><strong>8.2</strong> <strong>数据副本表和数据不一致</strong></h3><p><strong>（1）问题：</strong>由于某个数据节点副本异常，导致两数据副本表不一致，某个数据副本缺少表，需要将两个数据副本调整一致。</p><p><strong>（2）解决办法：</strong></p><p>在缺少表的数据副本节点上创建缺少的表，创建为本地表，表结构可以在其他数据副本通过 show crete table xxxx 获取。</p><p>表结构创建后，clickhouse 会自动从其他副本同步该表数据，验证数据量是否一致即可。</p><h3 id="8-3-副本节点全量恢复"><a href="#8-3-副本节点全量恢复" class="headerlink" title="8.3 副本节点全量恢复"></a><strong>8.3</strong> <strong>副本节点全量恢复</strong></h3><p><strong>（1）问题：</strong>某个数据副本异常无法启动，需要重新搭建副本。</p><p><strong>（2）解决办法：</strong></p><p>清空异常副本节点的 metadata 和 data 目录。</p><p>从另一个正常副本将 metadata 目录拷贝过来（这一步之后可以启动数据库，但是只有表结构没有数据）。</p><p>执行<code>sudo -u clickhouse touch /data/clickhouse/flags/force_restore_data</code></p><p>启动数据库。</p><h3 id="8-4-数据副本启动缺少-zk-表"><a href="#8-4-数据副本启动缺少-zk-表" class="headerlink" title="8.4 数据副本启动缺少 zk 表"></a><strong>8.4</strong> <strong>数据副本启动缺少</strong> <strong>zk</strong> <strong>表</strong></h3><p><strong>（1）问题：</strong>某个数据副本表在 zk 上丢失数据，或者不存在，但是 metadata 元数据里存在，导致启动异常，报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can’t get data for node /clickhouse/tables/01-02/xxxxx/xxxxxxx/replicas/xxx/metadata: node doesn’t exist (No node): Cannot attach table xxxxxxx</span><br></pre></td></tr></table></figure><p><strong>（2）解决办法：</strong></p><p>metadata 中移除该表的结构文件，如果多个表报错都移除</p><p>mv metadata&#x2F;xxxxxx&#x2F;xxxxxxxx.sql &#x2F;tmp&#x2F;</p><p>启动数据库</p><p>手工创建缺少的表，表结构从其他节点 show create table 获取。</p><p>创建后会自动同步数据，验证数据是否一致。</p><h3 id="8-5-ZK-table-replicas-数据未删除，导致重建表报错"><a href="#8-5-ZK-table-replicas-数据未删除，导致重建表报错" class="headerlink" title="8.5 ZK table replicas 数据未删除，导致重建表报错"></a><strong>8.5 ZK table replicas 数据未删除，导致重建表报错</strong></h3><p><strong>（1）问题：</strong>重建表过程中，先使用 drop table xxx on cluster xxx，各节点在 clickhouse 上 table 已物理删除，但是 zk 里面针对某个 clickhouse 节点的 table meta 信息未被删除（低概率事件），因 zk 里仍存在该表的 meta 信息，导致再次创建该表 create table xxx on cluster, 该节点无法创建表(其他节点创建表成功)，报错：</p><p>Replica &#x2F;clickhouse&#x2F;tables&#x2F;01-03&#x2F;xxxxxx&#x2F;xxx&#x2F;replicas&#x2F;xxx already exists..</p><p><strong>（2）解决办法：</strong></p><p>从其他数据副本 cp 该 table 的 metadata sql 过来。</p><p>重启节点。</p><h3 id="8-6-Clickhouse-节点意外关闭"><a href="#8-6-Clickhouse-节点意外关闭" class="headerlink" title="8.6 Clickhouse 节点意外关闭"></a><strong>8.6 Clickhouse</strong> <strong>节点意外关闭</strong></h3><p><strong>（1）问题：</strong>模拟其中一个节点意外宕机，在大量 insert 数据的情况下，关闭某个节点。</p><p><strong>（2）现象：</strong>数据写入不受影响、数据查询不受影响、建表 DDL 执行到异常节点会卡住，报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code: 159. DB::Exception: Received from localhost:9000. DB::Exception: Watching task /clickhouse/task_queue/ddl/query-0000565925 is executing longer than distributed_ddl_task_timeout (=180) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.</span><br></pre></td></tr></table></figure><p><strong>（3）解决办法：</strong>启动异常节点，期间其他副本写入数据会自动同步过来，其他副本的建表 DDL 也会同步。</p><h3 id="8-7-其他问题参考"><a href="#8-7-其他问题参考" class="headerlink" title="8.7 其他问题参考"></a><strong>8.7</strong> <strong>其他问题参考</strong></h3><p><a href="https://help.aliyun.com/document_detail/162815.html?spm=a2c4g.11186623.6.652.312e79bd17U8IO">https://help.aliyun.com/document_detail/162815.html?spm=a2c4g.11186623.6.652.312e79bd17U8IO</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.bilibili.com/video/BV1Yh411z7os?spm_id_from=333.999.0.0">一套上手ClickHouse-OLAP分析引擎，囊括Prometheus与Grafana</a></p><p>[2] <a href="https://clickhouse.com/docs/en/intro/">ClickHouse 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS入门学习</title>
      <link href="/2023/02/11/HDFS%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/11/HDFS%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>介绍了HDFS读写数据、NameNode和SecondaryNameNode、DataNode和NameNode的交互</p><h1 id="HDFS写数据"><a href="#HDFS写数据" class="headerlink" title="HDFS写数据"></a>HDFS写数据</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.loli.net/2020/01/16/J7wzPWbQpBIgsH3.png" alt="readHDFS.png"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>客户端调用DS模块向NameNode请求上传文件。</li><li>NameNode会检查目标文件和父目录是否已存在，再返回是否可以上传</li><li>假设文件为200M，客户端请求上传第一个 Block ，希望得到DataNode服务器位置。</li><li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3，用它们存储数据。</li><li>客户端通过FSDataOutputStream模块请求dn1建立上传数据通道，dn1收到请求会继续请求dn2，然后dn2请求dn3，直到将这个通信管道建立完成。</li><li>dn3、dn2、dn1逐级应答客户端。</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。（类似队列，以Packet为单位）</li><li>当一个Block（0-128M）传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li><li>向NameNode汇报上传完毕。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>DataNode位置选择，以默认3副本为例：第一个副本是最近的一般是它自己；第二个副本选择同一机架（同一路由）的不同节点；第三个副本是另一机架的随机节点。</li><li>数据传递以包为单位，第一个节点收到一个包，就把包传递给下一个DataNode。并不是等数据传完，再传递。</li></ul><h1 id="HDFS读数据"><a href="#HDFS读数据" class="headerlink" title="HDFS读数据"></a>HDFS读数据</h1><h2 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.loli.net/2020/01/16/nh45VUlZBjywe1d.png" alt="writeHDFS.png"></p><h2 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>客户端调用DS模块向NameNode请求下载文件。</li><li>NameNode会检查目标文件是否存在，再通过查询元数据，返回文件块所在的DataNode地址。</li><li>客户端通过FSDataInputStream模块向dn1（就近挑选）请求读取 Block1。</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li><li>当一个Block（0-128M）传输完成之后，客户端再次请求下载Block2。（重复执行2-4步）。</li><li>向NameNode汇报下载完毕。</li></ol><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>如果块的第一个副本请求失败，会向第二个副本请求，依次类推。</li></ul><h1 id="NameNode和SecondaryNameNode"><a href="#NameNode和SecondaryNameNode" class="headerlink" title="NameNode和SecondaryNameNode"></a>NameNode和SecondaryNameNode</h1><h2 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.loli.net/2020/01/16/oTxaRfPXkVrsO2g.png" alt="NNand2NN.png"></p><h2 id="具体步骤-2"><a href="#具体步骤-2" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>第一阶段：NameNode</p><ol><li>第一次启动NameNode（格式化）后，会创建Fsimage（镜像文件）和Edits（编辑日志）文件。以后启动，会直接加载镜像文件和编辑日志到内存，此时会进行合并操作。</li><li>假设此时客户端提出了增删改的请求。</li><li>NameNode记录之前的编辑日志（edits_n），更新新日志到滚动日志（edits_inprogress_n）中。</li><li>日志记录完毕后，NameNode在内存中对数据进行增删改。</li></ol><p>第二阶段：SecondaryNameNode</p><ol><li>Secondary NameNode向NameNode询问是否需要CheckPoint。</li><li>如果需要，Secondary NameNode请求执行CheckPoint。</li><li>NameNode滚动日志。</li><li>将滚动前的编辑日志（edits_001）和镜像文件(fsimage)拷贝到Secondary NameNode。</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</li><li>合并后，生成新的镜像文件fsimage.chkpoint。</li><li>拷贝fsimage.chkpoint到NameNode。</li><li>NameNode将fsimage.chkpoint重新命名成fsimage。</li></ol><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Fsimage 和 Edits文件？</li></ul><p>fsimage是NameNode内存中元数据序列化后形成的文件。Edits中记录客户端更新元数据信息的每一步操作。每次执行增删改时，先改日志再改文件。好处是：如果保证中途gg，可以保证操作不丢失，便于复原。</p><ul><li>为啥要Secondary NameNode？</li></ul><p>首先要知道只有NameNode重启时，edit.log才会合并到fsimage文件中，所以运行时间久了就会有3个问题：edis.log文件会变的很大；NameNode下次重启会花费很长时间；fsimage文件文件很旧，如果中途挂掉就很睿智。</p><p>为了解决上述问题，SecondaryNameNode诞生，每隔一定时间辅助合并NameNode的edit.log到fsimage文件中。从上述流程图就可以发现，它做的就是这个。</p><ul><li>什么时候执行CheckPoint？</li></ul><p>（1） 用户定时 （2）edit.log 满了</p><ul><li>Secondary NameNode是热备份吗？</li></ul><p>不是，可以发现Secondary NameNode合并的是滚动前的edis，它总是比NameNode的编辑日志少一点。</p><h1 id="DataNode和NameNode"><a href="#DataNode和NameNode" class="headerlink" title="DataNode和NameNode"></a>DataNode和NameNode</h1><h2 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.loli.net/2020/01/16/Gz1VEYR7hq32ymX.png" alt="DataNode.png"></p><h2 id="具体步骤-3"><a href="#具体步骤-3" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>DataNode启动后向NameNode注册。</li><li>NameNode告知注册成功。</li><li>DataNode周期性（1小时）的向NameNode上报所有的块信息。</li><li>DataNode每3秒发送一次心跳，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。</li><li>超过10分钟没有收到心跳，表示该节点不可用。</li></ol><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度、校验和 以及时间戳。</li><li>节点增加：新节点配置好后，自动向NameNode注册的。</li><li>节点退役：NameNode可以通过白名单指定需要的节点；通过黑名单指定不要的节点。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce入门学习</title>
      <link href="/2023/02/11/MapReduce%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/11/MapReduce%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img src="https://i.loli.net/2020/01/16/WozdMtRy59OEF2L.png" alt="MapTask.png"></p><p><img src="https://i.loli.net/2020/01/16/jB6t9W7GTAagwZD.png" alt="ReduceTask.png"></p><p><img src="https://i.loli.net/2020/01/16/yBRLZj7fSMmub34.png" alt="Shuffer.png"></p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>逻辑上可以这样划分：1-10是MapTask ；11-16是ReduceTask；7-14是shuffer</p><h2 id="1-待处理文本"><a href="#1-待处理文本" class="headerlink" title="1. 待处理文本"></a><strong>1. 待处理文本</strong></h2><p>这里假设是<code>/user/input</code>目录下的<code>ss.txt</code> 文件，大小为<strong>200M</strong>。</p><h2 id="2-客户端submit（）"><a href="#2-客户端submit（）" class="headerlink" title="2. 客户端submit（）"></a><strong>2. 客户端submit（）</strong></h2><p>发生在client端，主要获取3个信息：</p><p>（1）<strong>Job.split</strong> ：找到文件ss.txt，根据切片算法，得到切片的元数据信息（起始位置，长度以及所在节点等）如把ss.txt分成两片 0-128M 和 128M-200M</p><p>（2）<strong>Job.xml</strong>：任务的配置信息</p><p>（3）<strong>wc.jar</strong>：任务的jar包</p><h2 id="3-提交信息"><a href="#3-提交信息" class="headerlink" title="3. 提交信息"></a><strong>3. 提交信息</strong></h2><p>将刚刚获取的任务规划信息，提交到资源管理器上，我们这里用Yarn。</p><h2 id="4-RM计算MapTask数量"><a href="#4-RM计算MapTask数量" class="headerlink" title="4. RM计算MapTask数量"></a><strong>4. RM计算MapTask数量</strong></h2><p>接着向Yarn的RM申请资源，RM根据任务规划信息用户Job分成Task，并把任务下发给节点。这里我们数据分成了2片，根据默认规则，会有2个MapTask各自处理一片数据。</p><h2 id="5-根据采用的InputFormat读取数据"><a href="#5-根据采用的InputFormat读取数据" class="headerlink" title="5. 根据采用的InputFormat读取数据"></a><strong>5. 根据采用的InputFormat读取数据</strong></h2><p>这里采用默认的TextInputFormat类，按行读取每条记录。key是行偏移量，value是该行的内容。</p><h2 id="6-执行Mapper的map"><a href="#6-执行Mapper的map" class="headerlink" title="6. 执行Mapper的map()"></a><strong>6. 执行Mapper的map()</strong></h2><p>根据用户的代码执行map逻辑，把结果写入Context中。</p><h2 id="7-向环形缓存区写入数据"><a href="#7-向环形缓存区写入数据" class="headerlink" title="7. 向环形缓存区写入数据"></a><strong>7. 向环形缓存区写入数据</strong></h2><p>环形缓存区取一点：一边写索引，一边写真实数据。达到80%时发生溢写</p><h2 id="8-分区、排序"><a href="#8-分区、排序" class="headerlink" title="8. 分区、排序"></a><strong>8. 分区、排序</strong></h2><p>一种2次排序，先按区号排，再对key排序（快排）。得到一组按区排好序的数据。注意：这步是在环形缓存区就可以执行的，且排序排的是索引，真实数据不用动。且此时可以使用第一次Combiner合并操作。</p><h2 id="9-溢出写入文件"><a href="#9-溢出写入文件" class="headerlink" title="9. 溢出写入文件"></a><strong>9. 溢出写入文件</strong></h2><p>环形缓存区达到80%时，溢写到磁盘上。注意写磁盘前已经完成了分区、排序、合并、压缩等操作。此时生成第一组溢写文件<code>spillN.out</code> 与元数据<code>spillN.out.index</code>。</p><h2 id="10-MapTask的归并排序"><a href="#10-MapTask的归并排序" class="headerlink" title="10. MapTask的归并排序"></a><strong>10. MapTask的归并排序</strong></h2><p>将多组溢写文件，以分区为单位进行归并排序，写入磁盘形成大文件<code>output/file.out</code>，与索引文件<code>output/file.out.index</code>。此时一个MapTask任务完成，得到一个分区有序的数据。注意：在归并排序时可以使用第二次Combiner合并操作。</p><h2 id="11-启动ReduceTask"><a href="#11-启动ReduceTask" class="headerlink" title="11. 启动ReduceTask"></a><strong>11. 启动ReduceTask</strong></h2><p>假设分区数为2，此时启动2个ReduceTask，一个ReduceTask处理一个区的数据。</p><h2 id="12-copy数据"><a href="#12-copy数据" class="headerlink" title="12. copy数据"></a><strong>12. copy数据</strong></h2><p>ReduceTask从各个MapTask上拷贝它要处理的区的数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</p><h2 id="13-ReduceTask的归并排序"><a href="#13-ReduceTask的归并排序" class="headerlink" title="13. ReduceTask的归并排序"></a><strong>13. ReduceTask的归并排序</strong></h2><p>把同区的数据复制到同一个ReduceTask后，对它们进行归并排序</p><h2 id="14-分组"><a href="#14-分组" class="headerlink" title="14. 分组"></a><strong>14. 分组</strong></h2><p>默认把key相同的数据分到一组。用户可以继承WritableComparator，自定义分组规则。</p><h2 id="15-执行Reducer的Reduce"><a href="#15-执行Reducer的Reduce" class="headerlink" title="15. 执行Reducer的Reduce()"></a><strong>15. 执行Reducer的Reduce()</strong></h2><p>根据用户的代码执行reduce逻辑，把结果写入Context中。注意：一次读一组，value是迭代器对象，包含一个组的全部数据。</p><h2 id="16-根据采用的OutputFormat读取数据"><a href="#16-根据采用的OutputFormat读取数据" class="headerlink" title="16. 根据采用的OutputFormat读取数据"></a><strong>16. 根据采用的OutputFormat读取数据</strong></h2><p>这里采用默认的TextOutputFormat类，按行写入key和value，key和value用tab分开。</p><h1 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h1><h2 id="1个逻辑"><a href="#1个逻辑" class="headerlink" title="1个逻辑"></a><strong>1个逻辑</strong></h2><p><strong>先分区 -&gt; 再排序 -&gt; 再分组</strong></p><p>分区：用户定义分区数后，默认按hash分区。用户也可以继承<code>Partitioner</code>，自定义分区规则。ReduceTask的个数一般等于分区数。</p><p>排序：默认对key排序，key必须实现<code>WritableComparable</code>接口。用户可以重写<code>WritableComparable</code>接口的<code>compareTo()</code>方法，定义自己的排序规则。</p><p>分组：默认把key相同的数据分到一组。用户也可以继承WritableComparator，自定义分组规则。用于reduce阶段，一次读取一组.</p><h2 id="2次合并"><a href="#2次合并" class="headerlink" title="2次合并"></a><strong>2次合并</strong></h2><p>Combiner的父类就是Reducer，它可以通过对Map阶段的局部结果进行汇总，减少输出。</p><p>时机： 2次，<strong>分区排序后、MapTask的归并排序时</strong>。</p><p>条件：不能影响业务逻辑 且 输入输出的范型一致</p><h2 id="3次排序"><a href="#3次排序" class="headerlink" title="3次排序"></a><strong>3次排序</strong></h2><p>MapTask：</p><p><strong>分区排序</strong>：在缓行缓冲区进行，是一种2次排序。先按分区号排序，再对key排序（快排）。</p><p><strong>归并排序</strong>：对每组溢写的数据，进行的按区，归并排序。</p><p>ReduceTask：</p><p><strong>归并排序</strong>：对从MapTask拷贝的同区数据，进行的归并排序。</p><h2 id="分片和分区"><a href="#分片和分区" class="headerlink" title="分片和分区"></a><strong>分片和分区</strong></h2><p>分片：<strong>分片数决定MapTask的个数</strong>。在客户端即完成，举FileInputFormat切片机制为例：简单的按文件长度进行切片，切片大小等于块大小（默认128M），切片时是对文件单独切片。</p><p>分区：<strong>分区数决定ReduceTask的个数</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YARN入门学习</title>
      <link href="/2023/02/11/YARN%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/11/YARN%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Yarn运行机制流程图"><a href="#Yarn运行机制流程图" class="headerlink" title="Yarn运行机制流程图"></a>Yarn运行机制流程图</h1><p><img src="https://i.loli.net/2020/01/16/iV4PBsSf59gZnlb.png" alt="Yarn.png"></p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>（1）作业提交</p><ol><li>Client调用<code>job.waitForCompletion</code>方法，向整个集群提交MapReduce作业。</li><li>Client向RM申请一个作业id。</li><li>RM给Client返回该job资源的提交路径(<code>hdfs://.../.staging/</code>)和作业<code>application_id</code>。</li><li>Client在该路径提交jar包、切片信息和配置文件。</li><li>Client提交完资源后，向RM申请运行MrAppMaster。</li></ol><p>（2）作业初始化</p><ol><li>当RM收到Client的请求后，将该job添加到资源调度器中，将job初始化成task。</li><li>某一个空闲的NM领取到该Job。</li><li>在该NM中创建Container，并产生MRAppmaster(一个job创建一个)，它管理该job。</li><li>下载之前Client提交的资源到本地。</li></ol><p>（3）任务分配</p><ol><li>MRAppMaster向RM申请运行多个MapTask任务资源。</li><li>RM将运行MapTask任务分配给另外两个NodeManager，另外两个NodeManager分别领取任务并创建容器。</li></ol><p>（4）任务执行</p><ol><li>MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</li><li>MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</li><li>ReduceTask向MapTask获取相应分区的数据。</li><li>程序运行完毕后，MR会向RM申请注销自己。</li></ol><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><h2 id="4大组件"><a href="#4大组件" class="headerlink" title="4大组件"></a>4大组件</h2><ul><li><strong>ResourceManager</strong>：总的老大：处理客户端请求，监控NodeManager，启动或监控ApplicationMaster，资源的分配与调度</li><li><strong>NodeManager</strong>：单个节点的老大：管理单个节点的资源，处理来自ResourceManager、ApplicationMaster的命令</li><li><strong>ApplicationMaster</strong>：单个job的老大：负责数据切分，为应用程序申请资源并分配内部的任务，任务的监控与容错</li><li><strong>Container</strong>：资源抽象：如内存、cpu、磁盘、网络等</li></ul><h2 id="3种资源调度器"><a href="#3种资源调度器" class="headerlink" title="3种资源调度器"></a>3种资源调度器</h2><ul><li><strong>FIFO</strong>：先进先出</li><li><strong>Capacity Scheduler</strong>：多FIFO队列，会对同一用户提交资源进行限定，会把任务分配给更闲的队列。</li><li><strong>Fair Scheduler</strong>：多队列，按缺额排序，缺额大者优先执行</li></ul><h2 id="任务推测执行机制"><a href="#任务推测执行机制" class="headerlink" title="任务推测执行机制"></a>任务推测执行机制</h2><ul><li>问题：系统中有99%的Map任务都完成了，只有少数几个Map老是进度很慢，完不成。</li><li>办法：为拖后腿任务启动一个备份任务，同时运行。谁先运行完，则采用谁的结果。</li><li>前提：每个Task只能有一个备份任务，当前Job已完成的Task必须不小于0.05（5%）。</li><li>不适用：任务间存在严重的负载倾斜；特殊任务，比如任务向数据库中写数据。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fireReport</title>
      <link href="/2023/02/11/fireReport/"/>
      <url>/2023/02/11/fireReport/</url>
      
        <content type="html"><![CDATA[<h2 id="帆软普通报表入门示例"><a href="#帆软普通报表入门示例" class="headerlink" title="帆软普通报表入门示例"></a>帆软普通报表入门示例</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>​报表设计主要可以分为新建报表、数据准备、报表主体设计、报表预览几大部分。其中报表主体可以分为大标题、小标题、表格数据、结尾几大部分，本文主要以普通报表为例，讲述如何按照报表设计流程快速设计一张报表。</p><h4 id="1、1-预期效果"><a href="#1、1-预期效果" class="headerlink" title="1、1 预期效果"></a>1、1 预期效果</h4><p><img src="/2023/02/11/fireReport/image-20230218221857167.png" alt="image-20230218221857167"></p><h3 id="2、报表开发"><a href="#2、报表开发" class="headerlink" title="2、报表开发"></a>2、报表开发</h3><p>​新建数据连接，打开设计器，点击最上方菜单栏中「服务器&gt;定义数据连接」，弹出「定义数据连接」对话框，设计器已经默认连接了一个名为 FRDemo 的内置数据库，点击「测试链接」，弹出「连接成功」提示框，表示数据库 FRDemo 成功与设计器建立连接。</p><p><img src="/2023/02/11/fireReport/image-20230117173352327.png" alt="image-20230117173352327"></p><h4 id="2-2-新建报表"><a href="#2-2-新建报表" class="headerlink" title="2.2 新建报表"></a>2.2 新建报表</h4><p>​菜单栏点击「文件」可选择新建报表的类型，或点击快捷按钮<img src="https://help.fanruan.com/finereport/uploads/20220217/1645066223l8aC.png" alt="img">，快速新建一张空白的「普通报表」。如下图所示：</p><p><img src="https://help.fanruan.com/finereport/uploads/20220217/1645066260ZwPP.png" alt="img"></p><h4 id="2-3-准备数据"><a href="#2-3-准备数据" class="headerlink" title="2.3 准备数据"></a>2.3 准备数据</h4><p>​数据集是报表设计时的直接数据来源。数据集按照作用范围分为两种：服务器数据集 和 模板数据集。</p><p>服务器数据所有模版可用，模版数据集只有该模版才可用。</p><p>1）本示例在数据集管理面板中选择「模板数据集」，点击上方的【+】，新建【数据库查询】，输入 SQL 查询语句取出表中的所有数据。</p><p>ps：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">rownum,</span><br><span class="line">cdsr.company_code,</span><br><span class="line">cdsr.business_account_period,</span><br><span class="line">cdsr.&quot;business_cost&quot;,</span><br><span class="line">t1.meaning <span class="keyword">as</span> &quot;business_task&quot;,</span><br><span class="line">cdsr.&quot;mkt&quot;,</span><br><span class="line">cdsr.&quot;pro&quot;,</span><br><span class="line">cdsr.&quot;sit&quot;,</span><br><span class="line">cdsr.&quot;ve2&quot;,</span><br><span class="line">cdsr.&quot;ntv&quot;,</span><br><span class="line">cdsr.&quot;stm&quot;,</span><br><span class="line">cdsr.&quot;dimension_amount&quot; cur_dimension_amount,</span><br><span class="line">(<span class="keyword">select</span> dimension_amount <span class="keyword">from</span> cdas_dms_summary_result <span class="keyword">where</span> </span><br><span class="line">&quot;business_account_period&quot; <span class="operator">=</span> to_char( ADD_MONTHS(to_date(cdsr.business_account_period,<span class="string">&#x27;yyyy-mm&#x27;</span>)</span><br><span class="line">,<span class="number">-1</span>),<span class="string">&#x27;yyyy-mm&#x27;</span>) </span><br><span class="line"> <span class="keyword">and</span> company_code <span class="operator">=</span> cdsr.company_code) last_dimension_amount</span><br><span class="line"><span class="keyword">from</span> cdas_dms_summary_result cdsr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">value</span>,meaning <span class="keyword">from</span> hzero.hpfm_lov_value  <span class="keyword">where</span> lov_code <span class="operator">=</span> <span class="string">&#x27;CDIM.WORK_COST&#x27;</span>) t1 <span class="keyword">on</span> t1.value <span class="operator">=</span> cdsr.&quot;business_task&quot;</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line"><span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">$&#123;if(len(p_company_code) <span class="operator">=</span> <span class="number">0</span>,&quot;&quot;,</span><br><span class="line">    &quot;and cdsr.company_code in (&#x27;&quot; <span class="operator">+</span> p_company_code <span class="operator">+</span> &quot;&#x27;)&quot;</span><br><span class="line">  )&#125;</span><br><span class="line">$&#123;if(len(p_company_code) <span class="operator">=</span> <span class="number">0</span>,&quot;&quot;,</span><br><span class="line">    &quot;and cdsr.business_account_period in (&#x27;&quot; <span class="operator">+</span> p_period_name <span class="operator">+</span> &quot;&#x27;)&quot;</span><br><span class="line">  )&#125;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cdsr.business_account_period</span><br></pre></td></tr></table></figure><p>2）新建好数据集之后，可在数据集管理面板查看取出的数据。</p><h4 id="2-4-标题设计"><a href="#2-4-标题设计" class="headerlink" title="2.4 标题设计"></a>2.4 标题设计</h4><p>按照自己的需求设计标题和表头，将数据集中的字段拖到对应要展示列的下方，如下所示</p><p><img src="/2023/02/11/fireReport/image-20230218222014424.png" alt="image-20230218222014424"></p><h4 id="2-5-设置父子格"><a href="#2-5-设置父子格" class="headerlink" title="2.5 设置父子格"></a>2.5 设置父子格</h4><p>​由于每个单元格均存在父子格关系，单元格会跟随父格扩展或计算，如下所示，在本例中，圈起来的字段是公司，是根据sql查询结果而变化的，属于动态字段，要设计其扩展方向向右扩展。</p><img src="/2023/02/11/fireReport/image-20230117175609792.png" alt="image-20230117175609792" style="zoom:50%;"><p>​然后设置子单元格的父格，使其可以随父格移动。</p><img src="/2023/02/11/fireReport/image-20230117175500072.png" alt="image-20230117175500072" style="zoom:50%;"><h4 id="2-6-设置查询参数"><a href="#2-6-设置查询参数" class="headerlink" title="2.6 设置查询参数"></a>2.6 设置查询参数</h4><p>​可以选择自己所需的控件（标签、下拉框或者多选下拉框），下面展示的是一个多选下拉框，主要设置：</p><p> 1、控件名称（p_company_code）这个参数将作为sql里面的引用变量。</p><p> 2、设置控件值为字符串，设置返回值类型为字符串，分隔符为’,’</p><p> 3、设置数据字典，可选择的数据字典类型有 4 种，其中包括「数据库表，数据查询，自定义，公式」，将分别对应不同应用场景。</p><p>ps ：使用如下方式传参</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;if(len(p_company_code) <span class="operator">=</span> <span class="number">0</span>,&quot;&quot;,</span><br><span class="line">    &quot;and cdsr.company_code in (&#x27;&quot; <span class="operator">+</span> p_company_code <span class="operator">+</span> &quot;&#x27;)&quot;</span><br><span class="line">  )&#125;</span><br></pre></td></tr></table></figure><img src="/2023/02/11/fireReport/image-20230117180637367.png" alt="image-20230117180637367" style="zoom:50%;"><img src="/2023/02/11/fireReport/image-20230117180715779.png" alt="image-20230117180715779" style="zoom: 50%;"><p>备注：如果预览列数展示不全分页了，可设置页面宽高为2000。</p><p>2.7 设置</p>]]></content>
      
      
      
        <tags>
            
            <tag> fireReport </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
